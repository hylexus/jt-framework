import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as t,a as s}from"./app-BEQS3wW-.js";const a={},o=s(`<h1 id="响应消息映射" tabindex="-1"><a class="header-anchor" href="#响应消息映射"><span>响应消息映射</span></a></h1><h2 id="jt808responsebody" tabindex="-1"><a class="header-anchor" href="#jt808responsebody"><span>@Jt808ResponseBody</span></a></h2><p>该注解的作用类似于 <code>WebFlux/WebMvc</code> 中的 <code>@ResponseBody</code> 。</p><p>表明被该注解标记的类可以作为 <strong>响应体</strong>。</p><h3 id="属性" tabindex="-1"><a class="header-anchor" href="#属性"><span>属性</span></a></h3><table><thead><tr><th>属性</th><th>说明</th><th>默认值</th><th>示例</th></tr></thead><tbody><tr><td><code>msgId</code></td><td>消息类型</td><td>--</td><td><code>{0x8103}</code>、<code>{0x8001}</code></td></tr><tr><td><code>maxPackageSize</code></td><td>单个数据包的最大大小(转义之前)</td><td><code>1024</code></td><td><code>1024</code> 、<code> 2048</code></td></tr><tr><td><code>desc</code></td><td>描述信息</td><td><code>&quot;&quot;</code></td><td><code>&quot;Some description ...&quot;</code></td></tr><tr><td><code>reversedBit15InHeader</code></td><td>消息体属性中保留的第15个 <code>bit</code></td><td><code>0</code></td><td></td></tr></tbody></table><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Jt808ResponseBody</span><span class="token punctuation">(</span>msgId <span class="token operator">=</span> <span class="token number">0x8103</span><span class="token punctuation">,</span> desc <span class="token operator">=</span> <span class="token string">&quot;设置终端参数&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RespTerminalSettings</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@ResponseField</span><span class="token punctuation">(</span>order <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token class-name">MsgDataType</span><span class="token punctuation">.</span><span class="token constant">LIST</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ParamItem</span><span class="token punctuation">&gt;</span></span> paramList<span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="responsefield" tabindex="-1"><a class="header-anchor" href="#responsefield"><span>@ResponseField</span></a></h2><h3 id="属性-1" tabindex="-1"><a class="header-anchor" href="#属性-1"><span>属性</span></a></h3><table><thead><tr><th>属性</th><th>说明</th><th>默认值</th><th>示例</th></tr></thead><tbody><tr><td><code>order</code></td><td>赋值顺序，值越小优先级越高(不要求连续，只比较大小)</td><td>--</td><td><code>0</code>、<code>1</code>、<code>2</code></td></tr><tr><td><code>dataType</code></td><td>数据类型</td><td>--</td><td><code>WORD</code>、<code>BYTE</code></td></tr><tr><td><code>conditionalOn</code></td><td>支持 <code>SpEL</code> , 当且仅当计算结果为 <code>true</code> 时才会序列化</td><td><code>&quot;&quot;</code></td><td><code>&quot;#this.result == 0&quot;</code></td></tr><tr><td><code>customerFieldSerializerClass</code></td><td>自定义反序列化器</td><td>--</td><td><code>&quot;XxxSerializer.class&quot;</code></td></tr></tbody></table><h3 id="spel" tabindex="-1"><a class="header-anchor" href="#spel"><span>SpEL</span></a></h3><table><thead><tr><th>属性</th><th>说明</th><th></th></tr></thead><tbody><tr><td><code>this</code></td><td>正在迭代的当前对象</td><td>永不为空</td></tr><tr><td><code>request</code></td><td>本次请求对应的 <code>Jt808Request</code> 实例</td><td>主动下发消息时为空(因为此时没有 Request 的概念)</td></tr><tr><td><code>header</code></td><td>本次请求对应的 <code>Jt808Request#header()</code> 实例</td><td>主动下发消息时为空(因为此时没有 Request 的概念)</td></tr><tr><td><code>session</code></td><td><code>Jt808Session</code> 实例</td><td>手动编码消息时可能为空</td></tr></tbody></table><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>SpEL</code> 绑定的 <code>RootObject</code> 就是当前正在迭代的对象。</p><p>所以 <code>#this.someField</code> 等价于 <code>someField</code>、<code>#this.someMethod()</code> 等价于 <code>someMethod()</code> (<code>#this</code> 可以省略)。</p></div><h3 id="示例-1" tabindex="-1"><a class="header-anchor" href="#示例-1"><span>示例</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Jt808ResponseBody</span><span class="token punctuation">(</span>msgId <span class="token operator">=</span> <span class="token number">0x8100</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TerminalRegisterReplyRespMsg</span> <span class="token punctuation">{</span>

    <span class="token comment">// 1. byte[0,2) WORD 对应的终端注册消息的流水号</span>
    <span class="token annotation punctuation">@ResponseField</span><span class="token punctuation">(</span>order <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token class-name">MsgDataType</span><span class="token punctuation">.</span><span class="token constant">WORD</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> flowId<span class="token punctuation">;</span>
    
    <span class="token comment">// 2. byte[2,3) BYTE 0:成功;1:车辆已被注册;2:数据库中无该车辆; 3:终端已被注册;4:数据库中无该终端</span>
    <span class="token annotation punctuation">@ResponseField</span><span class="token punctuation">(</span>order <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token class-name">MsgDataType</span><span class="token punctuation">.</span><span class="token constant">BYTE</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">byte</span> result<span class="token punctuation">;</span>
    
    <span class="token comment">// 3. byte[3,x) STRING 鉴权码(只有在成功后才有该字段)</span>
    <span class="token annotation punctuation">@ResponseField</span><span class="token punctuation">(</span>order <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token class-name">MsgDataType</span><span class="token punctuation">.</span><span class="token constant">STRING</span><span class="token punctuation">,</span> conditionalOn <span class="token operator">=</span> <span class="token string">&quot;result == 0&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> authCode<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><div class="highlight-line"> </div><br><br><br><div class="highlight-line"> </div><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),d=[o];function c(p,i){return n(),t("div",null,d)}const u=e(a,[["render",c],["__file","resp-msg-mapping.html.vue"]]),h=JSON.parse('{"path":"/v2/jt-808/guide/annotation-based-dev/resp-msg-mapping.html","title":"响应消息映射","lang":"zh-CN","frontmatter":{"icon":"at","description":"响应消息映射 @Jt808ResponseBody 该注解的作用类似于 WebFlux/WebMvc 中的 @ResponseBody 。 表明被该注解标记的类可以作为 响应体。 属性 示例 @ResponseField 属性 SpEL 提示 SpEL 绑定的 RootObject 就是当前正在迭代的对象。 所以 #this.someField 等价于...","head":[["meta",{"property":"og:url","content":"https://github.com/hylexus/jt-framework/jt-framework/v2/jt-808/guide/annotation-based-dev/resp-msg-mapping.html"}],["meta",{"property":"og:site_name","content":"jt-framework"}],["meta",{"property":"og:title","content":"响应消息映射"}],["meta",{"property":"og:description","content":"响应消息映射 @Jt808ResponseBody 该注解的作用类似于 WebFlux/WebMvc 中的 @ResponseBody 。 表明被该注解标记的类可以作为 响应体。 属性 示例 @ResponseField 属性 SpEL 提示 SpEL 绑定的 RootObject 就是当前正在迭代的对象。 所以 #this.someField 等价于..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-06T15:49:53.000Z"}],["meta",{"property":"article:author","content":"hylexus"}],["meta",{"property":"article:modified_time","content":"2023-05-06T15:49:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"响应消息映射\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-06T15:49:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"hylexus\\",\\"url\\":\\"https://github.com/hylexus\\"}]}"]]},"headers":[{"level":2,"title":"@Jt808ResponseBody","slug":"jt808responsebody","link":"#jt808responsebody","children":[{"level":3,"title":"属性","slug":"属性","link":"#属性","children":[]},{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]}]},{"level":2,"title":"@ResponseField","slug":"responsefield","link":"#responsefield","children":[{"level":3,"title":"属性","slug":"属性-1","link":"#属性-1","children":[]},{"level":3,"title":"SpEL","slug":"spel","link":"#spel","children":[]},{"level":3,"title":"示例","slug":"示例-1","link":"#示例-1","children":[]}]}],"git":{"createdTime":1671812085000,"updatedTime":1683388193000,"contributors":[{"name":"hylexus","email":"hylexus@163.com","commits":2}]},"readingTime":{"minutes":1.52,"words":455},"filePathRelative":"v2/jt-808/guide/annotation-based-dev/resp-msg-mapping.md","localizedDate":"2022年12月24日","autoDesc":true,"excerpt":"\\n<h2>@Jt808ResponseBody</h2>\\n<p>该注解的作用类似于 <code>WebFlux/WebMvc</code> 中的 <code>@ResponseBody</code> 。</p>\\n<p>表明被该注解标记的类可以作为 <strong>响应体</strong>。</p>\\n<h3>属性</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>属性</th>\\n<th>说明</th>\\n<th>默认值</th>\\n<th>示例</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>msgId</code></td>\\n<td>消息类型</td>\\n<td>--</td>\\n<td><code>{0x8103}</code>、<code>{0x8001}</code></td>\\n</tr>\\n<tr>\\n<td><code>maxPackageSize</code></td>\\n<td>单个数据包的最大大小(转义之前)</td>\\n<td><code>1024</code></td>\\n<td><code>1024</code> 、<code> 2048</code></td>\\n</tr>\\n<tr>\\n<td><code>desc</code></td>\\n<td>描述信息</td>\\n<td><code>\\"\\"</code></td>\\n<td><code>\\"Some description ...\\"</code></td>\\n</tr>\\n<tr>\\n<td><code>reversedBit15InHeader</code></td>\\n<td>消息体属性中保留的第15个 <code>bit</code></td>\\n<td><code>0</code></td>\\n<td></td>\\n</tr>\\n</tbody>\\n</table>"}');export{u as comp,h as data};
