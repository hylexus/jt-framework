import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as t}from"./app-BEQS3wW-.js";const e={},p=t(`<h1 id="消息类型" tabindex="-1"><a class="header-anchor" href="#消息类型"><span>消息类型</span></a></h1><h2 id="msgtype" tabindex="-1"><a class="header-anchor" href="#msgtype"><span>MsgType</span></a></h2><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li>各个厂商对 <strong>808协议</strong> 都是选择性的实现，同时还有自定义的消息类型。</li><li>所以，并没有内置所有类型的消息，而是定义了一个 <code>MsgType</code> 接口以供用户自行扩展。</li><li>建议实现接口的时候使用枚举</li></ul></div><details class="hint-container details"><summary>点击查看 MsgType 接口定义</summary><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MsgType</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@return</span> 消息ID(消息头中的前两个字节)
     */</span>
    <span class="token keyword">int</span> <span class="token function">getMsgId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@param</span> <span class="token parameter">msgId</span> 消息ID
     * <span class="token keyword">@return</span> 转换之后的 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">MsgType</span></span><span class="token punctuation">}</span> 实例
     */</span>
    <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MsgType</span><span class="token punctuation">&gt;</span></span> <span class="token function">parseFromInt</span><span class="token punctuation">(</span><span class="token keyword">int</span> msgId<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> <span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>每个项目都应该提供一个自己的 <code>MsgType</code> 实现，参考下面的 <code>MyMsgType</code> 定义：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">MyMsgType</span> <span class="token keyword">implements</span> <span class="token class-name">MsgType</span> <span class="token punctuation">{</span>
    <span class="token function">CLIENT_REGISTER</span><span class="token punctuation">(</span><span class="token number">0x0100</span><span class="token punctuation">,</span> <span class="token string">&quot;终端注册&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">CLIENT_AUTH</span><span class="token punctuation">(</span><span class="token number">0x0102</span><span class="token punctuation">,</span> <span class="token string">&quot;终端鉴权&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">// ...</span>
    <span class="token comment">// 在这里继续扩你的消息类型就行了(即便是和内置的重复了也会使用你自定义的)</span>
    <span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> msgId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> desc<span class="token punctuation">;</span>

    <span class="token class-name">MyMsgType</span><span class="token punctuation">(</span><span class="token keyword">int</span> msgId<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>msgId <span class="token operator">=</span> msgId<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> desc<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">MsgType</span><span class="token punctuation">&gt;</span></span> mappings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MyMsgType</span> value <span class="token operator">:</span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            mappings<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>msgId<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MsgType</span><span class="token punctuation">&gt;</span></span> <span class="token function">parseFromInt</span><span class="token punctuation">(</span><span class="token keyword">int</span> msgId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>mappings<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>msgId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getMsgId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> msgId<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> desc<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jt808msgtypeparser" tabindex="-1"><a class="header-anchor" href="#jt808msgtypeparser"><span>Jt808MsgTypeParser</span></a></h2><p><code>Jt808MsgTypeParser</code> 负责解析 <code>MsgType</code>。</p><details class="hint-container details"><summary>点击查看 Jt808MsgTypeParser 接口定义</summary><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Jt808MsgTypeParser</span> <span class="token punctuation">{</span>

    <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MsgType</span><span class="token punctuation">&gt;</span></span> <span class="token function">parseMsgType</span><span class="token punctuation">(</span><span class="token keyword">int</span> msgId<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><div class="hint-container caution"><p class="hint-container-title">注意</p><p>每个项目都应该提供一个自己的 <code>Jt808MsgTypeParser</code> 实现并加入到 <code>Spring</code> 容器中。参考下面的 <code>MyJt808Config</code> 定义：</p></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyJt808Config</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Jt808MsgTypeParser</span> <span class="token function">jt808MsgTypeParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 下面代码中的 \`MyMsgType\` 指的就是你自定义的类型(你只需要在你自己的 \`MyMsgType\` 中扩展枚举就行了)</span>
        <span class="token comment">// 优先使用自定义类型解析</span>
        <span class="token keyword">return</span> msgId <span class="token operator">-&gt;</span> <span class="token class-name">MyMsgType</span><span class="token punctuation">.</span><span class="token constant">CLIENT_AUTH</span><span class="token punctuation">.</span><span class="token function">parseFromInt</span><span class="token punctuation">(</span>msgId<span class="token punctuation">)</span>
                <span class="token comment">// 使用内置类型解析</span>
                <span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">BuiltinJt808MsgType</span><span class="token punctuation">.</span><span class="token constant">CLIENT_AUTH</span><span class="token punctuation">.</span><span class="token function">parseFromInt</span><span class="token punctuation">(</span>msgId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),c=[p];function o(l,i){return s(),a("div",null,c)}const d=n(e,[["render",o],["__file","jt808-msg-type-parser.html.vue"]]),k=JSON.parse('{"path":"/v2/jt-808/guide/quick-start/jt808-msg-type-parser.html","title":"消息类型","lang":"zh-CN","frontmatter":{"icon":"type","description":"消息类型 MsgType 提示 各个厂商对 808协议 都是选择性的实现，同时还有自定义的消息类型。 所以，并没有内置所有类型的消息，而是定义了一个 MsgType 接口以供用户自行扩展。 建议实现接口的时候使用枚举 点击查看 MsgType 接口定义 每个项目都应该提供一个自己的 MsgType 实现，参考下面的 MyMsgType 定义： Jt80...","head":[["meta",{"property":"og:url","content":"https://github.com/hylexus/jt-framework/jt-framework/v2/jt-808/guide/quick-start/jt808-msg-type-parser.html"}],["meta",{"property":"og:site_name","content":"jt-framework"}],["meta",{"property":"og:title","content":"消息类型"}],["meta",{"property":"og:description","content":"消息类型 MsgType 提示 各个厂商对 808协议 都是选择性的实现，同时还有自定义的消息类型。 所以，并没有内置所有类型的消息，而是定义了一个 MsgType 接口以供用户自行扩展。 建议实现接口的时候使用枚举 点击查看 MsgType 接口定义 每个项目都应该提供一个自己的 MsgType 实现，参考下面的 MyMsgType 定义： Jt80..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-02T14:49:50.000Z"}],["meta",{"property":"article:author","content":"hylexus"}],["meta",{"property":"article:modified_time","content":"2023-05-02T14:49:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"消息类型\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-02T14:49:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"hylexus\\",\\"url\\":\\"https://github.com/hylexus\\"}]}"]]},"headers":[{"level":2,"title":"MsgType","slug":"msgtype","link":"#msgtype","children":[]},{"level":2,"title":"Jt808MsgTypeParser","slug":"jt808msgtypeparser","link":"#jt808msgtypeparser","children":[]}],"git":{"createdTime":1671812085000,"updatedTime":1683038990000,"contributors":[{"name":"hylexus","email":"hylexus@163.com","commits":2}]},"readingTime":{"minutes":1.38,"words":414},"filePathRelative":"v2/jt-808/guide/quick-start/jt808-msg-type-parser.md","localizedDate":"2022年12月24日","autoDesc":true,"excerpt":"\\n<h2>MsgType</h2>\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<ul>\\n<li>各个厂商对 <strong>808协议</strong> 都是选择性的实现，同时还有自定义的消息类型。</li>\\n<li>所以，并没有内置所有类型的消息，而是定义了一个 <code>MsgType</code> 接口以供用户自行扩展。</li>\\n<li>建议实现接口的时候使用枚举</li>\\n</ul>\\n</div>\\n<details class=\\"hint-container details\\"><summary>点击查看 MsgType 接口定义</summary>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">interface</span> <span class=\\"token class-name\\">MsgType</span> <span class=\\"token punctuation\\">{</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * <span class=\\"token keyword\\">@return</span> 消息ID(消息头中的前两个字节)\\n     */</span>\\n    <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">getMsgId</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">msgId</span> 消息ID\\n     * <span class=\\"token keyword\\">@return</span> 转换之后的 <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">MsgType</span></span><span class=\\"token punctuation\\">}</span> 实例\\n     */</span>\\n    <span class=\\"token class-name\\">Optional</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">MsgType</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token function\\">parseFromInt</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> msgId<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token class-name\\">String</span> <span class=\\"token function\\">getDesc</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token class-name\\">String</span> <span class=\\"token function\\">toString</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div></details>"}');export{d as comp,k as data};
