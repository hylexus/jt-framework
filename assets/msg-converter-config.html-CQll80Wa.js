import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o as i,c as l,b as n,d as s,e as a,w as o,a as u}from"./app-BEQS3wW-.js";const r={},d=n("h1",{id:"消息转换器",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#消息转换器"},[n("span",null,"消息转换器")])],-1),k=n("p",null,[n("code",null,"RequestMsgBodyConverter"),s(" 负责将客户端请求中的 "),n("code",null,"byte[]"),s(" 转换为 "),n("code",null,"请求消息体实体类"),s(" 以方便使用。")],-1),m=n("h2",{id:"手动实现并注册",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#手动实现并注册"},[n("span",null,"手动实现并注册")])],-1),v={class:"hint-container caution"},g=n("p",{class:"hint-container-title"},"RequestMsgBodyConverter",-1),y=n("li",null,[s("自定义的消息体解析器 "),n("code",null,"必须"),s(" 实现 "),n("code",null,"RequestMsgBodyConverter"),s(" 这个泛型接口")],-1),b=n("code",null,"基于注解",-1),h=n("code",null,"RequestMsgBodyConverter",-1),_=u(`<ul><li>以下为示例性的解析位置消息的 <code>RequestMsgBodyConverter</code></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocationUploadMsgBodyConverter2</span> <span class="token keyword">implements</span> <span class="token class-name">RequestMsgBodyConverter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LocationUploadMsgBody</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LocationUploadMsgBody</span><span class="token punctuation">&gt;</span></span> <span class="token function">convert2Entity</span><span class="token punctuation">(</span><span class="token class-name">RequestMsgMetadata</span> metadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> metadata<span class="token punctuation">.</span><span class="token function">getBodyBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">LocationUploadMsgBody</span> body <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocationUploadMsgBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        body<span class="token punctuation">.</span><span class="token function">setWarningFlag</span><span class="token punctuation">(</span><span class="token function">intFromBytes</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        body<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token function">intFromBytes</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        body<span class="token punctuation">.</span><span class="token function">setLat</span><span class="token punctuation">(</span><span class="token function">intFromBytes</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">100_0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        body<span class="token punctuation">.</span><span class="token function">setLng</span><span class="token punctuation">(</span><span class="token function">intFromBytes</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">100_0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        body<span class="token punctuation">.</span><span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token function">intFromBytes</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        body<span class="token punctuation">.</span><span class="token function">setSpeed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token function">intFromBytes</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        body<span class="token punctuation">.</span><span class="token function">setDirection</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token function">intFromBytes</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        body<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span><span class="token class-name">BcdOps</span><span class="token punctuation">.</span><span class="token function">bytes2BcdString</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>注册自定义 <code>RequestMsgBodyConverter</code></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Jt808Config</span> <span class="token keyword">extends</span> <span class="token class-name">Jt808ServerConfigurationSupport</span> <span class="token punctuation">{</span> 
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureMsgConverterMapping</span><span class="token punctuation">(</span><span class="token class-name">MsgConverterMapping</span> mapping<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">configureMsgConverterMapping</span><span class="token punctuation">(</span>mapping<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 手动将自定义处理器注册到 MsgConverterMapping</span>
        mapping<span class="token punctuation">.</span><span class="token function">registerConverter</span><span class="token punctuation">(</span><span class="token class-name">Jt808MsgType</span><span class="token punctuation">.</span><span class="token constant">CLIENT_LOCATION_INFO_UPLOAD</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LocationUploadMsgBodyConverter2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="基于注解实现" tabindex="-1"><a class="header-anchor" href="#基于注解实现"><span>基于注解实现</span></a></h2>`,5),f={class:"hint-container tip"},B=n("p",{class:"hint-container-title"},"传送门",-1),C=n("code",null,"RequestMsgBodyConverter",-1),M=n("hr",null,null,-1),w={class:"hint-container tip"},j=n("p",{class:"hint-container-title"},"传送门",-1),q={href:"https://github.com/hylexus/jt-framework/tree/master/samples/jt-808-server-sample-customized",target:"_blank",rel:"noopener noreferrer"};function x(R,L){const t=e("RouteLink"),p=e("ExternalLinkIcon");return i(),l("div",null,[d,k,m,n("div",v,[g,n("ul",null,[y,n("li",null,[s("当然，这种实现接口并手动注册的方式显得非常繁琐，你完全可以 "),a(t,{to:"/v1/jt-808/guide/customization/src/v1/jt-808/guide/annotation-based-dev/req-msg-mapping.html"},{default:o(()=>[s("参考这里")]),_:1}),s(" 使用 "),b,s(" 的方式来实现 "),h,s(" 的功能。")])])]),_,n("div",f,[B,n("p",null,[s("基于注解来实现 "),C,s(" 的功能 "),a(t,{to:"/v1/jt-808/guide/customization/src/v1/jt-808/guide/annotation-based-dev/req-msg-mapping.html"},{default:o(()=>[s("请移步这里")]),_:1})])]),M,n("div",w,[j,n("p",null,[s("本小节的示例可以在 "),n("a",q,[s("samples/jt-808-server-sample-customized"),a(p)]),s(" 下找到对应代码。")])])])}const N=c(r,[["render",x],["__file","msg-converter-config.html.vue"]]),O=JSON.parse('{"path":"/v1/jt-808/guide/customization/msg-converter-config.html","title":"消息转换器","lang":"zh-CN","frontmatter":{"description":"消息转换器 RequestMsgBodyConverter 负责将客户端请求中的 byte[] 转换为 请求消息体实体类 以方便使用。 手动实现并注册 RequestMsgBodyConverter 自定义的消息体解析器 必须 实现 RequestMsgBodyConverter 这个泛型接口 当然，这种实现接口并手动注册的方式显得非常繁琐，你完全可以...","head":[["meta",{"property":"og:url","content":"https://github.com/hylexus/jt-framework/jt-framework/v1/jt-808/guide/customization/msg-converter-config.html"}],["meta",{"property":"og:site_name","content":"jt-framework"}],["meta",{"property":"og:title","content":"消息转换器"}],["meta",{"property":"og:description","content":"消息转换器 RequestMsgBodyConverter 负责将客户端请求中的 byte[] 转换为 请求消息体实体类 以方便使用。 手动实现并注册 RequestMsgBodyConverter 自定义的消息体解析器 必须 实现 RequestMsgBodyConverter 这个泛型接口 当然，这种实现接口并手动注册的方式显得非常繁琐，你完全可以..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-12-23T16:14:45.000Z"}],["meta",{"property":"article:author","content":"hylexus"}],["meta",{"property":"article:modified_time","content":"2022-12-23T16:14:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"消息转换器\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-12-23T16:14:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"hylexus\\",\\"url\\":\\"https://github.com/hylexus\\"}]}"]]},"headers":[{"level":2,"title":"手动实现并注册","slug":"手动实现并注册","link":"#手动实现并注册","children":[]},{"level":2,"title":"基于注解实现","slug":"基于注解实现","link":"#基于注解实现","children":[]}],"git":{"createdTime":1671812085000,"updatedTime":1671812085000,"contributors":[{"name":"hylexus","email":"hylexus@163.com","commits":1}]},"readingTime":{"minutes":1.02,"words":307},"filePathRelative":"v1/jt-808/guide/customization/msg-converter-config.md","localizedDate":"2022年12月24日","autoDesc":true,"excerpt":"\\n<p><code>RequestMsgBodyConverter</code> 负责将客户端请求中的 <code>byte[]</code> 转换为 <code>请求消息体实体类</code> 以方便使用。</p>\\n<h2>手动实现并注册</h2>\\n<div class=\\"hint-container caution\\">\\n<p class=\\"hint-container-title\\">RequestMsgBodyConverter</p>\\n<ul>\\n<li>自定义的消息体解析器 <code>必须</code> 实现 <code>RequestMsgBodyConverter</code> 这个泛型接口</li>\\n<li>当然，这种实现接口并手动注册的方式显得非常繁琐，你完全可以 <a href=\\"/jt-framework/v1/jt-808/guide/customization/src/v1/jt-808/guide/annotation-based-dev/req-msg-mapping.html\\" target=\\"_blank\\">参考这里</a> 使用 <code>基于注解</code> 的方式来实现 <code>RequestMsgBodyConverter</code> 的功能。</li>\\n</ul>\\n</div>"}');export{N as comp,O as data};
