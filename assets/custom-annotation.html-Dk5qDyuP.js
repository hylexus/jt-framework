import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as p,b as n,d as s,a as o}from"./app-BEQS3wW-.js";const c={},l=n("h1",{id:"自定义注解-v2-1-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#自定义注解-v2-1-1"},[n("span",null,"自定义注解(v2.1.1)")])],-1),i=n("h2",{id:"请先读我",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#请先读我"},[n("span",null,"请先读我")])],-1),u=n("p",null,[s("这里说的自定义注解是通过 "),n("strong",null,"v2.1.1"),s(" 中引入的注解别名机制来扩展的自定义注解。")],-1),d=n("p",null,"下面就以位置上报报文中的经纬度字段和时间字段为例，演示如何扩展自己的注解。",-1),k={class:""},r=["src"],m=o(`<h2 id="示例1-geopoint" tabindex="-1"><a class="header-anchor" href="#示例1-geopoint"><span>示例1(GeoPoint)</span></a></h2><h3 id="目的" tabindex="-1"><a class="header-anchor" href="#目的"><span>目的</span></a></h3><p>这里的经纬度其实就是将 <strong>4</strong> 字节的 <code>DWORD</code> 转为数字(<code>Long</code>)，然后再除以 10<sup>6</sup>。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Jt808RequestBody</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BuiltinMsg0200V2013Alias</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>

    <span class="token comment">// (3). byte[8,12) DWORD 纬度</span>
    <span class="token annotation punctuation">@RequestFieldAlias.Dword</span><span class="token punctuation">(</span>order <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> lat<span class="token punctuation">;</span>

    <span class="token comment">// (4). byte[12,16) DWORD 经度</span>
    <span class="token annotation punctuation">@RequestFieldAlias.Dword</span><span class="token punctuation">(</span>order <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> lng<span class="token punctuation">;</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是内置的转换器实际上不支持从 <code>DWORD</code> 到 <code>Double</code> 的转换，只能写成 <code>Long</code> 然后再手动除以 10<sup>6</sup> 转为浮点数。</p><p>不过你可以扩展自定义注解实现这个转换。</p><h3 id="定义自己的注解" tabindex="-1"><a class="header-anchor" href="#定义自己的注解"><span>定义自己的注解</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">FIELD</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@RequestField</span><span class="token punctuation">(</span>dataType <span class="token operator">=</span> <span class="token class-name">MsgDataType</span><span class="token punctuation">.</span><span class="token constant">DWORD</span><span class="token punctuation">,</span> order <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> customerFieldDeserializerClass <span class="token operator">=</span> <span class="token class-name">ExtendedJt808FieldDeserializerGeoPoint</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">GeoPoint</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span>annotation <span class="token operator">=</span> <span class="token class-name">RequestField</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> attribute <span class="token operator">=</span> <span class="token string">&quot;order&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">int</span> <span class="token function">order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span>annotation <span class="token operator">=</span> <span class="token class-name">RequestField</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> attribute <span class="token operator">=</span> <span class="token string">&quot;desc&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span> <span class="token function">desc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="提供一个转换器" tabindex="-1"><a class="header-anchor" href="#提供一个转换器"><span>提供一个转换器</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 自定义的转换器 [不需要] 手动实例化, [也不需要] 注册到 \`Jt808FieldDeserializerRegistry\` 中</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExtendedJt808FieldDeserializerGeoPoint</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractExtendedJt808FieldDeserializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">LongFieldDeserializer</span> delegate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LongFieldDeserializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token class-name">ByteBuf</span> byteBuf<span class="token punctuation">,</span> <span class="token class-name">MsgDataType</span> msgDataType<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">,</span> <span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// 1. 先委托内置的 LongFieldDeserializer 解析为 LONG</span>
        <span class="token keyword">final</span> <span class="token class-name">Long</span> dword <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>delegate<span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span>byteBuf<span class="token punctuation">,</span> msgDataType<span class="token punctuation">,</span> start<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> targetClass <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">fieldMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFieldType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2. 然后再根据自己的要求进一步转换</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> dword<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">double</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> dword <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">1_000_000</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>dword<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setScale</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token class-name">RoundingMode</span><span class="token punctuation">.</span><span class="token constant">UP</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">&quot;1000000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">RoundingMode</span><span class="token punctuation">.</span><span class="token constant">UP</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Jt808AnnotationArgumentResolveException</span><span class="token punctuation">(</span><span class="token string">&quot;Cannot convert DataType from &quot;</span> <span class="token operator">+</span> msgDataType <span class="token operator">+</span> <span class="token string">&quot; to &quot;</span> <span class="token operator">+</span> targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用自定义注解" tabindex="-1"><a class="header-anchor" href="#使用自定义注解"><span>使用自定义注解</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Jt808RequestBody</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BuiltinMsg0200V2013Alias</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>

    <span class="token comment">// (3). byte[8,12) DWORD 纬度</span>
    <span class="token annotation punctuation">@GeoPoint</span><span class="token punctuation">(</span>order <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token comment">// 支持 long, double, BigDecimal</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> lat<span class="token punctuation">;</span>

    <span class="token comment">// (4). byte[12,16) DWORD 经度</span>
    <span class="token annotation punctuation">@GeoPoint</span><span class="token punctuation">(</span>order <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">)</span>
    <span class="token comment">// 支持 long, double, BigDecimal</span>
    <span class="token keyword">private</span> <span class="token class-name">BigDecimal</span> lng<span class="token punctuation">;</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>实际上这里演示的这个注解已经在 <strong>2.1.1</strong> 中内置了, 全类名是 <code>@io.github.hylexus.jt.jt808.support.annotation.msg.req.RequestFieldAlias.GeoPoint</code>。</p></div><h2 id="示例2-bcddatetime" tabindex="-1"><a class="header-anchor" href="#示例2-bcddatetime"><span>示例2(BcdDateTime)</span></a></h2><h3 id="目的-1" tabindex="-1"><a class="header-anchor" href="#目的-1"><span>目的</span></a></h3><p>位置上报报文中的时间字段是以 <code>BCD</code> 格式编码的字符串，格式为 <code>yyMMddHHmmss</code>。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Jt808RequestBody</span>
<span class="token annotation punctuation">@BuiltinComponent</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BuiltinMsg0200V2013Alias</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>

    <span class="token comment">// (8). byte[22,28) BCD[6] 时间</span>
    <span class="token annotation punctuation">@RequestFieldAlias.Bcd</span><span class="token punctuation">(</span>order <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">,</span> length <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> time<span class="token punctuation">;</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是内置的反序列化器并不支持直接从 <code>BCD</code> 转为 <code>Date</code> 或 <code>LocalDateTime</code>，只能转为 <code>String</code> 或其他类型。</p><p>从 <strong>2.1.1</strong> 开始，你可以定义自己的注解来完成这种特殊需求。</p><h3 id="定义自己的注解-1" tabindex="-1"><a class="header-anchor" href="#定义自己的注解-1"><span>定义自己的注解</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">FIELD</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@RequestField</span><span class="token punctuation">(</span>dataType <span class="token operator">=</span> <span class="token class-name">MsgDataType</span><span class="token punctuation">.</span><span class="token constant">BCD</span><span class="token punctuation">,</span> length <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span> customerFieldDeserializerClass <span class="token operator">=</span> <span class="token class-name">MyExtendedJt808FieldDeserializerBcdTime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> order <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">BcdDateTime</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span>annotation <span class="token operator">=</span> <span class="token class-name">RequestField</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> attribute <span class="token operator">=</span> <span class="token string">&quot;order&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">int</span> <span class="token function">order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span>annotation <span class="token operator">=</span> <span class="token class-name">RequestField</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> attribute <span class="token operator">=</span> <span class="token string">&quot;desc&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span> <span class="token function">desc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

    <span class="token comment">// 也可以自己扩展注解的属性</span>
    <span class="token class-name">String</span> <span class="token function">pattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;yyMMddHHmmss&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="提供一个转换器-1" tabindex="-1"><a class="header-anchor" href="#提供一个转换器-1"><span>提供一个转换器</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 自定义的转换器 [不需要] 手动实例化, [也不需要] 注册到 \`Jt808FieldDeserializerRegistry\` 中</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyExtendedJt808FieldDeserializerBcdTime</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractExtendedJt808FieldDeserializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">BcdFieldDeserializer</span> delegate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BcdFieldDeserializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token class-name">ByteBuf</span> byteBuf<span class="token punctuation">,</span> <span class="token class-name">MsgDataType</span> msgDataType<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">,</span> <span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> targetClass <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">fieldMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFieldType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">String</span> bcd <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>delegate<span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span>byteBuf<span class="token punctuation">,</span> msgDataType<span class="token punctuation">,</span> start<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">BcdDateTime</span> annotation <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">fieldMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">BcdDateTime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">String</span> pattern <span class="token operator">=</span> annotation<span class="token punctuation">.</span><span class="token function">pattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>bcd<span class="token punctuation">,</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Date</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>bcd<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ParseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Jt808FieldSerializerException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> bcd<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Jt808AnnotationArgumentResolveException</span><span class="token punctuation">(</span><span class="token string">&quot;Cannot convert DataType from &quot;</span> <span class="token operator">+</span> msgDataType <span class="token operator">+</span> <span class="token string">&quot; to &quot;</span> <span class="token operator">+</span> targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用自定义注解-1" tabindex="-1"><a class="header-anchor" href="#使用自定义注解-1"><span>使用自定义注解</span></a></h3><p>现在可以通过自定义注解将 <code>BCD</code> 转换为 <code>LocalDateTime</code>、 <code>Date</code> 或 <code>String</code> 了：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Jt808RequestBody</span>
<span class="token annotation punctuation">@BuiltinComponent</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BuiltinMsg0200V2013Alias</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>

    <span class="token comment">// (8). byte[22,28) BCD[6] 时间</span>
    <span class="token annotation punctuation">@BcdDateTime</span><span class="token punctuation">(</span>order <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">,</span> pattern <span class="token operator">=</span> <span class="token string">&quot;yyMMddHHmmss&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> time<span class="token punctuation">;</span>
    <span class="token comment">// private Date time;</span>
    <span class="token comment">// private String time;</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>实际上这里演示的这个注解已经在 <strong>2.1.1</strong> 中内置了, 全类名是 <code>@io.github.hylexus.jt.jt808.support.annotation.msg.req.RequestFieldAlias.BcdDateTime</code>。</p></div><h2 id="其他说明" tabindex="-1"><a class="header-anchor" href="#其他说明"><span>其他说明</span></a></h2><ul><li>内置的给 <code>@RequestField</code> 提供的别名都在 <code>@RequestFieldAlias</code> 中</li><li>要扩展 <code>@ResponseField</code> 也是同样的道理，可以参考 <code>@ResponseFieldAlias</code> 中内置的一堆别名</li><li>要扩展一种不支持的数据类型, 比如 <code>LWORD</code>(<code>Long Word</code>, <code>unsigned 64 bit</code>), 也可以通过注解别名实现</li></ul>`,29);function v(a,b){return e(),p("div",null,[l,i,u,d,n("p",k,[n("img",{src:a.$withBase("/img/v2/annotation-driven-dev/custom-annotation.png")},null,8,r)]),m])}const h=t(c,[["render",v],["__file","custom-annotation.html.vue"]]),w=JSON.parse('{"path":"/v2/jt-808/guide/annotation-based-dev/custom-annotation.html","title":"自定义注解(v2.1.1)","lang":"zh-CN","frontmatter":{"icon":"customize","description":"自定义注解(v2.1.1) 请先读我 这里说的自定义注解是通过 v2.1.1 中引入的注解别名机制来扩展的自定义注解。 下面就以位置上报报文中的经纬度字段和时间字段为例，演示如何扩展自己的注解。 示例1(GeoPoint) 目的 这里的经纬度其实就是将 4 字节的 DWORD 转为数字(Long)，然后再除以 106。 但是内置的转换器实际上不支持从 ...","head":[["meta",{"property":"og:url","content":"https://github.com/hylexus/jt-framework/jt-framework/v2/jt-808/guide/annotation-based-dev/custom-annotation.html"}],["meta",{"property":"og:site_name","content":"jt-framework"}],["meta",{"property":"og:title","content":"自定义注解(v2.1.1)"}],["meta",{"property":"og:description","content":"自定义注解(v2.1.1) 请先读我 这里说的自定义注解是通过 v2.1.1 中引入的注解别名机制来扩展的自定义注解。 下面就以位置上报报文中的经纬度字段和时间字段为例，演示如何扩展自己的注解。 示例1(GeoPoint) 目的 这里的经纬度其实就是将 4 字节的 DWORD 转为数字(Long)，然后再除以 106。 但是内置的转换器实际上不支持从 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-06T15:49:53.000Z"}],["meta",{"property":"article:author","content":"hylexus"}],["meta",{"property":"article:modified_time","content":"2023-05-06T15:49:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"自定义注解(v2.1.1)\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-06T15:49:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"hylexus\\",\\"url\\":\\"https://github.com/hylexus\\"}]}"]]},"headers":[{"level":2,"title":"请先读我","slug":"请先读我","link":"#请先读我","children":[]},{"level":2,"title":"示例1(GeoPoint)","slug":"示例1-geopoint","link":"#示例1-geopoint","children":[{"level":3,"title":"目的","slug":"目的","link":"#目的","children":[]},{"level":3,"title":"定义自己的注解","slug":"定义自己的注解","link":"#定义自己的注解","children":[]},{"level":3,"title":"提供一个转换器","slug":"提供一个转换器","link":"#提供一个转换器","children":[]},{"level":3,"title":"使用自定义注解","slug":"使用自定义注解","link":"#使用自定义注解","children":[]}]},{"level":2,"title":"示例2(BcdDateTime)","slug":"示例2-bcddatetime","link":"#示例2-bcddatetime","children":[{"level":3,"title":"目的","slug":"目的-1","link":"#目的-1","children":[]},{"level":3,"title":"定义自己的注解","slug":"定义自己的注解-1","link":"#定义自己的注解-1","children":[]},{"level":3,"title":"提供一个转换器","slug":"提供一个转换器-1","link":"#提供一个转换器-1","children":[]},{"level":3,"title":"使用自定义注解","slug":"使用自定义注解-1","link":"#使用自定义注解-1","children":[]}]},{"level":2,"title":"其他说明","slug":"其他说明","link":"#其他说明","children":[]}],"git":{"createdTime":1683388193000,"updatedTime":1683388193000,"contributors":[{"name":"hylexus","email":"hylexus@163.com","commits":1}]},"readingTime":{"minutes":3.2,"words":961},"filePathRelative":"v2/jt-808/guide/annotation-based-dev/custom-annotation.md","localizedDate":"2023年5月6日","autoDesc":true,"excerpt":"\\n<h2>请先读我</h2>\\n<p>这里说的自定义注解是通过 <strong>v2.1.1</strong> 中引入的注解别名机制来扩展的自定义注解。</p>\\n<p>下面就以位置上报报文中的经纬度字段和时间字段为例，演示如何扩展自己的注解。</p>\\n<p class=\\"\\">\\n    \\n</p> \\n<h2>示例1(GeoPoint)</h2>\\n<h3>目的</h3>\\n<p>这里的经纬度其实就是将 <strong>4</strong> 字节的 <code>DWORD</code> 转为数字(<code>Long</code>)，然后再除以 10<sup>6</sup>。</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code>\\n<span class=\\"token annotation punctuation\\">@Data</span>\\n<span class=\\"token annotation punctuation\\">@Jt808RequestBody</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">BuiltinMsg0200V2013Alias</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// ...</span>\\n\\n    <span class=\\"token comment\\">// (3). byte[8,12) DWORD 纬度</span>\\n    <span class=\\"token annotation punctuation\\">@RequestFieldAlias.Dword</span><span class=\\"token punctuation\\">(</span>order <span class=\\"token operator\\">=</span> <span class=\\"token number\\">3</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">long</span> lat<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// (4). byte[12,16) DWORD 经度</span>\\n    <span class=\\"token annotation punctuation\\">@RequestFieldAlias.Dword</span><span class=\\"token punctuation\\">(</span>order <span class=\\"token operator\\">=</span> <span class=\\"token number\\">4</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">long</span> lng<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// ...</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>"}');export{h as comp,w as data};
