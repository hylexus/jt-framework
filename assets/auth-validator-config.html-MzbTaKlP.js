import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o,c,b as n,d as a,e as i,a as p}from"./app-BEQS3wW-.js";const l={},u=p(`<h1 id="authvalidator" tabindex="-1"><a class="header-anchor" href="#authvalidator"><span>AuthValidator</span></a></h1><div class="hint-container caution"><p class="hint-container-title">注意</p><ul><li>该组件 <code>当且仅当</code> 你使用了内置的 <code>AuthMsgHandler</code> 来处理 <code>鉴权消息</code> 时才有效。</li><li>如果你覆盖了/未启用内置的 <code>AuthMsgHandler</code>，那么你也 <code>不用</code> 提供 <code>AuthCodeValidator</code>。因为此时的鉴权逻辑已经完全交由你自定的 <code>AuthMsgHandler</code> 来处理了。</li><li>比较鸡肋的一个内置组件，不过用来 <code>Quick-Start</code> 还是很方便的🤣。</li></ul></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Jt808Config</span> <span class="token keyword">extends</span> <span class="token class-name">Jt808ServerConfigurationSupport</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">AuthCodeValidator</span> <span class="token function">supplyAuthCodeValidator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>session<span class="token punctuation">,</span> requestMsgMetadata<span class="token punctuation">,</span> authRequestMsgBody<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">final</span> <span class="token class-name">String</span> terminalId <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getTerminalId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">final</span> <span class="token class-name">String</span> authCode <span class="token operator">=</span> authRequestMsgBody<span class="token punctuation">.</span><span class="token function">getAuthCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 从其他服务验证鉴权码是否正确</span>
            <span class="token keyword">boolean</span> success <span class="token operator">=</span> clientService<span class="token punctuation">.</span><span class="token function">isAuthCodeValid</span><span class="token punctuation">(</span>terminalId<span class="token punctuation">,</span> authCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;AuthCode validate for terminal : {} with authCode : {}, result: {}&quot;</span><span class="token punctuation">,</span> terminalId<span class="token punctuation">,</span> authCode<span class="token punctuation">,</span> success<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> success<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),r={class:"hint-container tip"},d=n("p",{class:"hint-container-title"},"传送门",-1),h={href:"https://github.com/hylexus/jt-framework/tree/master/samples/jt-808-server-sample-customized",target:"_blank",rel:"noopener noreferrer"};function m(k,v){const t=e("ExternalLinkIcon");return o(),c("div",null,[u,n("div",r,[d,n("p",null,[a("本小节的示例可以在 "),n("a",h,[a("samples/jt-808-server-sample-customized"),i(t)]),a(" 下找到对应代码。")])])])}const y=s(l,[["render",m],["__file","auth-validator-config.html.vue"]]),A=JSON.parse('{"path":"/v1/jt-808/guide/customization/auth-validator-config.html","title":"AuthValidator","lang":"zh-CN","frontmatter":{"description":"AuthValidator 注意 该组件 当且仅当 你使用了内置的 AuthMsgHandler 来处理 鉴权消息 时才有效。 如果你覆盖了/未启用内置的 AuthMsgHandler，那么你也 不用 提供 AuthCodeValidator。因为此时的鉴权逻辑已经完全交由你自定的 AuthMsgHandler 来处理了。 比较鸡肋的一个内置组件，不过...","head":[["meta",{"property":"og:url","content":"https://github.com/hylexus/jt-framework/jt-framework/v1/jt-808/guide/customization/auth-validator-config.html"}],["meta",{"property":"og:site_name","content":"jt-framework"}],["meta",{"property":"og:title","content":"AuthValidator"}],["meta",{"property":"og:description","content":"AuthValidator 注意 该组件 当且仅当 你使用了内置的 AuthMsgHandler 来处理 鉴权消息 时才有效。 如果你覆盖了/未启用内置的 AuthMsgHandler，那么你也 不用 提供 AuthCodeValidator。因为此时的鉴权逻辑已经完全交由你自定的 AuthMsgHandler 来处理了。 比较鸡肋的一个内置组件，不过..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-12-23T16:14:45.000Z"}],["meta",{"property":"article:author","content":"hylexus"}],["meta",{"property":"article:modified_time","content":"2022-12-23T16:14:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"AuthValidator\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-12-23T16:14:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"hylexus\\",\\"url\\":\\"https://github.com/hylexus\\"}]}"]]},"headers":[],"git":{"createdTime":1671812085000,"updatedTime":1671812085000,"contributors":[{"name":"hylexus","email":"hylexus@163.com","commits":1}]},"readingTime":{"minutes":0.63,"words":188},"filePathRelative":"v1/jt-808/guide/customization/auth-validator-config.md","localizedDate":"2022年12月24日","autoDesc":true,"excerpt":"\\n<div class=\\"hint-container caution\\">\\n<p class=\\"hint-container-title\\">注意</p>\\n<ul>\\n<li>该组件 <code>当且仅当</code> 你使用了内置的 <code>AuthMsgHandler</code> 来处理 <code>鉴权消息</code> 时才有效。</li>\\n<li>如果你覆盖了/未启用内置的 <code>AuthMsgHandler</code>，那么你也 <code>不用</code> 提供 <code>AuthCodeValidator</code>。因为此时的鉴权逻辑已经完全交由你自定的 <code>AuthMsgHandler</code> 来处理了。</li>\\n<li>比较鸡肋的一个内置组件，不过用来 <code>Quick-Start</code> 还是很方便的🤣。</li>\\n</ul>\\n</div>"}');export{y as comp,A as data};
