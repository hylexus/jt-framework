import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o as e,c as p,b as n,d as o,e as c,a as i}from"./app-BEQS3wW-.js";const l={},u=n("h1",{id:"消息加密-v2-1-4",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#消息加密-v2-1-4"},[n("span",null,"消息加密(v2.1.4)")])],-1),r=n("h2",{id:"相关资料",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#相关资料"},[n("span",null,"相关资料")])],-1),d={href:"https://github.com/hylexus/jt-framework/issues/82",target:"_blank",rel:"noopener noreferrer"},k=i(`<h2 id="加密方式的判断" tabindex="-1"><a class="header-anchor" href="#加密方式的判断"><span>加密方式的判断</span></a></h2><p>收到消息，解析之后，消息体<strong>可能</strong>是密文。具体通过消息头中的消息体属性字段判断。</p><p>消息体属性格式如下：</p><ul><li>v2011/v2013</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>消息体属性 word(16)
    bit[0-10)	消息体长度
    bit[10-13)	数据加密方式
                    此三位都为 0,表示消息体不加密
                    第 10 位为 1,表示消息体经过 RSA 算法加密
                    其它保留
    bit[13]		分包
                    1: 消息体卫长消息,进行分包发送处理,具体分包信息由消息包封装项决定
                    0: 则消息头中无消息包封装项字段
    bit[14-15]	保留
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>v2019</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>消息体属性 word(16)
    bit[0-10)	消息体长度
    bit[10-13)	数据加密方式
                    此三位都为 0,表示消息体不加密
                    第 10 位为 1,表示消息体经过 RSA 算法加密
                    其它保留
    bit[13]		分包
                    1: 消息体卫长消息,进行分包发送处理,具体分包信息由消息包封装项决定
                    0: 则消息头中无消息包封装项字段
    bit[14]	    版本标识
    bit[15]	保留
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>尽管消息体属性有所不同，但是其中的 <code>数据加密方式位</code> 都是相同的：消息体属性中的 <code>bit10</code>, <code>bit11</code> 和 <code>bit12</code> 三个位。</p><p>这三个二进制位具体含义，应该和具体的硬件实现相关。</p><h2 id="加密-解密报文" tabindex="-1"><a class="header-anchor" href="#加密-解密报文"><span>加密/解密报文</span></a></h2><p>可以通过自定义 <code>Jt808MsgEncryptionHandler</code> 实现报文的加密/解密。也就是给 <strong>spring</strong> 容器中加入一个 <code>Jt808MsgEncryptionHandler</code> 实现类即可。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Jt808MsgEncryptionHandlerDemo01</span> <span class="token keyword">implements</span> <span class="token class-name">Jt808MsgEncryptionHandler</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">ByteBuf</span> <span class="token function">decryptRequestBody</span><span class="token punctuation">(</span><span class="token class-name">Jt808RequestHeader</span> header<span class="token punctuation">,</span> <span class="token class-name">ByteBuf</span> body<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token keyword">int</span> encryptionType <span class="token operator">=</span> header<span class="token punctuation">.</span><span class="token function">msgBodyProps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encryptionType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>encryptionType <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> body<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// @see https://github.com/hylexus/jt-framework/issues/82</span>
        <span class="token comment">// 消息属性中的 第10位，11位，12位 为 010 时，表示消息体经过SM4算法加密</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>encryptionType <span class="token operator">==</span> <span class="token number">0b010</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token class-name">JtCryptoUtil</span><span class="token punctuation">.</span><span class="token constant">SM4</span><span class="token punctuation">.</span><span class="token function">ecbDecrypt</span><span class="token punctuation">(</span><span class="token function">getSecretKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                <span class="token class-name">JtProtocolUtils</span><span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NotImplementedException</span><span class="token punctuation">(</span><span class="token string">&quot;不支持的加密类型: 0b&quot;</span> <span class="token operator">+</span> <span class="token class-name">FormatUtils</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>encryptionType<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">ByteBuf</span> <span class="token function">encryptResponseBody</span><span class="token punctuation">(</span><span class="token class-name">Jt808Response</span> response<span class="token punctuation">,</span> <span class="token class-name">ByteBuf</span> plaintextBody<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// response.encryptionType(010);</span>
        <span class="token keyword">final</span> <span class="token keyword">int</span> encryptionType <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">encryptionType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>encryptionType <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> plaintextBody<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// @see https://github.com/hylexus/jt-framework/issues/82</span>
        <span class="token comment">// 消息属性中的 第10位，11位，12位 为 010 时，表示消息体经过SM4算法加密</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>encryptionType <span class="token operator">==</span> <span class="token number">0b010</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token class-name">JtCryptoUtil</span><span class="token punctuation">.</span><span class="token constant">SM4</span><span class="token punctuation">.</span><span class="token function">ecbEncrypt</span><span class="token punctuation">(</span><span class="token function">getSecretKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plaintextBody<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                <span class="token class-name">JtProtocolUtils</span><span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>plaintextBody<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NotImplementedException</span><span class="token punctuation">(</span><span class="token string">&quot;不支持的加密类型: 0b&quot;</span> <span class="token operator">+</span> <span class="token class-name">FormatUtils</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>encryptionType<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getSecretKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 从其他配置中获取密钥</span>
        <span class="token keyword">return</span> <span class="token class-name">HexStringUtils</span><span class="token punctuation">.</span><span class="token function">hexString2Bytes</span><span class="token punctuation">(</span><span class="token string">&quot;8e47374be6b8d114cb47be6a9a128a37&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12);function v(m,b){const s=t("ExternalLinkIcon");return e(),p("div",null,[u,r,n("ul",null,[n("li",null,[n("a",d,[o("#issues-82"),c(s)])])]),k])}const g=a(l,[["render",v],["__file","msg-encryption.html.vue"]]),f=JSON.parse('{"path":"/v2/jt-808/guide/customization/msg-encryption.html","title":"消息加密(v2.1.4)","lang":"zh-CN","frontmatter":{"icon":"lock","description":"消息加密(v2.1.4) 相关资料 #issues-82 加密方式的判断 收到消息，解析之后，消息体可能是密文。具体通过消息头中的消息体属性字段判断。 消息体属性格式如下： v2011/v2013 v2019 尽管消息体属性有所不同，但是其中的 数据加密方式位 都是相同的：消息体属性中的 bit10, bit11 和 bit12 三个位。 这三个二进制...","head":[["meta",{"property":"og:url","content":"https://github.com/hylexus/jt-framework/jt-framework/v2/jt-808/guide/customization/msg-encryption.html"}],["meta",{"property":"og:site_name","content":"jt-framework"}],["meta",{"property":"og:title","content":"消息加密(v2.1.4)"}],["meta",{"property":"og:description","content":"消息加密(v2.1.4) 相关资料 #issues-82 加密方式的判断 收到消息，解析之后，消息体可能是密文。具体通过消息头中的消息体属性字段判断。 消息体属性格式如下： v2011/v2013 v2019 尽管消息体属性有所不同，但是其中的 数据加密方式位 都是相同的：消息体属性中的 bit10, bit11 和 bit12 三个位。 这三个二进制..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-08T08:39:44.000Z"}],["meta",{"property":"article:author","content":"hylexus"}],["meta",{"property":"article:modified_time","content":"2024-06-08T08:39:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"消息加密(v2.1.4)\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-08T08:39:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"hylexus\\",\\"url\\":\\"https://github.com/hylexus\\"}]}"]]},"headers":[{"level":2,"title":"相关资料","slug":"相关资料","link":"#相关资料","children":[]},{"level":2,"title":"加密方式的判断","slug":"加密方式的判断","link":"#加密方式的判断","children":[]},{"level":2,"title":"加密/解密报文","slug":"加密-解密报文","link":"#加密-解密报文","children":[]}],"git":{"createdTime":1717835984000,"updatedTime":1717835984000,"contributors":[{"name":"hylexus","email":"hylexus@163.com","commits":1}]},"readingTime":{"minutes":1.97,"words":591},"filePathRelative":"v2/jt-808/guide/customization/msg-encryption.md","localizedDate":"2024年6月8日","autoDesc":true,"excerpt":"\\n<h2>相关资料</h2>\\n<ul>\\n<li><a href=\\"https://github.com/hylexus/jt-framework/issues/82\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">#issues-82</a></li>\\n</ul>\\n<h2>加密方式的判断</h2>\\n<p>收到消息，解析之后，消息体<strong>可能</strong>是密文。具体通过消息头中的消息体属性字段判断。</p>\\n<p>消息体属性格式如下：</p>\\n<ul>\\n<li>v2011/v2013</li>\\n</ul>\\n<div class=\\"language-text\\" data-ext=\\"text\\" data-title=\\"text\\"><pre class=\\"language-text\\"><code>消息体属性 word(16)\\n    bit[0-10)\\t消息体长度\\n    bit[10-13)\\t数据加密方式\\n                    此三位都为 0,表示消息体不加密\\n                    第 10 位为 1,表示消息体经过 RSA 算法加密\\n                    其它保留\\n    bit[13]\\t\\t分包\\n                    1: 消息体卫长消息,进行分包发送处理,具体分包信息由消息包封装项决定\\n                    0: 则消息头中无消息包封装项字段\\n    bit[14-15]\\t保留\\n</code></pre></div>"}');export{g as comp,f as data};
