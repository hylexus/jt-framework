import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as p,b as s,a}from"./app-BEQS3wW-.js";const o={},c=a(`<h1 id="请求消息分包" tabindex="-1"><a class="header-anchor" href="#请求消息分包"><span>请求消息分包</span></a></h1><h2 id="分包合并" tabindex="-1"><a class="header-anchor" href="#分包合并"><span>分包合并</span></a></h2><p>收到终端上报的分包请求时，会先将分包消息 <strong>暂存</strong> 到 <strong>分包暂存器(Jt808RequestSubPackageStorage)</strong>;等所有子包都到达后会自动合并消息，投递给消息处理器处理。</p><h3 id="分包暂存器" tabindex="-1"><a class="header-anchor" href="#分包暂存器"><span>分包暂存器</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 遇到分包请求时会回调 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">saveSubPackage</span><span class="token punctuation">(</span><span class="token class-name">Jt808Request</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> 将分包暂存起来。
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
 * 实现类至少应该实现下面几个功能:
 *
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">&gt;</span></span>
 *     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>当所有子包都到达后，实现类应该负责将消息合并 &amp;&amp; 将合并后的完整消息使用 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Jt808RequestMsgDispatcher</span><span class="token punctuation">#</span><span class="token function">doDispatch</span><span class="token punctuation">(</span><span class="token class-name">Jt808Request</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> 投递出去<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
 *     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>某些子包丢失未到达时应该自动发送 \`0x8003\` 消息给终端，要求终端重传某些子包<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
 *     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>长时间未到达服务端的子包应该及时回收掉, 最长暂存多久由具体实现类自行决定<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">&gt;</span></span>
 *
 * <span class="token keyword">@author</span> hylexus
 * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">Jt808RequestMsgDispatcher</span><span class="token punctuation">#</span><span class="token function">doDispatch</span><span class="token punctuation">(</span><span class="token class-name">Jt808Request</span><span class="token punctuation">)</span></span>
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Jt808RequestSubPackageStorage</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 分包请求到达时回调该方法，暂存分包请求。
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * 如有必要，实现类应该自行回收掉 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Jt808Request</span><span class="token punctuation">#</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> 和 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Jt808Request</span><span class="token punctuation">#</span><span class="token function">rawByteBuf</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
     *
     * <span class="token keyword">@param</span> <span class="token parameter">subPackage</span> 分包请求
     */</span>
    <span class="token keyword">void</span> <span class="token function">saveSubPackage</span><span class="token punctuation">(</span><span class="token class-name">Jt808Request</span> subPackage<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="内置分包暂存器" tabindex="-1"><a class="header-anchor" href="#内置分包暂存器"><span>内置分包暂存器</span></a></h3><div class="hint-container caution"><p class="hint-container-title">警告</p><p>如果配置了 <code>jt808.request-sub-package-storage.type = none</code>，也就意味着所有的分包请求都会被<strong>丢弃</strong>!!!</p></div><div class="hint-container caution"><p class="hint-container-title">警告</p><p>如果配置了 <code>jt808.request-sub-package-storage.type = none</code>，也就意味着所有的分包请求都会被<strong>丢弃</strong>!!!</p></div><div class="hint-container caution"><p class="hint-container-title">警告</p><p>如果配置了 <code>jt808.request-sub-package-storage.type = none</code>，也就意味着所有的分包请求都会被<strong>丢弃</strong>!!!</p></div><ul><li><code>CaffeineJt808RequestSubPackageStorage</code><ul><li>基于 <code>caffeine</code> 的请求消息分包暂存器</li><li>当 <code>jt808.request-sub-package-storage.type = caffeine</code> 时启用</li></ul></li><li><code>Jt808RequestSubPackageStorage.NO_OPS</code><ul><li>空的实现(忽略所有分包请求)</li><li>当 <code>jt808.request-sub-package-storage.type = none</code> 时启用</li></ul></li></ul><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><p>下面以终端注册消息(<code>0x0001</code>) 为例来观察一下分包的过程。</p><div class="hint-container tip"><p class="hint-container-title">暂时调整日志级别以便观察分包请求处理</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">logging</span><span class="token punctuation">:</span>
  <span class="token key atrule">level.root</span><span class="token punctuation">:</span> info
  <span class="token comment"># 将默认解码器的日志级别调整到debug 来观察请求分包消息</span>
  <span class="token key atrule">level.jt-808.request.decoder</span><span class="token punctuation">:</span> debug
  <span class="token comment"># 将请求分包暂存器(默认为基于Caffeine的实现)的日志级别调整的debug 来观察分包请求的处理过程</span>
  <span class="token key atrule">level.io.github.hylexus.jt.jt808.support.codec.impl.CaffeineJt808RequestSubPackageStorage</span><span class="token punctuation">:</span> debug
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>发送下面三条分包报文：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>7E010060240100000000013912344329000000030001000B00026964393837363534333231747970653030313233343536373831323334353637277E
7E010060240100000000013912344329000100030002383837363534333231494430303030313233343536373831323334353637383837363534357E
7E0100600E010000000001391234432900020003000333323101B8CA4A2D313233343539347E
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>发送三条报文之后，可以观察到类似如下日志：</p>`,16),l={class:""},i=["src"],r=a(`<p>上面日志解释如下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 0x0001 的第1个子包(-: 转义之前; +: 转义之后)</span>
- <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin class-name">:</span> 7E010060240100000000013912344329000000030001000B00026964393837363534333231747970653030313233343536373831323334353637277E
+ <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin class-name">:</span> 7E010060240100000000013912344329000000030001000B00026964393837363534333231747970653030313233343536373831323334353637277E
+ <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span>0x0100--60<span class="token punctuation">)</span> <span class="token number">1</span>/3: 7E010060240100000000013912344329000000030001000B00026964393837363534333231747970653030313233343536373831323334353637277E
<span class="token comment"># 0x0001 的第2个子包(-: 转义之前; +: 转义之后)</span>
- <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin class-name">:</span> 7E010060240100000000013912344329000100030002383837363534333231494430303030313233343536373831323334353637383837363534357E
+ <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin class-name">:</span> 7E010060240100000000013912344329000100030002383837363534333231494430303030313233343536373831323334353637383837363534357E
+ <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span>0x0100--60<span class="token punctuation">)</span> <span class="token number">2</span>/3: 7E010060240100000000013912344329000100030002383837363534333231494430303030313233343536373831323334353637383837363534357E
<span class="token comment"># 0x0001 的第3个子包(-: 转义之前; +: 转义之后)</span>
- <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin class-name">:</span> 7E0100600E010000000001391234432900020003000333323101B8CA4A2D313233343539347E
- + <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin class-name">:</span> 7E0100600E010000000001391234432900020003000333323101B8CA4A2D313233343539347E
+ <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span>0x0100--38<span class="token punctuation">)</span> <span class="token number">3</span>/3: 7E0100600E010000000001391234432900020003000333323101B8CA4A2D313233343539347E
<span class="token comment"># 分包暂存器发现所有子包都到达了 --&gt; 合并消息重新投递出去待处理器处理</span>
DEBUG i.g.h.j.j.s.c.i.CaffeineJt808RequestSubPackageStorage - Redispatch mergedRequest <span class="token builtin class-name">:</span> DefaultJt808Request<span class="token punctuation">{</span>msgType<span class="token operator">=</span>BuiltInMsgType<span class="token punctuation">{</span>msgId<span class="token operator">=</span><span class="token number">256</span><span class="token punctuation">(</span>0x0100<span class="token punctuation">)</span>, <span class="token assign-left variable">desc</span><span class="token operator">=</span><span class="token string">&#39;终端注册&#39;</span><span class="token punctuation">}</span>, <span class="token assign-left variable">header</span><span class="token operator">=</span>HeaderSpec<span class="token punctuation">{</span>version<span class="token operator">=</span>VERSION_2019, <span class="token assign-left variable">terminalId</span><span class="token operator">=</span><span class="token string">&#39;00000000013912344329&#39;</span>, <span class="token assign-left variable">msgId</span><span class="token operator">=</span><span class="token number">256</span>, <span class="token assign-left variable">flowId</span><span class="token operator">=</span><span class="token number">2</span>, <span class="token assign-left variable">msgBodyProps</span><span class="token operator">=</span>MsgBodyProps<span class="token punctuation">{</span>intValue<span class="token operator">=</span><span class="token number">16470</span>, <span class="token assign-left variable">msgBodyLength</span><span class="token operator">=</span><span class="token number">86</span>, <span class="token assign-left variable">hasSubPackage</span><span class="token operator">=</span>false, <span class="token assign-left variable">encryptionType</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span>, <span class="token assign-left variable">checkSum</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="分包补传" tabindex="-1"><a class="header-anchor" href="#分包补传"><span>分包补传</span></a></h2><p>这里的分包补传指的是 <code>0x8003</code> 消息。</p><p>内置的分包请求暂存器目前就只有一种基于 <code>Caffeine</code> 的实现 : <code>CaffeineJt808RequestSubPackageStorage</code>。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>暂时没想到一种比较优雅的、自动化的、可扩展的服务端分包补传处理流程。</p><p>所以服务端分包补传消息暂时不支持，后续版本升级会实现。</p><p>也就是说，<strong>2.0.0</strong> 版本不支持自动化的 <code>0x8003</code> 消息处理。</p><p>你可以自定义 <code>Jt808RequestSubPackageStorage</code> 的实现类来实现这个功能。</p></div>`,6);function u(n,k){return e(),p("div",null,[c,s("p",l,[s("img",{src:n.$withBase("/img/v2/basic/Jt808RequestBody-sub-package.png.png")},null,8,i)]),r])}const m=t(o,[["render",u],["__file","request-sub-package.html.vue"]]),v=JSON.parse('{"path":"/v2/jt-808/guide/basic/request-sub-package.html","title":"请求消息分包","lang":"zh-CN","frontmatter":{"icon":"object","description":"请求消息分包 分包合并 收到终端上报的分包请求时，会先将分包消息 暂存 到 分包暂存器(Jt808RequestSubPackageStorage);等所有子包都到达后会自动合并消息，投递给消息处理器处理。 分包暂存器 内置分包暂存器 警告 如果配置了 jt808.request-sub-package-storage.type = none，也就意味...","head":[["meta",{"property":"og:url","content":"https://github.com/hylexus/jt-framework/jt-framework/v2/jt-808/guide/basic/request-sub-package.html"}],["meta",{"property":"og:site_name","content":"jt-framework"}],["meta",{"property":"og:title","content":"请求消息分包"}],["meta",{"property":"og:description","content":"请求消息分包 分包合并 收到终端上报的分包请求时，会先将分包消息 暂存 到 分包暂存器(Jt808RequestSubPackageStorage);等所有子包都到达后会自动合并消息，投递给消息处理器处理。 分包暂存器 内置分包暂存器 警告 如果配置了 jt808.request-sub-package-storage.type = none，也就意味..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-12-23T16:14:45.000Z"}],["meta",{"property":"article:author","content":"hylexus"}],["meta",{"property":"article:modified_time","content":"2022-12-23T16:14:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"请求消息分包\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-12-23T16:14:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"hylexus\\",\\"url\\":\\"https://github.com/hylexus\\"}]}"]]},"headers":[{"level":2,"title":"分包合并","slug":"分包合并","link":"#分包合并","children":[{"level":3,"title":"分包暂存器","slug":"分包暂存器","link":"#分包暂存器","children":[]},{"level":3,"title":"内置分包暂存器","slug":"内置分包暂存器","link":"#内置分包暂存器","children":[]},{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]}]},{"level":2,"title":"分包补传","slug":"分包补传","link":"#分包补传","children":[]}],"git":{"createdTime":1671812085000,"updatedTime":1671812085000,"contributors":[{"name":"hylexus","email":"hylexus@163.com","commits":1}]},"readingTime":{"minutes":2.84,"words":853},"filePathRelative":"v2/jt-808/guide/basic/request-sub-package.md","localizedDate":"2022年12月24日","autoDesc":true,"excerpt":"\\n<h2>分包合并</h2>\\n<p>收到终端上报的分包请求时，会先将分包消息 <strong>暂存</strong> 到 <strong>分包暂存器(Jt808RequestSubPackageStorage)</strong>;等所有子包都到达后会自动合并消息，投递给消息处理器处理。</p>\\n<h3>分包暂存器</h3>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token doc-comment comment\\">/**\\n * 遇到分包请求时会回调 <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span> <span class=\\"token reference\\"><span class=\\"token punctuation\\">#</span><span class=\\"token function\\">saveSubPackage</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Jt808Request</span><span class=\\"token punctuation\\">)</span></span><span class=\\"token punctuation\\">}</span> 将分包暂存起来。\\n * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>\\n * 实现类至少应该实现下面几个功能:\\n *\\n * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>ol</span><span class=\\"token punctuation\\">&gt;</span></span>\\n *     <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>li</span><span class=\\"token punctuation\\">&gt;</span></span>当所有子包都到达后，实现类应该负责将消息合并 &amp;&amp; 将合并后的完整消息使用 <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">Jt808RequestMsgDispatcher</span><span class=\\"token punctuation\\">#</span><span class=\\"token function\\">doDispatch</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Jt808Request</span><span class=\\"token punctuation\\">)</span></span><span class=\\"token punctuation\\">}</span> 投递出去<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>li</span><span class=\\"token punctuation\\">&gt;</span></span>\\n *     <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>li</span><span class=\\"token punctuation\\">&gt;</span></span>某些子包丢失未到达时应该自动发送 `0x8003` 消息给终端，要求终端重传某些子包<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>li</span><span class=\\"token punctuation\\">&gt;</span></span>\\n *     <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>li</span><span class=\\"token punctuation\\">&gt;</span></span>长时间未到达服务端的子包应该及时回收掉, 最长暂存多久由具体实现类自行决定<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>li</span><span class=\\"token punctuation\\">&gt;</span></span>\\n * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>ol</span><span class=\\"token punctuation\\">&gt;</span></span>\\n *\\n * <span class=\\"token keyword\\">@author</span> hylexus\\n * <span class=\\"token keyword\\">@see</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">Jt808RequestMsgDispatcher</span><span class=\\"token punctuation\\">#</span><span class=\\"token function\\">doDispatch</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Jt808Request</span><span class=\\"token punctuation\\">)</span></span>\\n */</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">interface</span> <span class=\\"token class-name\\">Jt808RequestSubPackageStorage</span> <span class=\\"token punctuation\\">{</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * 分包请求到达时回调该方法，暂存分包请求。\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>\\n     * 如有必要，实现类应该自行回收掉 <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">Jt808Request</span><span class=\\"token punctuation\\">#</span><span class=\\"token function\\">body</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span></span><span class=\\"token punctuation\\">}</span> 和 <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">Jt808Request</span><span class=\\"token punctuation\\">#</span><span class=\\"token function\\">rawByteBuf</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span></span><span class=\\"token punctuation\\">}</span>\\n     *\\n     * <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">subPackage</span> 分包请求\\n     */</span>\\n    <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">saveSubPackage</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Jt808Request</span> subPackage<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>"}');export{m as comp,v as data};
