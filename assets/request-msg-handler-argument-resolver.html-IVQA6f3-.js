import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as p,b as n,a as s}from"./app-BEQS3wW-.js";const o={},c=s(`<h1 id="请求参数解析器" tabindex="-1"><a class="header-anchor" href="#请求参数解析器"><span>请求参数解析器</span></a></h1><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>这部分也是借鉴(抄袭) <code>Spring</code> 的。</p><p>上一小节介绍了怎么接收请求，但是接收到的都是 <code>Jt808Request</code> 类型。</p><p>就类似于 <code>JavaWeb</code> 开发中的 <code>Servlet</code> 一样给你一个 <code>HttpServletRequest</code> : 后续所有解析操作都要手动进行，比较繁琐。</p><p>所以本项目也提供了几个内置的 <code>Jt808HandlerMethodArgumentResolver</code> 来将原始的 <code>Jt808Request</code><br> 转换成可读性较强的自定义类型，这些转换功能都是依赖于参数解析器 <code>Jt808HandlerMethodArgumentResolver</code>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Jt808HandlerMethodArgumentResolver</span> <span class="token punctuation">{</span>

    <span class="token keyword">boolean</span> <span class="token function">supportsParameter</span><span class="token punctuation">(</span><span class="token class-name">MethodParameter</span> methodParameter<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Object</span> <span class="token function">resolveArgument</span><span class="token punctuation">(</span><span class="token class-name">MethodParameter</span> methodParameter<span class="token punctuation">,</span> <span class="token class-name">ArgumentContext</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Jt808ArgumentResolveException</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="支持的参数类型" tabindex="-1"><a class="header-anchor" href="#支持的参数类型"><span>支持的参数类型</span></a></h2><p>内置的几种 <strong>参数解析器</strong> 如下：</p>`,9),l={class:"demo"},i=["src"],u=s(`<p>在默认配置的情况下，你可以按需在 <strong>请求处理器方法参数</strong> 中使用如下类型中的若干个：</p><ul><li><code>Jt808Request</code></li><li><code>Jt808RequestHeader</code></li><li><code>Jt808Response</code></li><li><code>Jt808Session</code></li><li><code>Jt808ServerExchange</code></li><li>被<code>@Jt808RequestBody</code>标记的自定义类型</li><li><code>Jt808RequestEntity</code></li></ul><h2 id="jt808request" tabindex="-1"><a class="header-anchor" href="#jt808request"><span>Jt808Request</span></a></h2><p>在处理器方法中注入 <code>Jt808Request</code> 类型参数：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Jt808RequestHandler</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnotationHandler01</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Jt808RequestHandlerMapping</span><span class="token punctuation">(</span>msgType <span class="token operator">=</span> <span class="token number">0x0001</span><span class="token punctuation">,</span> versions <span class="token operator">=</span> <span class="token class-name">Jt808ProtocolVersion</span><span class="token punctuation">.</span><span class="token constant">AUTO_DETECTION</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processMsg0001</span><span class="token punctuation">(</span><span class="token class-name">Jt808Request</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><div class="highlight-line"> </div><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jt808response" tabindex="-1"><a class="header-anchor" href="#jt808response"><span>Jt808Response</span></a></h2><p>在处理器方法中注入 <code>Jt808Response</code> 类型参数：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Jt808RequestHandler</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnotationHandler01</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Jt808RequestHandlerMapping</span><span class="token punctuation">(</span>msgType <span class="token operator">=</span> <span class="token number">0x0100</span><span class="token punctuation">,</span> versions <span class="token operator">=</span> <span class="token class-name">Jt808ProtocolVersion</span><span class="token punctuation">.</span><span class="token constant">VERSION_2013</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Jt808Response</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">Jt808Request</span> request<span class="token punctuation">,</span> <span class="token class-name">Jt808Response</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ... process(request)</span>
        <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">msgId</span><span class="token punctuation">(</span><span class="token class-name">BuiltinJt808MsgType</span><span class="token punctuation">.</span><span class="token constant">SERVER_COMMON_REPLY</span><span class="token punctuation">.</span><span class="token function">getMsgId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">writeWord</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">flowId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">writeByte</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span><span class="token string">&quot;AuthCodeXxx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jt808session" tabindex="-1"><a class="header-anchor" href="#jt808session"><span>Jt808Session</span></a></h2><p>在处理器方法中注入 <code>Jt808Session</code> 类型参数：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Jt808RequestHandler</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnotationHandler01</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Jt808RequestHandlerMapping</span><span class="token punctuation">(</span>msgType <span class="token operator">=</span> <span class="token number">0x0100</span><span class="token punctuation">,</span> versions <span class="token operator">=</span> <span class="token class-name">Jt808ProtocolVersion</span><span class="token punctuation">.</span><span class="token constant">VERSION_2013</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Jt808Response</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">Jt808Session</span> session<span class="token punctuation">,</span> <span class="token class-name">Jt808Response</span> response<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ... process(request)</span>
        <span class="token keyword">return</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jt808serverexchange" tabindex="-1"><a class="header-anchor" href="#jt808serverexchange"><span>Jt808ServerExchange</span></a></h2><p>在处理器方法中注入 <code>Jt808ServerExchange</code> 类型参数：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Jt808RequestHandler</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnotationHandler01</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Jt808RequestHandlerMapping</span><span class="token punctuation">(</span>msgType <span class="token operator">=</span> <span class="token number">0x0100</span><span class="token punctuation">,</span> versions <span class="token operator">=</span> <span class="token class-name">Jt808ProtocolVersion</span><span class="token punctuation">.</span><span class="token constant">VERSION_2013</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Jt808Response</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">Jt808ServerExchange</span> exchange<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ... process(exchange.request())</span>
        <span class="token keyword">return</span> exchange<span class="token punctuation">.</span><span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">msgId</span><span class="token punctuation">(</span><span class="token class-name">BuiltinJt808MsgType</span><span class="token punctuation">.</span><span class="token constant">SERVER_COMMON_REPLY</span><span class="token punctuation">.</span><span class="token function">getMsgId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">writeWord</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">flowId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">writeByte</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span><span class="token string">&quot;AuthCodeXxx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jt808requestheader" tabindex="-1"><a class="header-anchor" href="#jt808requestheader"><span>Jt808RequestHeader</span></a></h2><p>在处理器方法中注入 <code>Jt808ServerExchange</code> 类型参数：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Jt808RequestHandler</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnotationHandler01</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Jt808RequestHandlerMapping</span><span class="token punctuation">(</span>msgType <span class="token operator">=</span> <span class="token number">0x0100</span><span class="token punctuation">,</span> versions <span class="token operator">=</span> <span class="token class-name">Jt808ProtocolVersion</span><span class="token punctuation">.</span><span class="token constant">VERSION_2013</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Jt808Response</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">Jt808RequestHeader</span> header<span class="token punctuation">,</span> <span class="token class-name">Jt808Response</span> response<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ... process(exchange.request())</span>
        <span class="token keyword">return</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><div class="highlight-line"> </div><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jt808requestbody" tabindex="-1"><a class="header-anchor" href="#jt808requestbody"><span>@Jt808RequestBody</span></a></h2><p>下面的 <code>DebugTerminalRegisterMsgV2013</code> 被 <code>@Jt808RequestBody</code> 注解标记了，表示给类用来接收请求体。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Jt808RequestHandler</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnotationHandler01</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Jt808RequestHandlerMapping</span><span class="token punctuation">(</span>msgType <span class="token operator">=</span> <span class="token number">0x0100</span><span class="token punctuation">,</span> versions <span class="token operator">=</span> <span class="token class-name">Jt808ProtocolVersion</span><span class="token punctuation">.</span><span class="token constant">VERSION_2013</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">processRegisterMsgV2013</span><span class="token punctuation">(</span><span class="token class-name">DebugTerminalRegisterMsgV2013</span> authMsgV2013<span class="token punctuation">,</span> <span class="token class-name">Jt808Request</span> request<span class="token punctuation">,</span> <span class="token class-name">Jt808Session</span> session<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> authMsgV2013<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TerminalRegisterReplyRespMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setFlowId</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">flowId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setResult</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setAuthCode</span><span class="token punctuation">(</span><span class="token string">&quot;AuthCode2013DebugDemo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Data</span>
    <span class="token annotation punctuation">@Jt808RequestBody</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DebugTerminalRegisterMsgV2013</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1. [0-2) WORD 省域ID</span>
        <span class="token annotation punctuation">@RequestField</span><span class="token punctuation">(</span>order <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token constant">WORD</span><span class="token punctuation">)</span>
        <span class="token keyword">private</span> <span class="token keyword">int</span> provinceId<span class="token punctuation">;</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jt808requestentity" tabindex="-1"><a class="header-anchor" href="#jt808requestentity"><span>Jt808RequestEntity</span></a></h2><p>该类和 <code>Spring</code> 的 <code>org.springframework.http.RequestEntity</code> 类似。包含了本次请求的所有信息。</p><p>泛型 <code>body</code> 部分的处理逻辑和被 <code>@Jt808RequestBody</code> 标记的类的处理逻辑相同。该类定义如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Jt808RequestEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MsgType</span> msgType<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Jt808RequestHeader</span> header<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ByteBuf</span> rawByteBuf<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">T</span> body<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">byte</span> originalCheckSum<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">byte</span> calculatedCheckSum<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Jt808Session</span> session<span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Jt808RequestHandler</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BuiltinCommonHandler</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Jt808RequestHandlerMapping</span><span class="token punctuation">(</span>msgType <span class="token operator">=</span> <span class="token number">0x0704</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">BuiltinServerCommonReplyMsg</span> <span class="token function">processMsg0704</span><span class="token punctuation">(</span><span class="token class-name">Jt808RequestEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BuiltinMsg0704V2013</span><span class="token punctuation">&gt;</span></span> requestEntity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;BuiltinMsg0704 : {}&quot;</span><span class="token punctuation">,</span> requestEntity<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">BuiltinServerCommonReplyMsg</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>requestEntity<span class="token punctuation">.</span><span class="token function">msgType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMsgId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> requestEntity<span class="token punctuation">.</span><span class="token function">flowId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26);function r(a,d){return t(),p("div",null,[c,n("p",l,[n("img",{src:a.$withBase("/img/v2/design/arg-resolver.png")},null,8,i)]),u])}const m=e(o,[["render",r],["__file","request-msg-handler-argument-resolver.html.vue"]]),b=JSON.parse('{"path":"/v2/jt-808/guide/basic/request-msg-handler-argument-resolver.html","title":"请求参数解析器","lang":"zh-CN","frontmatter":{"icon":"wrap","description":"请求参数解析器 介绍 这部分也是借鉴(抄袭) Spring 的。 上一小节介绍了怎么接收请求，但是接收到的都是 Jt808Request 类型。 就类似于 JavaWeb 开发中的 Servlet 一样给你一个 HttpServletRequest : 后续所有解析操作都要手动进行，比较繁琐。 所以本项目也提供了几个内置的 Jt808HandlerMe...","head":[["meta",{"property":"og:url","content":"https://github.com/hylexus/jt-framework/jt-framework/v2/jt-808/guide/basic/request-msg-handler-argument-resolver.html"}],["meta",{"property":"og:site_name","content":"jt-framework"}],["meta",{"property":"og:title","content":"请求参数解析器"}],["meta",{"property":"og:description","content":"请求参数解析器 介绍 这部分也是借鉴(抄袭) Spring 的。 上一小节介绍了怎么接收请求，但是接收到的都是 Jt808Request 类型。 就类似于 JavaWeb 开发中的 Servlet 一样给你一个 HttpServletRequest : 后续所有解析操作都要手动进行，比较繁琐。 所以本项目也提供了几个内置的 Jt808HandlerMe..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-06T15:49:53.000Z"}],["meta",{"property":"article:author","content":"hylexus"}],["meta",{"property":"article:modified_time","content":"2023-05-06T15:49:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"请求参数解析器\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-06T15:49:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"hylexus\\",\\"url\\":\\"https://github.com/hylexus\\"}]}"]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"支持的参数类型","slug":"支持的参数类型","link":"#支持的参数类型","children":[]},{"level":2,"title":"Jt808Request","slug":"jt808request","link":"#jt808request","children":[]},{"level":2,"title":"Jt808Response","slug":"jt808response","link":"#jt808response","children":[]},{"level":2,"title":"Jt808Session","slug":"jt808session","link":"#jt808session","children":[]},{"level":2,"title":"Jt808ServerExchange","slug":"jt808serverexchange","link":"#jt808serverexchange","children":[]},{"level":2,"title":"Jt808RequestHeader","slug":"jt808requestheader","link":"#jt808requestheader","children":[]},{"level":2,"title":"@Jt808RequestBody","slug":"jt808requestbody","link":"#jt808requestbody","children":[]},{"level":2,"title":"Jt808RequestEntity","slug":"jt808requestentity","link":"#jt808requestentity","children":[]}],"git":{"createdTime":1671812085000,"updatedTime":1683388193000,"contributors":[{"name":"hylexus","email":"hylexus@163.com","commits":2}]},"readingTime":{"minutes":2.12,"words":635},"filePathRelative":"v2/jt-808/guide/basic/request-msg-handler-argument-resolver.md","localizedDate":"2022年12月24日","autoDesc":true,"excerpt":"\\n<h2>介绍</h2>\\n<p>这部分也是借鉴(抄袭) <code>Spring</code> 的。</p>\\n<p>上一小节介绍了怎么接收请求，但是接收到的都是 <code>Jt808Request</code> 类型。</p>\\n<p>就类似于 <code>JavaWeb</code> 开发中的 <code>Servlet</code> 一样给你一个 <code>HttpServletRequest</code> : 后续所有解析操作都要手动进行，比较繁琐。</p>\\n<p>所以本项目也提供了几个内置的 <code>Jt808HandlerMethodArgumentResolver</code> 来将原始的 <code>Jt808Request</code><br>\\n转换成可读性较强的自定义类型，这些转换功能都是依赖于参数解析器 <code>Jt808HandlerMethodArgumentResolver</code>：</p>"}');export{m as comp,b as data};
