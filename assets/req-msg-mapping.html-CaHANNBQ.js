import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as t}from"./app-BEQS3wW-.js";const e={},o=t(`<h1 id="请求消息映射" tabindex="-1"><a class="header-anchor" href="#请求消息映射"><span>请求消息映射</span></a></h1><h2 id="jt808requesthandler" tabindex="-1"><a class="header-anchor" href="#jt808requesthandler"><span>@Jt808RequestHandler</span></a></h2><p><code>@Jt808RequestHandler</code> 注解的作用类似于 <code>WebFlux/WebMvc</code> 中的 <code>@Controller</code>/<code>@RestController</code>。</p><p>就是标记一下被该注解修饰的类中存在若干个能处理请求的处理器方法。没有其他任何属性。</p><div class="hint-container caution"><p class="hint-container-title">警告</p><p>被该注解标记的类应该是被 <code>Spring</code> 管理的类。一般来说应该和 <code>Spring</code> 的 <code>@Component</code> 等注解同时出现。</p><p>因为在 <strong>2.x</strong> 中去掉了配置包手动扫描的功能(配置繁琐，还不如直接交给 <code>Spring</code> 来处理)。</p></div><h2 id="jt808requesthandlermapping" tabindex="-1"><a class="header-anchor" href="#jt808requesthandlermapping"><span>@Jt808RequestHandlerMapping</span></a></h2><p>该注解和 <code>WebFlux/WebMvc</code> 中 <code>@RequestMapping</code> 、<code>@GetMapping</code> 等注解功能类似。</p><p>表明被该注解修饰的方法具有处理请求的能力。</p><h3 id="属性" tabindex="-1"><a class="header-anchor" href="#属性"><span>属性</span></a></h3><table><thead><tr><th>属性</th><th>说明</th><th>默认值</th><th>示例</th></tr></thead><tbody><tr><td><code>msgType</code></td><td>消息类型</td><td>--</td><td><code>{0x0001}</code>、<code>{0x0102}</code></td></tr><tr><td><code>versions</code></td><td>协议版本</td><td><code>AUTO_DETECTION</code></td><td><code>VERSION_2013</code> 、<code>{VERSION_2019,VERSION_2013}</code></td></tr><tr><td><code>desc</code></td><td>描述信息</td><td><code>&quot;&quot;</code></td><td><code>&quot;Some description ...&quot;</code></td></tr></tbody></table><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Jt808RequestHandler</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonHandler</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Jt808RequestHandlerMapping</span><span class="token punctuation">(</span>msgType <span class="token operator">=</span> <span class="token number">0x0100</span><span class="token punctuation">,</span> versions <span class="token operator">=</span> <span class="token constant">VERSION_2019</span><span class="token punctuation">,</span> desc <span class="token operator">=</span> <span class="token string">&quot;xxx&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">TerminalRegisterReplyMsg</span> <span class="token function">clientRegisterV2019</span><span class="token punctuation">(</span><span class="token class-name">Jt808RequestEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BuiltinMsg0100V2019</span><span class="token punctuation">&gt;</span></span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">BuiltinMsg0100V2019</span> body <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;client register v2019 : {}&quot;</span><span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TerminalRegisterReplyMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setFlowId</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">flowId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setResult</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAuthCode</span><span class="token punctuation">(</span><span class="token string">&quot;AuthCode2019----&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jt808requestbody" tabindex="-1"><a class="header-anchor" href="#jt808requestbody"><span>@Jt808RequestBody</span></a></h2><p>该注解和 <code>WebFlux/WebMvc</code> 中 <code>@RequestBody</code> 注解功能类似。 可以将 <strong>请求体</strong> 映射到被该注解修饰的类。</p><p>和 <code>@Jt808RequestHandler</code> 注解一样，该注解仅仅起一个标记作用，暂时没有其他属性。</p><h2 id="requestfield" tabindex="-1"><a class="header-anchor" href="#requestfield"><span>@RequestField</span></a></h2><h3 id="属性-1" tabindex="-1"><a class="header-anchor" href="#属性-1"><span>属性</span></a></h3><table><thead><tr><th>属性</th><th>说明</th><th>默认值</th><th>示例</th></tr></thead><tbody><tr><td><code>order</code></td><td>字段解析顺序(不要求连续，只比较大小)</td><td>--</td><td><code>0</code>、<code>1</code>、<code>2</code></td></tr><tr><td><s>startIndex</s></td><td>起始字节索引(<strong>2.1.1</strong>开始不再需要指定)</td><td><code>-1</code></td><td><code>0</code>、<code>2</code>、<code>4</code>、<code>8</code></td></tr><tr><td><s>startIndexExpression</s></td><td>作用和 <code>startIndex</code> 相同,但是该属性是基于 SpEL 的(<strong>2.1.1</strong>开始不再需要指定)</td><td><code>&quot;&quot;</code></td><td><code>&quot;#ctx.msgBodyLength() - 27 + 1&quot;</code></td></tr><tr><td><s>startIndexMethod</s></td><td>作用和 <code>startIndex</code> 相同,但是该属性返回的是一个<strong>方法名</strong>(<strong>2.1.1</strong>开始不再需要指定)</td><td>&quot;&quot;</td><td><code>somMethodName</code></td></tr><tr><td><code>length</code></td><td>该字段所占的字节数、长度</td><td><code>-1</code></td><td><code>2</code>、<code>4</code></td></tr><tr><td><code>lengthExpression</code></td><td>作用和 <code>length</code> 相同,但是该属性是基于 <code>SpEL</code> 的</td><td>&quot;&quot;</td><td><code>#this.someFieldValue + 1 - 2 * 3</code></td></tr><tr><td><code>lengthMethod</code></td><td>作用和 <code>length</code> 相同, 但是该属性返回的是一个 <strong>方法名</strong></td><td><code>&quot;&quot;</code></td><td><code>&quot;SomMethodName&quot;</code></td></tr><tr><td><code>dataType</code></td><td>数据类型</td><td>--</td><td><code>DWORD</code> 、<code>BYTES</code></td></tr><tr><td><code>customerFieldDeserializerClass</code></td><td>自定义的类型转换器</td><td>--</td><td><code>XxxDeserializer.class</code></td></tr></tbody></table><h3 id="spel" tabindex="-1"><a class="header-anchor" href="#spel"><span>SpEL</span></a></h3><p>该注解的 <code>startIndexExpression</code> 和 <code>lengthExpression</code> 两个属性支持 <code>SpEL</code>。可用的 <code>SpEL</code>元数据如下：</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><code>this</code></td><td>正在迭代的当前对象</td></tr><tr><td><code>request</code></td><td>本次请求对应的 <code>Jt808Request</code> 实例</td></tr><tr><td><code>header</code></td><td>本次请求对应的 <code>Jt808Request#header()</code> 实例</td></tr><tr><td><code>ctx</code></td><td><code>AnnotationDecoderContext</code> 实例，代表正在迭代对象的上下文(msgBodyLength 属性代表当前正在迭代的数据大小(字节数))</td></tr><tr><td><code>context</code></td><td>同 <code>ctx</code></td></tr></tbody></table><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>SpEL</code> 绑定的 <code>RootObject</code> 就是当前正在迭代的对象。</p><p>所以 <code>#this.someField</code> 等价于 <code>someField</code>、<code>#this.someMethod()</code> 等价于 <code>someMethod()</code> (<code>#this</code> 可以省略)。</p></div><h3 id="示例-1" tabindex="-1"><a class="header-anchor" href="#示例-1"><span>示例</span></a></h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>从 <strong>2.1.1</strong> 开始 <code>startIndex</code>, <code>startIndexExpression</code>, <code>startIndexMethod</code> 可以省略。</p></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Jt808RequestBody</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BuiltinMsg0100V2019</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1. [0-2) WORD 省域ID</span>
    <span class="token comment">// WORD 类型固定长度就是2字节 所以无需指定length</span>
    <span class="token annotation punctuation">@RequestField</span><span class="token punctuation">(</span>order <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token constant">WORD</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> provinceId<span class="token punctuation">;</span>

    <span class="token comment">// 2. [2-4) WORD 省域ID</span>
    <span class="token annotation punctuation">@RequestField</span><span class="token punctuation">(</span>order <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token constant">WORD</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> cityId<span class="token punctuation">;</span>

    <span class="token comment">// 3. [4-15) BYTE[11] 制造商ID</span>
    <span class="token annotation punctuation">@RequestField</span><span class="token punctuation">(</span>order <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token constant">STRING</span><span class="token punctuation">,</span> length <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> manufacturerId<span class="token punctuation">;</span>

    <span class="token comment">// 4. [15-45) BYTE[30] 终端型号</span>
    <span class="token annotation punctuation">@RequestField</span><span class="token punctuation">(</span>order <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token constant">STRING</span><span class="token punctuation">,</span> length <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> terminalType<span class="token punctuation">;</span>

    <span class="token comment">// 5. [45-75) BYTE[30] 终端ID</span>
    <span class="token annotation punctuation">@RequestField</span><span class="token punctuation">(</span>order <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token constant">STRING</span><span class="token punctuation">,</span> length <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> terminalId<span class="token punctuation">;</span>

    <span class="token comment">// 6. [75]   BYTE    车牌颜色</span>
    <span class="token annotation punctuation">@RequestField</span><span class="token punctuation">(</span>order <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token constant">BYTE</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">byte</span> color<span class="token punctuation">;</span>

    <span class="token comment">// 7. [76,n)   String    车辆标识</span>
    <span class="token comment">// 使用 SpEL 计算消息长度(上下文中的消息体总长度减去前面消费掉的字节数)</span>
    <span class="token annotation punctuation">@RequestField</span><span class="token punctuation">(</span>order <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token constant">STRING</span><span class="token punctuation">,</span> lengthExpression <span class="token operator">=</span> <span class="token string">&quot;#ctx.msgBodyLength() - 76&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> carIdentifier<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><div class="highlight-line"> </div><br><br><br><div class="highlight-line"> </div><br><br><br><div class="highlight-line"> </div><br><br><br><div class="highlight-line"> </div><br><br><br><div class="highlight-line"> </div><br><br><br><div class="highlight-line"> </div><br><br><br><br><div class="highlight-line"> </div><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="slicedfrom" tabindex="-1"><a class="header-anchor" href="#slicedfrom"><span>@SlicedFrom</span></a></h2><div class="hint-container caution"><p class="hint-container-title">警告</p><p>该注解目前仅仅适用于 <code>int</code> 、 <code>short</code> 、 <code>byte</code> 类型的字段。</p><p><strong>2.1.1</strong> 开始支持 <code>long</code> 类型。</p></div><h3 id="属性-2" tabindex="-1"><a class="header-anchor" href="#属性-2"><span>属性</span></a></h3><table><thead><tr><th><code>sourceFieldName</code></th><th>源字段名</th><th></th></tr></thead><tbody><tr><td><code>bitIndex</code></td><td>源字段中的第几个<code>bit</code></td><td>0</td></tr><tr><td><code>startBitIndex</code></td><td>源字段中的起始<code>bit</code>索引</td><td>1</td></tr><tr><td><code>endBitIndex</code></td><td>源字段中的终止<code>bit</code>索引</td><td>2</td></tr></tbody></table><h3 id="示例-2" tabindex="-1"><a class="header-anchor" href="#示例-2"><span>示例</span></a></h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>从 <strong>2.1.1</strong> 开始 <code>startIndex</code>, <code>startIndexExpression</code>, <code>startIndexMethod</code> 可以省略。</p></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Jt808RequestBody</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BuiltinMsg0200V2013</span> <span class="token punctuation">{</span>

    <span class="token comment">// (2). byte[4,8) DWORD 状态</span>
    <span class="token annotation punctuation">@RequestField</span><span class="token punctuation">(</span>order <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token constant">DWORD</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> status<span class="token punctuation">;</span>

    <span class="token comment">// 将上面的 status 字段的第0位取出转为 int 类型</span>
    <span class="token annotation punctuation">@SlicedFrom</span><span class="token punctuation">(</span>sourceFieldName <span class="token operator">=</span> <span class="token string">&quot;status&quot;</span><span class="token punctuation">,</span> bitIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> accIntStatus<span class="token punctuation">;</span>
    
    <span class="token comment">// 将上面的 status 字段的第0位取出转为 boolean 类型</span>
    <span class="token annotation punctuation">@SlicedFrom</span><span class="token punctuation">(</span>sourceFieldName <span class="token operator">=</span> <span class="token string">&quot;status&quot;</span><span class="token punctuation">,</span> bitIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> accBooleanStatus<span class="token punctuation">;</span>
    
    <span class="token comment">// 0 北纬;1 南纬</span>
    <span class="token comment">// 将上面的 status 字段的第2位取出转为 int 类型</span>
    <span class="token annotation punctuation">@SlicedFrom</span><span class="token punctuation">(</span>sourceFieldName <span class="token operator">=</span> <span class="token string">&quot;status&quot;</span><span class="token punctuation">,</span> bitIndex <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> latType<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><div class="highlight-line"> </div><br><br><br><br><div class="highlight-line"> </div><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,32),c=[o];function p(d,i){return s(),a("div",null,c)}const u=n(e,[["render",p],["__file","req-msg-mapping.html.vue"]]),k=JSON.parse('{"path":"/v2/jt-808/guide/annotation-based-dev/req-msg-mapping.html","title":"请求消息映射","lang":"zh-CN","frontmatter":{"icon":"at","description":"请求消息映射 @Jt808RequestHandler @Jt808RequestHandler 注解的作用类似于 WebFlux/WebMvc 中的 @Controller/@RestController。 就是标记一下被该注解修饰的类中存在若干个能处理请求的处理器方法。没有其他任何属性。 警告 被该注解标记的类应该是被 Spring 管理的类。一般...","head":[["meta",{"property":"og:url","content":"https://github.com/hylexus/jt-framework/jt-framework/v2/jt-808/guide/annotation-based-dev/req-msg-mapping.html"}],["meta",{"property":"og:site_name","content":"jt-framework"}],["meta",{"property":"og:title","content":"请求消息映射"}],["meta",{"property":"og:description","content":"请求消息映射 @Jt808RequestHandler @Jt808RequestHandler 注解的作用类似于 WebFlux/WebMvc 中的 @Controller/@RestController。 就是标记一下被该注解修饰的类中存在若干个能处理请求的处理器方法。没有其他任何属性。 警告 被该注解标记的类应该是被 Spring 管理的类。一般..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-06T15:49:53.000Z"}],["meta",{"property":"article:author","content":"hylexus"}],["meta",{"property":"article:modified_time","content":"2023-05-06T15:49:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"请求消息映射\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-06T15:49:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"hylexus\\",\\"url\\":\\"https://github.com/hylexus\\"}]}"]]},"headers":[{"level":2,"title":"@Jt808RequestHandler","slug":"jt808requesthandler","link":"#jt808requesthandler","children":[]},{"level":2,"title":"@Jt808RequestHandlerMapping","slug":"jt808requesthandlermapping","link":"#jt808requesthandlermapping","children":[{"level":3,"title":"属性","slug":"属性","link":"#属性","children":[]},{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]}]},{"level":2,"title":"@Jt808RequestBody","slug":"jt808requestbody","link":"#jt808requestbody","children":[]},{"level":2,"title":"@RequestField","slug":"requestfield","link":"#requestfield","children":[{"level":3,"title":"属性","slug":"属性-1","link":"#属性-1","children":[]},{"level":3,"title":"SpEL","slug":"spel","link":"#spel","children":[]},{"level":3,"title":"示例","slug":"示例-1","link":"#示例-1","children":[]}]},{"level":2,"title":"@SlicedFrom","slug":"slicedfrom","link":"#slicedfrom","children":[{"level":3,"title":"属性","slug":"属性-2","link":"#属性-2","children":[]},{"level":3,"title":"示例","slug":"示例-2","link":"#示例-2","children":[]}]}],"git":{"createdTime":1671812085000,"updatedTime":1683388193000,"contributors":[{"name":"hylexus","email":"hylexus@163.com","commits":2}]},"readingTime":{"minutes":3.41,"words":1024},"filePathRelative":"v2/jt-808/guide/annotation-based-dev/req-msg-mapping.md","localizedDate":"2022年12月24日","autoDesc":true,"excerpt":"\\n<h2>@Jt808RequestHandler</h2>\\n<p><code>@Jt808RequestHandler</code> 注解的作用类似于 <code>WebFlux/WebMvc</code> 中的 <code>@Controller</code>/<code>@RestController</code>。</p>\\n<p>就是标记一下被该注解修饰的类中存在若干个能处理请求的处理器方法。没有其他任何属性。</p>\\n<div class=\\"hint-container caution\\">\\n<p class=\\"hint-container-title\\">警告</p>\\n<p>被该注解标记的类应该是被 <code>Spring</code> 管理的类。一般来说应该和 <code>Spring</code> 的 <code>@Component</code> 等注解同时出现。</p>\\n<p>因为在 <strong>2.x</strong> 中去掉了配置包手动扫描的功能(配置繁琐，还不如直接交给 <code>Spring</code> 来处理)。</p>\\n</div>"}');export{u as comp,k as data};
