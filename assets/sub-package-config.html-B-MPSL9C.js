import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,a as e}from"./app-BEQS3wW-.js";const t={},o=e(`<h1 id="分包相关" tabindex="-1"><a class="header-anchor" href="#分包相关"><span>分包相关</span></a></h1><p>要替换内置的分包暂存器只需将对应类型的 <code>Bean</code> 加入到 <code>Spring</code> 容器即可。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Jt808ResponseSubPackageStorage + Jt808RequestSubPackageStorage</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyJt808Config</span> <span class="token punctuation">{</span>
    <span class="token comment">// [[ 非必须配置 ]] -- 替换内置响应消息分包暂存器</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Jt808ResponseSubPackageStorage</span> <span class="token function">myJt808ResponseSubPackageStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyResponseSubPackageStorage</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CaffeineJt808ResponseSubPackageStorage<span class="token punctuation">.</span>StorageConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// [[ 非必须配置 ]] -- 替换内置请求消息分包暂存器</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Jt808RequestSubPackageStorage</span> <span class="token function">myJt808RequestSubPackageStorage</span><span class="token punctuation">(</span><span class="token class-name">Jt808RequestMsgDispatcher</span> dispatcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyRequestSubPackageStorage</span><span class="token punctuation">(</span><span class="token class-name">ByteBufAllocator</span><span class="token punctuation">.</span><span class="token constant">DEFAULT</span><span class="token punctuation">,</span> dispatcher<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CaffeineJt808RequestSubPackageStorage<span class="token punctuation">.</span>StorageConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),p=[o];function c(u,i){return a(),s("div",null,p)}const r=n(t,[["render",c],["__file","sub-package-config.html.vue"]]),d=JSON.parse('{"path":"/v2/jt-808/guide/customization/sub-package-config.html","title":"分包相关","lang":"zh-CN","frontmatter":{"icon":"rank","description":"分包相关 要替换内置的分包暂存器只需将对应类型的 Bean 加入到 Spring 容器即可。","head":[["meta",{"property":"og:url","content":"https://github.com/hylexus/jt-framework/jt-framework/v2/jt-808/guide/customization/sub-package-config.html"}],["meta",{"property":"og:site_name","content":"jt-framework"}],["meta",{"property":"og:title","content":"分包相关"}],["meta",{"property":"og:description","content":"分包相关 要替换内置的分包暂存器只需将对应类型的 Bean 加入到 Spring 容器即可。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-12-23T16:14:45.000Z"}],["meta",{"property":"article:author","content":"hylexus"}],["meta",{"property":"article:modified_time","content":"2022-12-23T16:14:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"分包相关\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-12-23T16:14:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"hylexus\\",\\"url\\":\\"https://github.com/hylexus\\"}]}"]]},"headers":[],"git":{"createdTime":1671812085000,"updatedTime":1671812085000,"contributors":[{"name":"hylexus","email":"hylexus@163.com","commits":1}]},"readingTime":{"minutes":0.34,"words":102},"filePathRelative":"v2/jt-808/guide/customization/sub-package-config.md","localizedDate":"2022年12月24日","autoDesc":true,"excerpt":"\\n<p>要替换内置的分包暂存器只需将对应类型的 <code>Bean</code> 加入到 <code>Spring</code> 容器即可。</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token comment\\">// Jt808ResponseSubPackageStorage + Jt808RequestSubPackageStorage</span>\\n<span class=\\"token annotation punctuation\\">@Configuration</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">MyJt808Config</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// [[ 非必须配置 ]] -- 替换内置响应消息分包暂存器</span>\\n    <span class=\\"token annotation punctuation\\">@Bean</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">Jt808ResponseSubPackageStorage</span> <span class=\\"token function\\">myJt808ResponseSubPackageStorage</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">MyResponseSubPackageStorage</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">CaffeineJt808ResponseSubPackageStorage<span class=\\"token punctuation\\">.</span>StorageConfig</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token comment\\">// [[ 非必须配置 ]] -- 替换内置请求消息分包暂存器</span>\\n    <span class=\\"token annotation punctuation\\">@Bean</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">Jt808RequestSubPackageStorage</span> <span class=\\"token function\\">myJt808RequestSubPackageStorage</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Jt808RequestMsgDispatcher</span> dispatcher<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">MyRequestSubPackageStorage</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">ByteBufAllocator</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">DEFAULT</span><span class=\\"token punctuation\\">,</span> dispatcher<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">CaffeineJt808RequestSubPackageStorage<span class=\\"token punctuation\\">.</span>StorageConfig</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>"}');export{r as comp,d as data};
