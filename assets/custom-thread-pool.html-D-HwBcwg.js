import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o as p,c as o,b as n,d as a,e as c,a as l}from"./app-BEQS3wW-.js";const i={},r=n("h1",{id:"业务线程池-v2-3-0-rc-2",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#业务线程池-v2-3-0-rc-2"},[n("span",null,"业务线程池(v2.3.0-rc.2)")])],-1),u={class:"hint-container tip"},d=n("p",{class:"hint-container-title"},"提示",-1),k=l(`<h2 id="配置内置业务线程池" tabindex="-1"><a class="header-anchor" href="#配置内置业务线程池"><span>配置内置业务线程池</span></a></h2><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">jt808</span><span class="token punctuation">:</span>
  <span class="token comment"># Netty 线程池</span>
  <span class="token key atrule">msg-processor</span><span class="token punctuation">:</span>
    <span class="token key atrule">executor-group</span><span class="token punctuation">:</span>
      <span class="token key atrule">thread-count</span><span class="token punctuation">:</span> <span class="token number">2</span>
      <span class="token key atrule">pool-name</span><span class="token punctuation">:</span> 808<span class="token punctuation">-</span>msg<span class="token punctuation">-</span>processer
      <span class="token key atrule">max-pending-tasks</span><span class="token punctuation">:</span> <span class="token number">128</span>
  <span class="token comment">## 业务线程池(指令服务器 和 附件服务器共用)</span>
  <span class="token key atrule">msg-handler</span><span class="token punctuation">:</span>
    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">core-pool-size</span><span class="token punctuation">:</span> <span class="token number">64</span>
    <span class="token key atrule">max-pool-size</span><span class="token punctuation">:</span> <span class="token number">128</span>
    <span class="token key atrule">keep-alive</span><span class="token punctuation">:</span> 1m
    <span class="token key atrule">max-pending-tasks</span><span class="token punctuation">:</span> <span class="token number">256</span>
    <span class="token key atrule">daemon</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">pool-name</span><span class="token punctuation">:</span> 808<span class="token punctuation">-</span>handler
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="替换内置业务线程池" tabindex="-1"><a class="header-anchor" href="#替换内置业务线程池"><span>替换内置业务线程池</span></a></h2><p>要替换内置的业务线程池，请提供一个 <code>Jt808ServerSchedulerFactory</code> 类型的 <code>Bean</code>。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeConfigurationClass</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token class-name">Jt808ServerSchedulerFactory</span> <span class="token function">jt808ServerSchedulerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Jt808ServerSchedulerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">ExecutorService</span> <span class="token function">getMsgHandlerExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 这里返回自定义线程池</span>
                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function m(v,h){const s=t("Badge");return p(),o("div",null,[r,n("div",u,[d,n("p",null,[a("业务线程池是 "),c(s,{text:"2.3.0-rc.2",type:"tip",vertical:"middle"}),a(" 中新增的。")])]),k])}const g=e(i,[["render",m],["__file","custom-thread-pool.html.vue"]]),x=JSON.parse('{"path":"/v2/jt-808/guide/customization/custom-thread-pool.html","title":"业务线程池(v2.3.0-rc.2)","lang":"zh-CN","frontmatter":{"icon":"change","description":"业务线程池(v2.3.0-rc.2) 提示 业务线程池是 配置内置业务线程池 替换内置业务线程池 要替换内置的业务线程池，请提供一个 Jt808ServerSchedulerFactory 类型的 Bean。","head":[["meta",{"property":"og:url","content":"https://github.com/hylexus/jt-framework/jt-framework/v2/jt-808/guide/customization/custom-thread-pool.html"}],["meta",{"property":"og:site_name","content":"jt-framework"}],["meta",{"property":"og:title","content":"业务线程池(v2.3.0-rc.2)"}],["meta",{"property":"og:description","content":"业务线程池(v2.3.0-rc.2) 提示 业务线程池是 配置内置业务线程池 替换内置业务线程池 要替换内置的业务线程池，请提供一个 Jt808ServerSchedulerFactory 类型的 Bean。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-01T07:17:56.000Z"}],["meta",{"property":"article:author","content":"hylexus"}],["meta",{"property":"article:modified_time","content":"2024-12-01T07:17:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"业务线程池(v2.3.0-rc.2)\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-01T07:17:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"hylexus\\",\\"url\\":\\"https://github.com/hylexus\\"}]}"]]},"headers":[{"level":2,"title":"配置内置业务线程池","slug":"配置内置业务线程池","link":"#配置内置业务线程池","children":[]},{"level":2,"title":"替换内置业务线程池","slug":"替换内置业务线程池","link":"#替换内置业务线程池","children":[]}],"git":{"createdTime":1733037476000,"updatedTime":1733037476000,"contributors":[{"name":"hylexus","email":"hylexus@163.com","commits":1}]},"readingTime":{"minutes":0.54,"words":161},"filePathRelative":"v2/jt-808/guide/customization/custom-thread-pool.md","localizedDate":"2024年12月1日","autoDesc":true,"excerpt":"\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p>业务线程池是 </p>\\n</div>\\n<h2>配置内置业务线程池</h2>\\n<div class=\\"language-yaml\\" data-ext=\\"yml\\" data-title=\\"yml\\"><pre class=\\"language-yaml\\"><code><span class=\\"token key atrule\\">jt808</span><span class=\\"token punctuation\\">:</span>\\n  <span class=\\"token comment\\"># Netty 线程池</span>\\n  <span class=\\"token key atrule\\">msg-processor</span><span class=\\"token punctuation\\">:</span>\\n    <span class=\\"token key atrule\\">executor-group</span><span class=\\"token punctuation\\">:</span>\\n      <span class=\\"token key atrule\\">thread-count</span><span class=\\"token punctuation\\">:</span> <span class=\\"token number\\">2</span>\\n      <span class=\\"token key atrule\\">pool-name</span><span class=\\"token punctuation\\">:</span> 808<span class=\\"token punctuation\\">-</span>msg<span class=\\"token punctuation\\">-</span>processer\\n      <span class=\\"token key atrule\\">max-pending-tasks</span><span class=\\"token punctuation\\">:</span> <span class=\\"token number\\">128</span>\\n  <span class=\\"token comment\\">## 业务线程池(指令服务器 和 附件服务器共用)</span>\\n  <span class=\\"token key atrule\\">msg-handler</span><span class=\\"token punctuation\\">:</span>\\n    <span class=\\"token key atrule\\">enabled</span><span class=\\"token punctuation\\">:</span> <span class=\\"token boolean important\\">true</span>\\n    <span class=\\"token key atrule\\">core-pool-size</span><span class=\\"token punctuation\\">:</span> <span class=\\"token number\\">64</span>\\n    <span class=\\"token key atrule\\">max-pool-size</span><span class=\\"token punctuation\\">:</span> <span class=\\"token number\\">128</span>\\n    <span class=\\"token key atrule\\">keep-alive</span><span class=\\"token punctuation\\">:</span> 1m\\n    <span class=\\"token key atrule\\">max-pending-tasks</span><span class=\\"token punctuation\\">:</span> <span class=\\"token number\\">256</span>\\n    <span class=\\"token key atrule\\">daemon</span><span class=\\"token punctuation\\">:</span> <span class=\\"token boolean important\\">true</span>\\n    <span class=\\"token key atrule\\">pool-name</span><span class=\\"token punctuation\\">:</span> 808<span class=\\"token punctuation\\">-</span>handler\\n</code></pre></div>"}');export{g as comp,x as data};
