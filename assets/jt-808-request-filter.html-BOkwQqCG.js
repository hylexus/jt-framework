import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as t}from"./app-BEQS3wW-.js";const e={},p=t(`<h1 id="jt808requestfilter-v2-1-1" tabindex="-1"><a class="header-anchor" href="#jt808requestfilter-v2-1-1"><span>Jt808RequestFilter(v2.1.1)</span></a></h1><p>这个接口也是从 <code>org.springframework.web.server.WebFilter</code> 借鉴(抄袭)的。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>该功能默认不开启，要使用 <code>Jt808RequestFilter</code> 需要配置 <code>jt808.plugins.request-filter.enabled = true</code></p></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Jt808RequestFilter</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>red<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>注意<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>
     * 该功能默认不开启，要使用 filter 需要配置 <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">jt808<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>request<span class="token operator">-</span>filter<span class="token punctuation">.</span>enabled <span class="token operator">=</span> <span class="token boolean">true</span></span></span><span class="token punctuation">}</span>
     *
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * 能执行到这里就意味着: 请求整体结构已经解析完毕(分包请求也已经自动合并)。
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">filter</span></span><span class="token punctuation">}</span> 的逻辑执行完成之后才会执行消息体的解析。
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * 多个 <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">filter</span></span><span class="token punctuation">}</span> 实例的执行顺序和 Spring 的 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Order</span></span> @Order<span class="token punctuation">}</span> 和 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">Ordered</span></span> Ordered<span class="token punctuation">}</span> 一致。
     *
     * <span class="token keyword">@param</span> <span class="token parameter">exchange</span> 当前请求上下文
     * <span class="token keyword">@param</span> <span class="token parameter">chain</span>    过滤器链
     * <span class="token keyword">@see</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Order</span></span>
     * <span class="token keyword">@see</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">Ordered</span></span>
     * <span class="token keyword">@since</span> 2.1.1
     */</span>
    <span class="token keyword">void</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">Jt808ServerExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">Jt808RequestFilterChain</span> chain<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),o=[p];function c(l,i){return s(),a("div",null,o)}const k=n(e,[["render",c],["__file","jt-808-request-filter.html.vue"]]),d=JSON.parse('{"path":"/v2/jt-808/guide/customization/jt-808-request-filter.html","title":"Jt808RequestFilter(v2.1.1)","lang":"zh-CN","frontmatter":{"icon":"filter","description":"Jt808RequestFilter(v2.1.1) 这个接口也是从 org.springframework.web.server.WebFilter 借鉴(抄袭)的。 提示 该功能默认不开启，要使用 Jt808RequestFilter 需要配置 jt808.plugins.request-filter.enabled = true","head":[["meta",{"property":"og:url","content":"https://github.com/hylexus/jt-framework/jt-framework/v2/jt-808/guide/customization/jt-808-request-filter.html"}],["meta",{"property":"og:site_name","content":"jt-framework"}],["meta",{"property":"og:title","content":"Jt808RequestFilter(v2.1.1)"}],["meta",{"property":"og:description","content":"Jt808RequestFilter(v2.1.1) 这个接口也是从 org.springframework.web.server.WebFilter 借鉴(抄袭)的。 提示 该功能默认不开启，要使用 Jt808RequestFilter 需要配置 jt808.plugins.request-filter.enabled = true"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-06T15:49:53.000Z"}],["meta",{"property":"article:author","content":"hylexus"}],["meta",{"property":"article:modified_time","content":"2023-05-06T15:49:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Jt808RequestFilter(v2.1.1)\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-06T15:49:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"hylexus\\",\\"url\\":\\"https://github.com/hylexus\\"}]}"]]},"headers":[],"git":{"createdTime":1683388193000,"updatedTime":1683388193000,"contributors":[{"name":"hylexus","email":"hylexus@163.com","commits":1}]},"readingTime":{"minutes":0.6,"words":179},"filePathRelative":"v2/jt-808/guide/customization/jt-808-request-filter.md","localizedDate":"2023年5月6日","autoDesc":true,"excerpt":"\\n<p>这个接口也是从 <code>org.springframework.web.server.WebFilter</code> 借鉴(抄袭)的。</p>\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p>该功能默认不开启，要使用 <code>Jt808RequestFilter</code> 需要配置 <code>jt808.plugins.request-filter.enabled = true</code></p>\\n</div>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">interface</span> <span class=\\"token class-name\\">Jt808RequestFilter</span> <span class=\\"token punctuation\\">{</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>h3</span> <span class=\\"token attr-name\\">color</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>red<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">&gt;</span></span>注意<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>h3</span><span class=\\"token punctuation\\">&gt;</span></span>\\n     * 该功能默认不开启，要使用 filter 需要配置 <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\">jt808<span class=\\"token punctuation\\">.</span>plugins<span class=\\"token punctuation\\">.</span>request<span class=\\"token operator\\">-</span>filter<span class=\\"token punctuation\\">.</span>enabled <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">true</span></span></span><span class=\\"token punctuation\\">}</span>\\n     *\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>\\n     * 能执行到这里就意味着: 请求整体结构已经解析完毕(分包请求也已经自动合并)。\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>\\n     * <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\">filter</span></span><span class=\\"token punctuation\\">}</span> 的逻辑执行完成之后才会执行消息体的解析。\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>\\n     * 多个 <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\">filter</span></span><span class=\\"token punctuation\\">}</span> 实例的执行顺序和 Spring 的 <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span> <span class=\\"token reference\\"><span class=\\"token namespace\\">org<span class=\\"token punctuation\\">.</span>springframework<span class=\\"token punctuation\\">.</span>core<span class=\\"token punctuation\\">.</span>annotation<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">Order</span></span> @Order<span class=\\"token punctuation\\">}</span> 和 <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span> <span class=\\"token reference\\"><span class=\\"token namespace\\">org<span class=\\"token punctuation\\">.</span>springframework<span class=\\"token punctuation\\">.</span>core<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">Ordered</span></span> Ordered<span class=\\"token punctuation\\">}</span> 一致。\\n     *\\n     * <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">exchange</span> 当前请求上下文\\n     * <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">chain</span>    过滤器链\\n     * <span class=\\"token keyword\\">@see</span> <span class=\\"token reference\\"><span class=\\"token namespace\\">org<span class=\\"token punctuation\\">.</span>springframework<span class=\\"token punctuation\\">.</span>core<span class=\\"token punctuation\\">.</span>annotation<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">Order</span></span>\\n     * <span class=\\"token keyword\\">@see</span> <span class=\\"token reference\\"><span class=\\"token namespace\\">org<span class=\\"token punctuation\\">.</span>springframework<span class=\\"token punctuation\\">.</span>core<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">Ordered</span></span>\\n     * <span class=\\"token keyword\\">@since</span> 2.1.1\\n     */</span>\\n    <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">filter</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Jt808ServerExchange</span> exchange<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Jt808RequestFilterChain</span> chain<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>"}');export{k as comp,d as data};
