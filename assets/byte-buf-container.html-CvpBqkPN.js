import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c,b as a,d as n,e as i,w as l,a as s}from"./app-BEQS3wW-.js";const u={},r=s('<h1 id="bytebufcontainer-v2-1-1" tabindex="-1"><a class="header-anchor" href="#bytebufcontainer-v2-1-1"><span>ByteBufContainer(v2.1.1)</span></a></h1><div class="hint-container info"><p class="hint-container-title">提示</p><p><code>ByteBufContainer</code> 是 <strong>2.1.1</strong> 中引入的辅助类。</p></div><h2 id="作用" tabindex="-1"><a class="header-anchor" href="#作用"><span>作用</span></a></h2><p>在某些特殊场景下，用来替代 <code>byte[]</code>, <code>ByteBuf</code>。</p><p>因为在特殊场景下 <code>byte[]</code> 和 <code>ByteBuf</code> 的内容不太方便构造。</p><p>详情看下面 <code>0x8103</code> 消息中的用法：</p><h2 id="场景示例" tabindex="-1"><a class="header-anchor" href="#场景示例"><span>场景示例</span></a></h2><p>在 <code>0x8103</code> 消息中, 参数项的值的类型不是固定的，可能是 <code>DWORD</code>, <code>WORD</code>, <code>BYTE</code> 等类型。</p><p>在 <code>v2.1.1</code> 之前的版本中，对于这种情况，实体类中只能使用 <code>byte[]</code> 或 <code>ByteBuf</code> 来表示，但是 <code>byte[]</code> 或 <code>ByteBuf</code> 的内容构造起来有点麻烦。</p><p>所以提供了 <code>ByteBufContainer</code> 和 <code>ByteArrayContainer</code> 来简化这种操作。</p><p>下面简单演示 <code>ByteBufContainer</code> 在响应消息中的用法。</p>',11),d={class:"hint-container info"},k=s('<p class="hint-container-title">tip</p><p>下面示例中的 <code>@ResponseFieldAlias</code> 注解是 <strong>v2.1.1</strong> 中给 <code>@ResponseField</code> 引入的别名。类似于 <strong>spring</strong> 中 <code>@RequestMapping</code> 和 <code>@GetMapping</code> 的关系。</p>',2),m=s(`<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Jt808ResponseBody</span><span class="token punctuation">(</span>msgId <span class="token operator">=</span> <span class="token number">0x8103</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BuiltinMsg8103Alias</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@ResponseFieldAlias.Byte</span><span class="token punctuation">(</span>order <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> paramCount<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@ResponseFieldAlias.List</span><span class="token punctuation">(</span>order <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ParamItem</span><span class="token punctuation">&gt;</span></span> paramItemList<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Data</span>
    <span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@NoArgsConstructor</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ParamItem</span> <span class="token punctuation">{</span>

        <span class="token annotation punctuation">@ResponseFieldAlias.Dword</span><span class="token punctuation">(</span>order <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">)</span>
        <span class="token keyword">private</span> <span class="token keyword">long</span> msgId<span class="token punctuation">;</span>

        <span class="token annotation punctuation">@ResponseFieldAlias.Byte</span><span class="token punctuation">(</span>order <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">)</span>
        <span class="token keyword">private</span> <span class="token keyword">int</span> msgLength<span class="token punctuation">;</span>

        <span class="token comment">// 不同 id 的消息内容的数据类型也不同</span>
        <span class="token comment">// 除了可以使用 byte[], ByteBuf, ByteArrayContainer 之外，也可以使用 ByteBufContainer</span>
        <span class="token annotation punctuation">@ResponseFieldAlias.Bytes</span><span class="token punctuation">(</span>order <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">)</span>
        <span class="token keyword">private</span> <span class="token class-name">ByteBufContainer</span> msgContent<span class="token punctuation">;</span>
        <span class="token comment">// private ByteArrayContainer msgContent;</span>
        <span class="token comment">// private ByteBuf msgContent;</span>
        <span class="token comment">// private byte[] msgContent;</span>

        <span class="token keyword">public</span> <span class="token class-name">ParamItem</span><span class="token punctuation">(</span><span class="token keyword">long</span> msgId<span class="token punctuation">,</span> <span class="token class-name">ByteBufContainer</span> msgContent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>msgId <span class="token operator">=</span> msgId<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>msgContent <span class="token operator">=</span> msgContent<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>msgLength <span class="token operator">=</span> msgContent<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="如何创建实例" tabindex="-1"><a class="header-anchor" href="#如何创建实例"><span>如何创建实例?</span></a></h2><p>推荐使用 <code>ByteBufContainer</code> 中提供的一系列工厂方法来构建 <code>ByteBufContainer</code> 的实例。</p><p>下面是 <code>ByteBufContainer</code> 的简单用法示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">BuiltinMsg8103Test</span> <span class="token keyword">extends</span> <span class="token class-name">BaseReqRespMsgTest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BuiltinMsg8103Alias<span class="token punctuation">.</span>ParamItem</span><span class="token punctuation">&gt;</span></span> paramItemList <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>
                <span class="token comment">// 手动构建一个 DWORD 类型的实例</span>
                <span class="token keyword">new</span> <span class="token class-name">BuiltinMsg8103Alias<span class="token punctuation">.</span>ParamItem</span><span class="token punctuation">(</span><span class="token number">0x0001</span><span class="token punctuation">,</span> <span class="token class-name">ByteBufContainer</span><span class="token punctuation">.</span><span class="token function">ofDword</span><span class="token punctuation">(</span><span class="token number">66</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token comment">// 手动构建一个 STRING 类型的实例</span>
                <span class="token keyword">new</span> <span class="token class-name">BuiltinMsg8103Alias<span class="token punctuation">.</span>ParamItem</span><span class="token punctuation">(</span><span class="token number">0x0013</span><span class="token punctuation">,</span> <span class="token class-name">ByteBufContainer</span><span class="token punctuation">.</span><span class="token function">ofString</span><span class="token punctuation">(</span><span class="token string">&quot;www.xxx.fff.zzz.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token comment">// 手动构建一个 WORD 类型的实例</span>
                <span class="token keyword">new</span> <span class="token class-name">BuiltinMsg8103Alias<span class="token punctuation">.</span>ParamItem</span><span class="token punctuation">(</span><span class="token number">0x0081</span><span class="token punctuation">,</span> <span class="token class-name">ByteBufContainer</span><span class="token punctuation">.</span><span class="token function">ofWord</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token comment">// 手动构建一个 BYTE 类型的实例</span>
                <span class="token keyword">new</span> <span class="token class-name">BuiltinMsg8103Alias<span class="token punctuation">.</span>ParamItem</span><span class="token punctuation">(</span><span class="token number">0x0084</span><span class="token punctuation">,</span> <span class="token class-name">ByteBufContainer</span><span class="token punctuation">.</span><span class="token function">ofByte</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token comment">// 手动构建一个 BYTES 类型的实例</span>
                <span class="token keyword">new</span> <span class="token class-name">BuiltinMsg8103Alias<span class="token punctuation">.</span>ParamItem</span><span class="token punctuation">(</span><span class="token number">0x0032</span><span class="token punctuation">,</span> <span class="token class-name">ByteBufContainer</span><span class="token punctuation">.</span><span class="token function">ofBytes</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">0x16</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">,</span> <span class="token number">0x1E</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">BuiltinMsg8103Alias</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BuiltinMsg8103Alias</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setParamItemList</span><span class="token punctuation">(</span>paramItemList<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setParamCount</span><span class="token punctuation">(</span>paramItemList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">final</span> <span class="token class-name">String</span> hexString <span class="token operator">=</span> <span class="token function">encode</span><span class="token punctuation">(</span>
                msg<span class="token punctuation">,</span>
                builder <span class="token operator">-&gt;</span> builder<span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token class-name">Jt808ProtocolVersion</span><span class="token punctuation">.</span><span class="token constant">VERSION_2013</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">terminalId</span><span class="token punctuation">(</span>terminalId2013<span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">msgId</span><span class="token punctuation">(</span><span class="token class-name">BuiltinJt808MsgType</span><span class="token punctuation">.</span><span class="token constant">SERVER_SET_TERMINAL_PARAM</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// ByteBufContainer 会被 \`ByteBufContainerFieldSerializer\` 自动释放掉</span>
        <span class="token comment">// ByteBufContainer 会被 \`ByteBufContainerFieldSerializer\` 自动释放掉</span>
        <span class="token comment">// ByteBufContainer 会被 \`ByteBufContainerFieldSerializer\` 自动释放掉</span>
        paramItemList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>it <span class="token operator">-&gt;</span> <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> it<span class="token punctuation">.</span><span class="token function">getMsgContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">refCnt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;7E8103003801391234432300000500000001040000004200000013137777772E7878782E6666662E7A7A7A2&quot;</span>
                <span class="token operator">+</span> <span class="token string">&quot;E636F6D0000008102000B000000840101000000320416320A1EFE7E&quot;</span><span class="token punctuation">,</span> hexString<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h2><p>在使用方面，<code>ByteBufContainer</code> 和 <code>ByteArrayContainer</code> 的显著区别是：<code>ByteBufContainer</code> 需要 <code>release()</code>。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><ol><li>请求消息实体类中出现的 <code>ByteBufContainer</code> 会随着 <code>Jt808Request#release()</code> 的一起被自动释放掉(前提是你没有做额外的 <code>retain()</code> 操作)</li><li>响应消息实体类中出现的 <code>ByteBufContainer</code> 会在 <code>ByteBufContainerFieldSerializer</code> 中自动释放(前提是你没有做额外的 <code>retain()</code> 操作)</li><li>除以上两种情况之外，在其他地方手动构建的 <code>ByteBufContainer</code> 需要你自己在恰当的时机释放掉</li></ol></div>`,8);function v(b,y){const t=p("RouteLink");return o(),c("div",null,[r,a("div",d,[k,a("p",null,[n("详情见 "),i(t,{to:"/v2/jt-808/guide/annotation-based-dev/annotation-alias.html"},{default:l(()=>[n("注解驱动开发--注解别名")]),_:1}),n(" 。")])]),m])}const g=e(u,[["render",v],["__file","byte-buf-container.html.vue"]]),h=JSON.parse('{"path":"/v2/jt-808/guide/utilities/byte-buf-container.html","title":"ByteBufContainer(v2.1.1)","lang":"zh-CN","frontmatter":{"icon":"bitbucket","description":"ByteBufContainer(v2.1.1) 提示 ByteBufContainer 是 2.1.1 中引入的辅助类。 作用 在某些特殊场景下，用来替代 byte[], ByteBuf。 因为在特殊场景下 byte[] 和 ByteBuf 的内容不太方便构造。 详情看下面 0x8103 消息中的用法： 场景示例 在 0x8103 消息中, 参数项的...","head":[["meta",{"property":"og:url","content":"https://github.com/hylexus/jt-framework/jt-framework/v2/jt-808/guide/utilities/byte-buf-container.html"}],["meta",{"property":"og:site_name","content":"jt-framework"}],["meta",{"property":"og:title","content":"ByteBufContainer(v2.1.1)"}],["meta",{"property":"og:description","content":"ByteBufContainer(v2.1.1) 提示 ByteBufContainer 是 2.1.1 中引入的辅助类。 作用 在某些特殊场景下，用来替代 byte[], ByteBuf。 因为在特殊场景下 byte[] 和 ByteBuf 的内容不太方便构造。 详情看下面 0x8103 消息中的用法： 场景示例 在 0x8103 消息中, 参数项的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-06T15:49:53.000Z"}],["meta",{"property":"article:author","content":"hylexus"}],["meta",{"property":"article:modified_time","content":"2023-05-06T15:49:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ByteBufContainer(v2.1.1)\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-06T15:49:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"hylexus\\",\\"url\\":\\"https://github.com/hylexus\\"}]}"]]},"headers":[{"level":2,"title":"作用","slug":"作用","link":"#作用","children":[]},{"level":2,"title":"场景示例","slug":"场景示例","link":"#场景示例","children":[]},{"level":2,"title":"如何创建实例?","slug":"如何创建实例","link":"#如何创建实例","children":[]},{"level":2,"title":"注意事项","slug":"注意事项","link":"#注意事项","children":[]}],"git":{"createdTime":1683038990000,"updatedTime":1683388193000,"contributors":[{"name":"hylexus","email":"hylexus@163.com","commits":2}]},"readingTime":{"minutes":2.24,"words":673},"filePathRelative":"v2/jt-808/guide/utilities/byte-buf-container.md","localizedDate":"2023年5月2日","autoDesc":true,"excerpt":"\\n<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p><code>ByteBufContainer</code> 是 <strong>2.1.1</strong> 中引入的辅助类。</p>\\n</div>\\n<h2>作用</h2>\\n<p>在某些特殊场景下，用来替代 <code>byte[]</code>, <code>ByteBuf</code>。</p>\\n<p>因为在特殊场景下 <code>byte[]</code> 和 <code>ByteBuf</code> 的内容不太方便构造。</p>\\n<p>详情看下面 <code>0x8103</code> 消息中的用法：</p>"}');export{g as comp,h as data};
