import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as e}from"./app-BEQS3wW-.js";const t={},p=e(`<h1 id="session相关" tabindex="-1"><a class="header-anchor" href="#session相关"><span>Session相关</span></a></h1><h2 id="jt808session" tabindex="-1"><a class="header-anchor" href="#jt808session"><span>Jt808Session</span></a></h2><p><code>Jt808Session</code> 的默认实现为 <code>io.github.hylexus.jt.jt808.spec.session.DefaultJt808Session</code>。你也可以根据需求来实现自己的 <code>Jt808Session</code>。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MySession</span> <span class="token keyword">extends</span> <span class="token class-name">DefaultJt808Session</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> someField<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSomeField</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> someField<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSomeField</span><span class="token punctuation">(</span><span class="token class-name">String</span> someField<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>someField <span class="token operator">=</span> someField<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在下面的自定义 <code>Jt808SessionManager</code> 中替换为自定义的 <code>Jt808Session</code>。</p><h2 id="jt808sessionmanager" tabindex="-1"><a class="header-anchor" href="#jt808sessionmanager"><span>Jt808SessionManager</span></a></h2><p>该组件用来管理每个终端的 <code>TCP</code> 连接。</p><p>要定制 <code>Jt808SessionManager</code> 只需自己声明一个 <code>Jt808SessionManager</code> 类型的 <code>Bean</code> 即可。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MySessionManager</span> <span class="token keyword">implements</span> <span class="token class-name">Jt808SessionManager</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">MySessionManager</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MySessionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Jt808SessionManager</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">MySessionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token class-name">MySession</span> <span class="token function">buildSession</span><span class="token punctuation">(</span><span class="token class-name">String</span> terminalId<span class="token punctuation">,</span> <span class="token class-name">Jt808ProtocolVersion</span> version<span class="token punctuation">,</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">MySession</span> session <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MySession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        session<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>
        session<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token function">generateSessionId</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        session<span class="token punctuation">.</span><span class="token function">terminalId</span><span class="token punctuation">(</span>terminalId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        session<span class="token punctuation">.</span><span class="token function">lastCommunicateTimestamp</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        session<span class="token punctuation">.</span><span class="token function">protocolVersion</span><span class="token punctuation">(</span>version<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> key <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token class-name">AttributeKey</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        session<span class="token punctuation">.</span><span class="token function">setSomeField</span><span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token string">&quot;&quot;</span> <span class="token operator">:</span> key<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> session<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 这里替换为自定义的Session</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Jt808Session</span> <span class="token function">generateSession</span><span class="token punctuation">(</span><span class="token class-name">String</span> terminalId<span class="token punctuation">,</span> <span class="token class-name">Jt808ProtocolVersion</span> version<span class="token punctuation">,</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">buildSession</span><span class="token punctuation">(</span>terminalId<span class="token punctuation">,</span> version<span class="token punctuation">,</span> channel<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后将自定义的 <code>Jt808SessionManager</code> 加入到 Spring 容器中就可以替换内置的 <code>Jt808SessionManager</code> 了。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 替换内置的 Jt808SessionManager</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyJt808Config</span> <span class="token punctuation">{</span>

    <span class="token comment">// [[ 非必须配置 ]] -- 替换内置的 Jt808SessionManager</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Jt808SessionManager</span> <span class="token function">jt808SessionManager</span><span class="token punctuation">(</span><span class="token class-name">ObjectProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Jt808SessionManagerEventListener</span><span class="token punctuation">&gt;</span></span> listeners<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">Jt808SessionManager</span> sessionManager <span class="token operator">=</span> <span class="token class-name">MySessionManager</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        listeners<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">OrderedComponent</span><span class="token operator">::</span><span class="token function">getOrder</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>sessionManager<span class="token operator">::</span><span class="token function">addListener</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> sessionManager<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jt808sessioneventlistener" tabindex="-1"><a class="header-anchor" href="#jt808sessioneventlistener"><span>Jt808SessionEventListener</span></a></h2><p><code>Jt808SessionEventListener</code> 会在 <code>Jt808SessionManager</code> 中新增、删除 或 关闭 <code>Jt808Session</code> 时回调。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Jt808SessionEventListener</span> <span class="token keyword">extends</span> <span class="token class-name">OrderedComponent</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Jt808Session</span></span><span class="token punctuation">}</span> 新建事件
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * 注意：该方法中不宜做耗时太长/阻塞的操作！！！
     *
     * <span class="token keyword">@param</span> <span class="token parameter">session</span> 新建的 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Jt808Session</span></span><span class="token punctuation">}</span>
     */</span>
    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">onSessionAdd</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Jt808Session</span> session<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Jt808Session</span></span><span class="token punctuation">}</span> 移除事件
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * 注意：该方法中不宜做耗时太长/阻塞的操作！！！
     *
     * <span class="token keyword">@param</span> <span class="token parameter">session</span> 被移除的 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Jt808Session</span></span><span class="token punctuation">}</span>
     */</span>
    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">onSessionRemove</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Jt808Session</span> session<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Jt808Session</span></span><span class="token punctuation">}</span> 关闭事件
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * 注意：该方法中不宜做耗时太长/阻塞的操作！！！
     *
     * <span class="token keyword">@param</span> <span class="token parameter">session</span>     被关闭的 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Jt808Session</span></span><span class="token punctuation">}</span>
     * <span class="token keyword">@param</span> <span class="token parameter">closeReason</span> 关闭原因
     */</span>
    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">onSessionClose</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Jt808Session</span> session<span class="token punctuation">,</span> <span class="token class-name">SessionCloseReason</span> closeReason<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>想要监听 <code>Jt808Session</code> 事件：</p><ul><li>声明若干个 <code>Jt808SessionEventListener</code> 类型的 <code>Bean</code> 即可</li><li>或者可以直接调用 <code>Jt808SessionManager.addListener(listener)</code> 方法手动注册监听器</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Session事件监听器</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyJt808Config</span> <span class="token punctuation">{</span>
    <span class="token comment">// [[ 非必须配置 ]] -- Session事件监听器 (可以有多个)</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Jt808SessionEventListener</span> <span class="token function">listener1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyJt808SessionEventListener01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// [[ 非必须配置 ]] -- Session事件监听器 (可以有多个)</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Jt808SessionEventListener</span> <span class="token function">listener2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyJt808SessionEventListener02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jt808flowidgenerator" tabindex="-1"><a class="header-anchor" href="#jt808flowidgenerator"><span>Jt808FlowIdGenerator</span></a></h2><p><code>Jt808FlowIdGenerator</code> 用来生成流水号。要自定义 <strong>流水号的生成策略</strong>，只需声明一个 <code>Jt808FlowIdGeneratorFactory</code> 类型的 <code>Bean</code> 即可。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Jt808FlowIdGenerator</span> <span class="token punctuation">{</span>

    <span class="token keyword">int</span> <span class="token constant">MAX_FLOW_ID</span> <span class="token operator">=</span> <span class="token number">0xffff</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@param</span> <span class="token parameter">increment</span> 一次性(连续不间断)递增 <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">increment</span></span><span class="token punctuation">}</span> 个序列号
     * <span class="token keyword">@return</span> 当前流水号
     */</span>
    <span class="token keyword">int</span> <span class="token function">flowId</span><span class="token punctuation">(</span><span class="token keyword">int</span> increment<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@param</span> <span class="token parameter">count</span> 流水号个数
     * <span class="token keyword">@return</span> 一批连续递增的流水号
     */</span>
    <span class="token keyword">default</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">flowIds</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> last <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">flowId</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ids <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ids<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> last<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> ids<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@return</span> 当前流水号(不会自增)
     */</span>
    <span class="token keyword">default</span> <span class="token keyword">int</span> <span class="token function">currentFlowId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">flowId</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@return</span> 下一个流水号
     * <span class="token keyword">@see</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">flowId</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span></span>
     */</span>
    <span class="token keyword">default</span> <span class="token keyword">int</span> <span class="token function">nextFlowId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">flowId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>替换 <code>Jt808FlowIdGeneratorFactory</code> 来控制流水号生成策略：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 替换流水号生成策略</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyJt808Config</span> <span class="token punctuation">{</span>
    <span class="token comment">// [[ 非必须配置 ]] -- 替换流水号生成策略</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Jt808FlowIdGeneratorFactory</span> <span class="token function">jt808FlowIdGeneratorFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Jt808FlowIdGeneratorFactory<span class="token punctuation">.</span>DefaultJt808FlowIdGeneratorFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22),o=[p];function c(i,l){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","session-config.html.vue"]]),r=JSON.parse('{"path":"/v2/jt-808/guide/customization/session-config.html","title":"Session相关","lang":"zh-CN","frontmatter":{"icon":"token","description":"Session相关 Jt808Session Jt808Session 的默认实现为 io.github.hylexus.jt.jt808.spec.session.DefaultJt808Session。你也可以根据需求来实现自己的 Jt808Session。 然后在下面的自定义 Jt808SessionManager 中替换为自定义的 Jt808S...","head":[["meta",{"property":"og:url","content":"https://github.com/hylexus/jt-framework/jt-framework/v2/jt-808/guide/customization/session-config.html"}],["meta",{"property":"og:site_name","content":"jt-framework"}],["meta",{"property":"og:title","content":"Session相关"}],["meta",{"property":"og:description","content":"Session相关 Jt808Session Jt808Session 的默认实现为 io.github.hylexus.jt.jt808.spec.session.DefaultJt808Session。你也可以根据需求来实现自己的 Jt808Session。 然后在下面的自定义 Jt808SessionManager 中替换为自定义的 Jt808S..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-12-23T16:14:45.000Z"}],["meta",{"property":"article:author","content":"hylexus"}],["meta",{"property":"article:modified_time","content":"2022-12-23T16:14:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Session相关\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-12-23T16:14:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"hylexus\\",\\"url\\":\\"https://github.com/hylexus\\"}]}"]]},"headers":[{"level":2,"title":"Jt808Session","slug":"jt808session","link":"#jt808session","children":[]},{"level":2,"title":"Jt808SessionManager","slug":"jt808sessionmanager","link":"#jt808sessionmanager","children":[]},{"level":2,"title":"Jt808SessionEventListener","slug":"jt808sessioneventlistener","link":"#jt808sessioneventlistener","children":[]},{"level":2,"title":"Jt808FlowIdGenerator","slug":"jt808flowidgenerator","link":"#jt808flowidgenerator","children":[]}],"git":{"createdTime":1671812085000,"updatedTime":1671812085000,"contributors":[{"name":"hylexus","email":"hylexus@163.com","commits":1}]},"readingTime":{"minutes":2.4,"words":719},"filePathRelative":"v2/jt-808/guide/customization/session-config.md","localizedDate":"2022年12月24日","autoDesc":true,"excerpt":"\\n<h2>Jt808Session</h2>\\n<p><code>Jt808Session</code> 的默认实现为 <code>io.github.hylexus.jt.jt808.spec.session.DefaultJt808Session</code>。你也可以根据需求来实现自己的 <code>Jt808Session</code>。</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">MySession</span> <span class=\\"token keyword\\">extends</span> <span class=\\"token class-name\\">DefaultJt808Session</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">String</span> someField<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">String</span> <span class=\\"token function\\">getSomeField</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> someField<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">setSomeField</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> someField<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>someField <span class=\\"token operator\\">=</span> someField<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>"}');export{k as comp,r as data};
