import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as i,c as u,b as n,d as s,e,w as d,a as t}from"./app-BEQS3wW-.js";const r={},k=n("h1",{id:"位置上传报文解析示例",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#位置上传报文解析示例"},[n("span",null,"位置上传报文解析示例")])],-1),v={class:"hint-container tip"},m=n("p",{class:"hint-container-title"},"传送门",-1),b={href:"https://github.com/hylexus/jt-framework/tree/master/samples/jt-808-server-sample-bare",target:"_blank",rel:"noopener noreferrer"},g=t('<div class="hint-container tip"><p class="hint-container-title">提示</p><p>本节将以位置上传报文为例，展示如何基于注解来解析报文。</p></div><div class="hint-container caution"><p class="hint-container-title">注意</p><ul><li>808文档中定义的位置上传报文有很多字段，<strong><code>但是</code></strong> 许多厂商实现的808协议位置上传报文 <code>只是原始808的一个子集</code> 。</li><li>本文举例用到的报文也 <code>不是标准完整的位置上传报文</code>，但是原理都一样。</li><li>请谅解本文用到的 <code>被具体厂商精简过的文档</code> 不便全部展示出来，但是关键部分会截图展示，不会影响到你阅读本示例。</li></ul></div><h2 id="十六进制报文" tabindex="-1"><a class="header-anchor" href="#十六进制报文"><span>十六进制报文</span></a></h2>',3),h={class:"hint-container warning"},y=n("p",{class:"hint-container-title"},"注意",-1),x=n("li",null,"这个报文格式可能和你使用的有所不同，请加以区分！！！",-1),w=n("code",null,"十六进制格式",-1),_=t(`<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>7E0200004A76890100562600AD000000000000000201DCF7F6074054C1000000000000200128080934300164310100E10400000030E2020000E306005E019A019AE40B01CC000018A20000480264E5045E04019AE601A2637E
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="解析位置基本信息" tabindex="-1"><a class="header-anchor" href="#解析位置基本信息"><span>解析位置基本信息</span></a></h2>`,2),f={class:"demo"},I=["src"],F=["src"],B=t(`<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Jt808ReqMsgBody</span><span class="token punctuation">(</span>msgType <span class="token operator">=</span> <span class="token number">0x0200</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocationUploadMsgBody</span> <span class="token keyword">implements</span> <span class="token class-name">RequestMsgBody</span> <span class="token punctuation">{</span>

    <span class="token comment">// 报警标志</span>
    <span class="token annotation punctuation">@BasicField</span><span class="token punctuation">(</span>startIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token constant">DWORD</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> alarmFlag<span class="token punctuation">;</span>

    <span class="token comment">// 状态</span>
    <span class="token annotation punctuation">@BasicField</span><span class="token punctuation">(</span>startIndex <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token constant">DWORD</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> status<span class="token punctuation">;</span>

    <span class="token comment">// 将上面的 status 字段的第0位取出转为 int 类型</span>
    <span class="token annotation punctuation">@SlicedFrom</span><span class="token punctuation">(</span>sourceFieldName <span class="token operator">=</span> <span class="token string">&quot;status&quot;</span><span class="token punctuation">,</span> bitIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> accIntStatus<span class="token punctuation">;</span>

    <span class="token comment">// 将上面的 status 字段的第0位取出转为 boolean 类型</span>
    <span class="token annotation punctuation">@SlicedFrom</span><span class="token punctuation">(</span>sourceFieldName <span class="token operator">=</span> <span class="token string">&quot;status&quot;</span><span class="token punctuation">,</span> bitIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> accBooleanStatus<span class="token punctuation">;</span>

    <span class="token comment">// 0 北纬;1 南纬</span>
    <span class="token comment">// 将上面的 status 字段的第2位取出转为 int 类型</span>
    <span class="token annotation punctuation">@SlicedFrom</span><span class="token punctuation">(</span>sourceFieldName <span class="token operator">=</span> <span class="token string">&quot;status&quot;</span><span class="token punctuation">,</span> bitIndex <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> latType<span class="token punctuation">;</span>

    <span class="token comment">// 纬度(尚未除以 10^6)</span>
    <span class="token annotation punctuation">@BasicField</span><span class="token punctuation">(</span>startIndex <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token constant">DWORD</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> intLat<span class="token punctuation">;</span>
    <span class="token comment">// 纬度(使用转换器除以10^6转为Double类型)</span>
    <span class="token annotation punctuation">@BasicField</span><span class="token punctuation">(</span>startIndex <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token constant">DWORD</span><span class="token punctuation">,</span> customerDataTypeConverterClass <span class="token operator">=</span> <span class="token class-name">LngLatReqMsgFieldConverter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Double</span> lat<span class="token punctuation">;</span>
    
    <span class="token comment">// 经度(尚未除以 10^6)</span>
    <span class="token annotation punctuation">@BasicField</span><span class="token punctuation">(</span>startIndex <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token constant">DWORD</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> intLng<span class="token punctuation">;</span>
    <span class="token comment">// 经度(使用转换器除以10^6转为Double类型)</span>
    <span class="token annotation punctuation">@BasicField</span><span class="token punctuation">(</span>startIndex <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token constant">DWORD</span><span class="token punctuation">,</span> customerDataTypeConverterClass <span class="token operator">=</span> <span class="token class-name">LngLatReqMsgFieldConverter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Double</span> lng<span class="token punctuation">;</span>

    <span class="token comment">// 经度(startIndexMethod使用示例)</span>
    <span class="token annotation punctuation">@BasicField</span><span class="token punctuation">(</span>startIndexMethod <span class="token operator">=</span> <span class="token string">&quot;getLngStartIndex&quot;</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token constant">DWORD</span><span class="token punctuation">,</span> customerDataTypeConverterClass <span class="token operator">=</span> <span class="token class-name">LngLatReqMsgFieldConverter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Double</span> lngByStartIndexMethod<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getLngStartIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;消息体总长度:{}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>requestMsgMetadata<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMsgBodyLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">12</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 高度</span>
    <span class="token annotation punctuation">@BasicField</span><span class="token punctuation">(</span>startIndex <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token constant">WORD</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> height<span class="token punctuation">;</span>

    <span class="token comment">// 速度</span>
    <span class="token annotation punctuation">@BasicField</span><span class="token punctuation">(</span>startIndex <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token constant">WORD</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> speed<span class="token punctuation">;</span>

    <span class="token comment">// 方向</span>
    <span class="token annotation punctuation">@BasicField</span><span class="token punctuation">(</span>startIndex <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token constant">WORD</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> direction<span class="token punctuation">;</span>
    
    <span class="token comment">// BCD 长度6字节</span>
    <span class="token comment">// 时间 yyMMddHHmmss</span>
    <span class="token comment">// 200128080934 &#39;2020-01-28 08:09:34&#39;</span>
    <span class="token annotation punctuation">@BasicField</span><span class="token punctuation">(</span>startIndex <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token constant">BCD</span><span class="token punctuation">,</span> length <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> time<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过以下截图，可能会对映射关系更清晰一些：</p>`,2),j={class:"demo"},D=["src"],T=n("h2",{id:"关于status字段的解析",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#关于status字段的解析"},[n("span",null,"关于status字段的解析")])],-1),E={class:"demo"},S=["src"],L=t(`<p>status字段是由消息体中第4~7个字节表示的，类型为 <code>DWORD</code>。对应到Java中为 <code>无符号四字节整型</code> 。你可以将其映射为 <code>int</code> 或 <code>Integer</code> 。</p><p>所以至少有以下几种解析方式：</p><h3 id="_1-手动解析" tabindex="-1"><a class="header-anchor" href="#_1-手动解析"><span>1.手动解析</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@BasicField</span><span class="token punctuation">(</span>startIndex <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token constant">BYTES</span><span class="token punctuation">,</span> length <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> statusBytes<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>代码段中的 <code>statusBytes</code> 就是消息体中第4~7个字节，然后你可以将字节数组手动转换到 <code>int</code> 。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> status <span class="token operator">=</span> <span class="token class-name">IntBitOps</span><span class="token punctuation">.</span><span class="token function">intFrom4Bytes</span><span class="token punctuation">(</span>statusBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>之后，你可以根据文档中表17的定义将 <code>int</code> 中对应的 <code>bit</code> 提取出来。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// status的第0位--&gt;Acc开关 --&gt; 0:关; 1:开</span>
<span class="token keyword">int</span> accStatus <span class="token operator">=</span> <span class="token class-name">Numbers</span><span class="token punctuation">.</span><span class="token function">getBitAt</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// status的第3位 --&gt; 0:东经; 1:西经</span>
<span class="token keyword">int</span> lngType <span class="token operator">=</span> <span class="token class-name">Numbers</span><span class="token punctuation">.</span><span class="token function">getBitAt</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-使用-slicedfrom解析" tabindex="-1"><a class="header-anchor" href="#_2-使用-slicedfrom解析"><span>2.使用@SlicedFrom解析</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 消息体中第4~7个字节 --&gt; int</span>
<span class="token annotation punctuation">@BasicField</span><span class="token punctuation">(</span>startIndex <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token constant">DWORD</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> status<span class="token punctuation">;</span>

<span class="token comment">// 将上面的 status 字段的第0位取出转为 int 类型</span>
<span class="token annotation punctuation">@SlicedFrom</span><span class="token punctuation">(</span>sourceFieldName <span class="token operator">=</span> <span class="token string">&quot;status&quot;</span><span class="token punctuation">,</span> bitIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> accIntStatus<span class="token punctuation">;</span>

<span class="token comment">// 将上面的 status 字段的第0位取出转为 boolean 类型</span>
<span class="token annotation punctuation">@SlicedFrom</span><span class="token punctuation">(</span>sourceFieldName <span class="token operator">=</span> <span class="token string">&quot;status&quot;</span><span class="token punctuation">,</span> bitIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">Boolean</span> accBooleanStatus<span class="token punctuation">;</span>

<span class="token comment">// 0 北纬;1 南纬</span>
<span class="token comment">// 将上面的 status 字段的第2位取出转为 int 类型</span>
<span class="token annotation punctuation">@SlicedFrom</span><span class="token punctuation">(</span>sourceFieldName <span class="token operator">=</span> <span class="token string">&quot;status&quot;</span><span class="token punctuation">,</span> bitIndex <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> latType<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-使用-splittablefield解析" tabindex="-1"><a class="header-anchor" href="#_3-使用-splittablefield解析"><span>3.使用@SplittableField解析</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Jt808ReqMsgBody</span><span class="token punctuation">(</span>msgType <span class="token operator">=</span> <span class="token number">0x0200</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocationUploadMsgBody</span> <span class="token keyword">implements</span> <span class="token class-name">RequestMsgBody</span> <span class="token punctuation">{</span>
    <span class="token comment">// 状态</span>
    <span class="token annotation punctuation">@BasicField</span><span class="token punctuation">(</span>startIndex <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token constant">DWORD</span><span class="token punctuation">)</span>
    <span class="token comment">// 将status字段拆分之后放入statusInfo字段</span>
    <span class="token comment">// 该注解只能用户数字</span>
    <span class="token annotation punctuation">@SplittableField</span><span class="token punctuation">(</span>splitPropertyValueIntoNestedBeanField <span class="token operator">=</span> <span class="token string">&quot;statusInfo&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> status<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">LocationUploadStatus</span> statusInfo<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Data</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">LocationUploadStatus</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@SplittableField.BitAt</span><span class="token punctuation">(</span>bitIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">private</span> <span class="token keyword">boolean</span> accStatus<span class="token punctuation">;</span> <span class="token comment">// acc开?</span>
        <span class="token annotation punctuation">@SplittableField.BitAt</span><span class="token punctuation">(</span>bitIndex <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">private</span> <span class="token keyword">int</span> bit1<span class="token punctuation">;</span> <span class="token comment">//1:定位, 0:未定义</span>
        <span class="token annotation punctuation">@SplittableField.BitAt</span><span class="token punctuation">(</span>bitIndex <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token keyword">private</span> <span class="token class-name">Boolean</span> isSouthLat<span class="token punctuation">;</span><span class="token comment">// 是否南纬?</span>
        <span class="token annotation punctuation">@SplittableField.BitAt</span><span class="token punctuation">(</span>bitIndex <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span>
        <span class="token keyword">private</span> <span class="token class-name">Integer</span> lngType<span class="token punctuation">;</span>
        <span class="token comment">// 将第0位和第1位同时取出并转为int</span>
        <span class="token comment">// 在此处无实际意义,只是演示可以这么使用</span>
        <span class="token annotation punctuation">@SplittableField.BitAtRange</span><span class="token punctuation">(</span>startIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> endIndex <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">private</span> <span class="token keyword">int</span> bit0to1<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="关于经纬度的解析" tabindex="-1"><a class="header-anchor" href="#关于经纬度的解析"><span>关于经纬度的解析</span></a></h2><p>808文档中的经纬度定义为 <code>DWORD</code> 类型，以度位单位的纬度值 <code>乘以10的6次方</code> ，精确到百万分之一度</p><h3 id="_1-解析为4字节的int" tabindex="-1"><a class="header-anchor" href="#_1-解析为4字节的int"><span>1. 解析为4字节的int</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 纬度(尚未除以 10^6)</span>
<span class="token annotation punctuation">@BasicField</span><span class="token punctuation">(</span>startIndex <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token constant">DWORD</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">Integer</span> intLat<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>本示例中结果为 <code>31258614</code>。</p><p>也就是说，接收到的字节数组中的表示经纬度的 <code>4个字节</code> 应该先转换为数字(int即可)，然后再 <code>除以10^6</code> 即为真实的经纬度，可以用 <code>Double</code> 表示。</p><h3 id="_2-解析为double" tabindex="-1"><a class="header-anchor" href="#_2-解析为double"><span>2. 解析为double</span></a></h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>但是，本框架并不支持直接从 <code>byte[]</code> 到 <code>double</code> 的转换。此时可以使用自定义的类型转换器。</p></div><ul><li>自定义转换器</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LngLatReqMsgFieldConverter</span> <span class="token keyword">implements</span> <span class="token class-name">ReqMsgFieldConverter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Double</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> subSeq<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">IntBitOps</span><span class="token punctuation">.</span><span class="token function">intFromBytes</span><span class="token punctuation">(</span>subSeq<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> subSeq<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">100_0000</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>然后指定 <code>customerDataTypeConverterClass</code> 即可</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 纬度(使用转换器除以10^6转为Double类型)</span>
<span class="token annotation punctuation">@BasicField</span><span class="token punctuation">(</span>startIndex <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token constant">DWORD</span><span class="token punctuation">,</span> customerDataTypeConverterClass <span class="token operator">=</span> <span class="token class-name">LngLatReqMsgFieldConverter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">Double</span> lat<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="关于位置附加项的解析" tabindex="-1"><a class="header-anchor" href="#关于位置附加项的解析"><span>关于位置附加项的解析</span></a></h2>`,25),q={class:"demo"},M=["src"],R=t(`<p>根据文档，从消息体的 <code>第28个字节开始</code> 就是附加项列表了。</p><p>还好附加项报文的格式也是有迹可循的：</p><ul><li>整体是一个 <code>List</code> 结构，暂且将 <code>List</code> 的每一个元素称之为 <code>Item</code></li><li>每个 <code>Item</code> 内部结构也是一致的 <ul><li><code>Id (byte)</code></li><li><code>length (byte)</code></li><li><code>content (类型不固定)</code></li></ul></li><li>但是如果将这个附加项解析为一个 <code>List</code> 的话 <ul><li>个人感觉取值不是很方便，另外如果附加项内部有嵌套的时候也不好处理</li><li>所以额外提供了一个 <code>@ExtraField</code> 注解来映射为一个可嵌套的实体</li><li>有得必有失，这样一来，有多少个附加项就要定义多少个字段，比较繁琐</li></ul></li></ul><h3 id="使用-basicfield解析" tabindex="-1"><a class="header-anchor" href="#使用-basicfield解析"><span>使用@BasicField解析</span></a></h3><p>由于附加项的类型不固定，仅仅用一个类是无法定义确切类型。<br> 所以，此处的内容自动定义成了<code>byte[]</code>。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExtraInfoItem</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@BasicField</span><span class="token punctuation">(</span>startIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token constant">BYTE</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@BasicField</span><span class="token punctuation">(</span>order <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> startIndex <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token constant">BYTE</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> length<span class="token punctuation">;</span>

    <span class="token comment">// 类型不固定 仅仅用一个类无法定义确切类型</span>
    <span class="token annotation punctuation">@BasicField</span><span class="token punctuation">(</span>order <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> startIndex <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token constant">BYTES</span><span class="token punctuation">,</span> byteCountMethod <span class="token operator">=</span> <span class="token string">&quot;getLength&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rawBytes<span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@BasicField</span><span class="token punctuation">(</span>startIndex <span class="token operator">=</span> <span class="token number">28</span><span class="token punctuation">,</span>byteCountMethod <span class="token operator">=</span> <span class="token string">&quot;getExtraInfoLength&quot;</span><span class="token punctuation">,</span>dataType <span class="token operator">=</span> <span class="token constant">LIST</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ExtraInfoItem</span><span class="token punctuation">&gt;</span></span> extraInfoItemList<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用-extrafield解析" tabindex="-1"><a class="header-anchor" href="#使用-extrafield解析"><span>使用@ExtraField解析</span></a></h3>`,8),C={class:"demo"},N=["src"],O=t(`<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token comment">// 切记@ExtraMsgBody注解不能丢</span>
<span class="token annotation punctuation">@ExtraMsgBody</span><span class="token punctuation">(</span>
        byteCountOfMsgId <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 消息Id用1个字节表示</span>
        byteCountOfContentLength <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">// 附加项长度字段用1个字节表示</span>
<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExtraInfo</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@ExtraField.NestedFieldMapping</span><span class="token punctuation">(</span>msgId <span class="token operator">=</span> <span class="token number">0x30</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token constant">BYTE</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> field0x30<span class="token punctuation">;</span>
    
    <span class="token comment">// 这里写成List仅仅为了示例，在msgId重复时可以使用List类型</span>
    <span class="token annotation punctuation">@ExtraField.NestedFieldMapping</span><span class="token punctuation">(</span>msgId <span class="token operator">=</span> <span class="token number">0x0001</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token constant">LIST</span><span class="token punctuation">,</span> itemDataType <span class="token operator">=</span> <span class="token constant">DWORD</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> field0x0001<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@ExtraField.NestedFieldMapping</span><span class="token punctuation">(</span>msgId <span class="token operator">=</span> <span class="token number">0x31</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token constant">BYTE</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> field0x31<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@ExtraField.NestedFieldMapping</span><span class="token punctuation">(</span>msgId <span class="token operator">=</span> <span class="token number">0xe1</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token constant">DWORD</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> field0xe1<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@ExtraField.NestedFieldMapping</span><span class="token punctuation">(</span>msgId <span class="token operator">=</span> <span class="token number">0xE4</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token constant">BYTES</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> field0xe4<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@ExtraField.NestedFieldMapping</span><span class="token punctuation">(</span>msgId <span class="token operator">=</span> <span class="token number">0xE5</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token constant">DWORD</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> field0xe5<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@ExtraField.NestedFieldMapping</span><span class="token punctuation">(</span>msgId <span class="token operator">=</span> <span class="token number">0xE6</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token constant">BYTE</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">byte</span> field0xe6<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>0xE2</code> 锁状态字段的说明</li></ul>`,2),W={class:"demo"},A=["src"],Y=t(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>示例文档中并没涉及到附加项嵌套的情况，但是这种情况在原始808文档中确实是存在的。</p><p>如果有嵌套的附加项，可以用类似如下的方式去嵌套解析：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ExtraField.NestedFieldMapping</span><span class="token punctuation">(</span>msgId <span class="token operator">=</span> xx<span class="token punctuation">,</span> isNestedExtraField <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">SomeClass</span> nestedField<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></div>`,1),$={class:"hint-container tip"},V=n("p",{class:"hint-container-title"},"传送门",-1),J={href:"https://github.com/hylexus/jt-framework/tree/master/samples/jt-808-server-sample-bare",target:"_blank",rel:"noopener noreferrer"};function P(a,U){const p=o("ExternalLinkIcon"),c=o("RouteLink");return i(),u("div",null,[k,n("div",v,[m,n("p",null,[s("本小节的示例可以在 "),n("a",b,[s("samples/jt-808-server-sample-annotation"),e(p)]),s(" 下找到对应代码。")])]),g,n("div",h,[y,n("ul",null,[x,n("li",null,[s("如何以 "),w,s(" 发包请移步 "),e(c,{to:"/v1/jt-808/guide/annotation-based-dev/src/v1/jt-808/guide/FAQ/debug.html"},{default:d(()=>[s("推荐调试工具")]),_:1})])])]),_,n("p",f,[n("img",{src:a.$withBase("/img/doc-img/0102-001.png"),alt:"精简版位置报文"},null,8,I),n("img",{src:a.$withBase("/img/doc-img/0102-002.png"),alt:"精简版位置报文"},null,8,F)]),B,n("p",j,[n("img",{src:a.$withBase("/img/doc-img/location-msg-debug.png")},null,8,D)]),T,n("p",E,[n("img",{src:a.$withBase("/img/doc-img/0102-002.png"),alt:"精简版位置报文"},null,8,S)]),L,n("p",q,[n("img",{src:a.$withBase("/img/doc-img/0102-003.png"),alt:"精简版位置报文"},null,8,M)]),R,n("p",C,[n("img",{src:a.$withBase("/img/doc-img/0102-004.png"),alt:"精简版位置报文"},null,8,N)]),O,n("p",W,[n("img",{src:a.$withBase("/img/doc-img/0102-005.png"),alt:"精简版位置报文"},null,8,A)]),Y,n("div",$,[V,n("p",null,[s("本小节的示例可以在 "),n("a",J,[s("samples/jt-808-server-sample-annotation"),e(p)]),s(" 下找到对应代码。")])])])}const Z=l(r,[["render",P],["__file","location-msg-parse-demo.html.vue"]]),Q=JSON.parse('{"path":"/v1/jt-808/guide/annotation-based-dev/location-msg-parse-demo.html","title":"位置上传报文解析示例","lang":"zh-CN","frontmatter":{"headerDepth":3,"description":"位置上传报文解析示例 传送门 本小节的示例可以在 samples/jt-808-server-sample-annotation 下找到对应代码。 提示 本节将以位置上传报文为例，展示如何基于注解来解析报文。 注意 808文档中定义的位置上传报文有很多字段，但是 许多厂商实现的808协议位置上传报文 只是原始808的一个子集 。 本文举例用到的报文也 ...","head":[["meta",{"property":"og:url","content":"https://github.com/hylexus/jt-framework/jt-framework/v1/jt-808/guide/annotation-based-dev/location-msg-parse-demo.html"}],["meta",{"property":"og:site_name","content":"jt-framework"}],["meta",{"property":"og:title","content":"位置上传报文解析示例"}],["meta",{"property":"og:description","content":"位置上传报文解析示例 传送门 本小节的示例可以在 samples/jt-808-server-sample-annotation 下找到对应代码。 提示 本节将以位置上传报文为例，展示如何基于注解来解析报文。 注意 808文档中定义的位置上传报文有很多字段，但是 许多厂商实现的808协议位置上传报文 只是原始808的一个子集 。 本文举例用到的报文也 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-03T08:03:24.000Z"}],["meta",{"property":"article:author","content":"hylexus"}],["meta",{"property":"article:modified_time","content":"2023-07-03T08:03:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"位置上传报文解析示例\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-07-03T08:03:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"hylexus\\",\\"url\\":\\"https://github.com/hylexus\\"}]}"]]},"headers":[{"level":2,"title":"十六进制报文","slug":"十六进制报文","link":"#十六进制报文","children":[]},{"level":2,"title":"解析位置基本信息","slug":"解析位置基本信息","link":"#解析位置基本信息","children":[]},{"level":2,"title":"关于status字段的解析","slug":"关于status字段的解析","link":"#关于status字段的解析","children":[{"level":3,"title":"1.手动解析","slug":"_1-手动解析","link":"#_1-手动解析","children":[]},{"level":3,"title":"2.使用@SlicedFrom解析","slug":"_2-使用-slicedfrom解析","link":"#_2-使用-slicedfrom解析","children":[]},{"level":3,"title":"3.使用@SplittableField解析","slug":"_3-使用-splittablefield解析","link":"#_3-使用-splittablefield解析","children":[]}]},{"level":2,"title":"关于经纬度的解析","slug":"关于经纬度的解析","link":"#关于经纬度的解析","children":[{"level":3,"title":"1. 解析为4字节的int","slug":"_1-解析为4字节的int","link":"#_1-解析为4字节的int","children":[]},{"level":3,"title":"2. 解析为double","slug":"_2-解析为double","link":"#_2-解析为double","children":[]}]},{"level":2,"title":"关于位置附加项的解析","slug":"关于位置附加项的解析","link":"#关于位置附加项的解析","children":[{"level":3,"title":"使用@BasicField解析","slug":"使用-basicfield解析","link":"#使用-basicfield解析","children":[]},{"level":3,"title":"使用@ExtraField解析","slug":"使用-extrafield解析","link":"#使用-extrafield解析","children":[]}]}],"git":{"createdTime":1671812085000,"updatedTime":1688371404000,"contributors":[{"name":"eric","email":"dferic@foxmail.com","commits":1},{"name":"hylexus","email":"hylexus@163.com","commits":1}]},"readingTime":{"minutes":6.47,"words":1942},"filePathRelative":"v1/jt-808/guide/annotation-based-dev/location-msg-parse-demo.md","localizedDate":"2022年12月24日","autoDesc":true,"excerpt":"\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">传送门</p>\\n<p>本小节的示例可以在 <a href=\\"https://github.com/hylexus/jt-framework/tree/master/samples/jt-808-server-sample-bare\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">samples/jt-808-server-sample-annotation</a> 下找到对应代码。</p>\\n</div>\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p>本节将以位置上传报文为例，展示如何基于注解来解析报文。</p>\\n</div>"}');export{Z as comp,Q as data};
