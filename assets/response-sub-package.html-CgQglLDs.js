import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as u,c as r,e as k,w as a,b as n,a as o,d as s}from"./app-BEQS3wW-.js";const d={},m=o(`<h1 id="响应消息分包" tabindex="-1"><a class="header-anchor" href="#响应消息分包"><span>响应消息分包</span></a></h1><h2 id="分包方式" tabindex="-1"><a class="header-anchor" href="#分包方式"><span>分包方式</span></a></h2><p><code>Jt808MsgEncoder</code> 的默认实现类 <code>DefaultJt808MsgEncoder</code> 会将较大的消息自动分包，分包的阈值可以手动指定。 默认值是 <code>1024</code> 字节。</p><p>也就是说：<code>DefaultJt808MsgEncoder</code> 在编码消息时(<strong>转义之前</strong>)，发现消息包的大小超过了<strong>阈值</strong>，会自动将消息分包发送给客户端。</p><p>内置的支持自动分包的返回类型有两种: <code>Jt808Response</code> 和被 <code>@Jt808ResponseBody</code> 标记的类型。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>可以将 <code>jt-808.response.encoder</code> 日志的级别调整为 <code>debug</code> 级别，这样就可以看到分包消息的详情了：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">logging</span><span class="token punctuation">:</span>
  <span class="token comment"># 编码器日志</span>
  <span class="token key atrule">level.jt-808.response.encoder</span><span class="token punctuation">:</span> debug
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="jt808response" tabindex="-1"><a class="header-anchor" href="#jt808response"><span>Jt808Response</span></a></h3><p><code>Jt808Response</code> 有个属性 <code>maxPackageSize</code> 用来控制单个消息包的最大大小。默认 <strong>1024</strong> 字节。</p><p>如果响应消息的大小(<strong>转义之前</strong>)超过 <code>maxPackageSize()</code> 的阈值，会自动将消息拆分为多个子包发送。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Jt808Response</span> <span class="token keyword">extends</span> <span class="token class-name">Jt808ByteWriter</span> <span class="token punctuation">{</span>

    <span class="token keyword">int</span> <span class="token constant">DEFAULT_MAX_PACKAGE_SIZE</span> <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 响应消息大小超过该值(默认 <span class="token punctuation">{</span><span class="token keyword">@value</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">DEFAULT_MAX_PACKAGE_SIZE</span></span><span class="token punctuation">}</span>)会自动分包发送(转义之前)
     *
     * <span class="token keyword">@return</span> 响应消息最大字节数
     */</span>
    <span class="token keyword">default</span> <span class="token keyword">int</span> <span class="token function">maxPackageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">DEFAULT_MAX_PACKAGE_SIZE</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 指定单个消息包的最大大小(转义之前)
     *
     * <span class="token keyword">@param</span> <span class="token parameter">size</span> 消息包最大大小
     * <span class="token keyword">@return</span> 单个消息包的最大大小
     */</span>
    <span class="token class-name">Jt808Response</span> <span class="token function">maxPackageSize</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="jt808responsebody" tabindex="-1"><a class="header-anchor" href="#jt808responsebody"><span>@Jt808ResponseBody</span></a></h3><p><code>@Jt808ResponseBody</code> 注解也有个 <code>maxPackageSize</code> 属性用来控制单个消息包的最大大小(<strong>转义之前</strong>)。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Jt808ResponseBody</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@return</span> 单个消息包的最大字节数, 超过该值会自动分包发送
     * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">Jt808Response</span><span class="token punctuation">#</span><span class="token field">DEFAULT_MAX_PACKAGE_SIZE</span></span>
     * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">Jt808Response</span><span class="token punctuation">#</span><span class="token function">maxPackageSize</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span></span>
     */</span>
    <span class="token keyword">int</span> <span class="token function">maxPackageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">Jt808Response</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_MAX_PACKAGE_SIZE</span><span class="token punctuation">;</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3>`,14),v=n("div",{class:"language-java line-numbers-mode","data-ext":"java","data-title":"java"},[n("pre",{class:"language-java"},[n("code",null,[s(`
`),n("span",{class:"token annotation punctuation"},"@Slf4j"),s(`
`),n("span",{class:"token annotation punctuation"},"@Component"),s(`
`),n("span",{class:"token annotation punctuation"},"@Jt808RequestHandler"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"CommonHandler"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token comment"},"// terminalId: 013912344329"),s(`
    `),n("span",{class:"token comment"},"// 7E010040560100000000013912344329007B000B00026964393837363534333231747970653030313233343536373831323334353637383837363534333231494"),s(`
    `),n("span",{class:"token comment"},"// 43030303031323334353637383132333435363738383736353433323101B8CA4A2D313233343539257E"),s(`
    `),n("span",{class:"token annotation punctuation"},"@Jt808RequestHandlerMapping"),n("span",{class:"token punctuation"},"("),s("msgType "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0x0100"),n("span",{class:"token punctuation"},","),s(" versions "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token constant"},"VERSION_2019"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"TerminalRegisterReplyMsg"),s(),n("span",{class:"token function"},"clientRegisterV2019"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Jt808RequestEntity"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"BuiltinMsg0100V2019"),n("span",{class:"token punctuation"},">")]),s(" request"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"final"),s(),n("span",{class:"token class-name"},"BuiltinMsg0100V2019"),s(" body "),n("span",{class:"token operator"},"="),s(" request"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"body"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        log`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"info"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"client register v2019 : {}"'),n("span",{class:"token punctuation"},","),s(" body"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"TerminalRegisterReplyMsg"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setFlowId"),n("span",{class:"token punctuation"},"("),s("request"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"flowId"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setResult"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"byte"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setAuthCode"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"AuthCode2019----"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token annotation punctuation"},"@Data"),s(`
    `),n("span",{class:"token annotation punctuation"},"@Accessors"),n("span",{class:"token punctuation"},"("),s("chain "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token comment"},"// 这里用来测试分包消息(指定单个消息包最大大小为33字节)"),s(`
    `),n("span",{class:"token annotation punctuation"},"@Jt808ResponseBody"),n("span",{class:"token punctuation"},"("),s("msgId "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0x8100"),n("span",{class:"token punctuation"},","),s(" maxPackageSize "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"33"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"TerminalRegisterReplyMsg"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// 1. byte[0,2) WORD 对应的终端注册消息的流水号"),s(`
        `),n("span",{class:"token annotation punctuation"},"@ResponseField"),n("span",{class:"token punctuation"},"("),s("order "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(" dataType "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"MsgDataType"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"WORD"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token keyword"},"int"),s(" flowId"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token comment"},"// 2. byte[2,3) BYTE 0:成功;1:车辆已被注册;2:数据库中无该车辆; 3:终端已被注册;4:数据库中无该终端"),s(`
        `),n("span",{class:"token annotation punctuation"},"@ResponseField"),n("span",{class:"token punctuation"},"("),s("order "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(" dataType "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"MsgDataType"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"BYTE"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token keyword"},"byte"),s(" result"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token comment"},"// 3. byte[3,x) STRING 鉴权码(只有在成功后才有该字段)"),s(`
        `),n("span",{class:"token annotation punctuation"},"@ResponseField"),n("span",{class:"token punctuation"},"("),s("order "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},","),s(" dataType "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"MsgDataType"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"STRING"),n("span",{class:"token punctuation"},","),s(" conditionalOn "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"result == 0"'),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"String"),s(" authCode"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),b=n("div",{class:"language-java line-numbers-mode","data-ext":"java","data-title":"java"},[n("pre",{class:"language-java"},[n("code",null,[s(`
`),n("span",{class:"token annotation punctuation"},"@Slf4j"),s(`
`),n("span",{class:"token annotation punctuation"},"@Component"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"TerminalRegisterMsgHandlerV2019"),s(),n("span",{class:"token keyword"},"implements"),s(),n("span",{class:"token class-name"},"SimpleJt808RequestHandler"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"Jt808Response"),n("span",{class:"token punctuation"},">")]),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token doc-comment comment"},`/**
     * 处理 [终端注册] 消息
     */`),s(`
    `),n("span",{class:"token annotation punctuation"},"@Override"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"Set"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"MsgType"),n("span",{class:"token punctuation"},">")]),s(),n("span",{class:"token function"},"getSupportedMsgTypes"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token class-name"},"Set"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"of"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"BuiltinJt808MsgType"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"CLIENT_REGISTER"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token doc-comment comment"},`/**
     * 处理 [V2019] 版的消息
     */`),s(`
    `),n("span",{class:"token annotation punctuation"},"@Override"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"Set"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"Jt808ProtocolVersion"),n("span",{class:"token punctuation"},">")]),s(),n("span",{class:"token function"},"getSupportedVersions"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token class-name"},"Jt808ProtocolVersion"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"unmodifiableSetVersion2019"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token comment"},"// 7E010040560100000000013912344329007B000B0002696439383736353433323174797065303031323334353637383132333"),s(`
    `),n("span",{class:"token comment"},"// 435363738383736353433323149443030303031323334353637383132333435363738383736353433323101B8CA4A2D313233343539257E"),s(`
    `),n("span",{class:"token annotation punctuation"},"@Override"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"Jt808Response"),s(),n("span",{class:"token function"},"handleMsg"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Jt808ServerExchange"),s(" exchange"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"final"),s(),n("span",{class:"token class-name"},"BuiltinMsg0100V2019"),s(" body "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"BuiltinMsg0100V2019"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        exchange`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"request"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
                `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"bodyAsReader"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
                `),n("span",{class:"token comment"},"// 1. [0-2) WORD 省域ID"),s(`
                `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"readUnsignedWord"),n("span",{class:"token punctuation"},"("),s("body"),n("span",{class:"token operator"},"::"),n("span",{class:"token function"},"setProvinceId"),n("span",{class:"token punctuation"},")"),s(`
                `),n("span",{class:"token comment"},"// 2. [2-4) WORD 省域ID"),s(`
                `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"readUnsignedWord"),n("span",{class:"token punctuation"},"("),s("body"),n("span",{class:"token operator"},"::"),n("span",{class:"token function"},"setCityId"),n("span",{class:"token punctuation"},")"),s(`
                `),n("span",{class:"token comment"},"// 3. [4-15) BYTE[11] 制造商ID"),s(`
                `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"readString"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"11"),n("span",{class:"token punctuation"},","),s(" body"),n("span",{class:"token operator"},"::"),n("span",{class:"token function"},"setManufacturerId"),n("span",{class:"token punctuation"},")"),s(`
                `),n("span",{class:"token comment"},"// 4. [15-45) BYTE[30] 终端型号"),s(`
                `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"readString"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"30"),n("span",{class:"token punctuation"},","),s(" body"),n("span",{class:"token operator"},"::"),n("span",{class:"token function"},"setTerminalType"),n("span",{class:"token punctuation"},")"),s(`
                `),n("span",{class:"token comment"},"// 5. [45-75) BYTE[30] 终端ID"),s(`
                `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"readString"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"30"),n("span",{class:"token punctuation"},","),s(" body"),n("span",{class:"token operator"},"::"),n("span",{class:"token function"},"setTerminalId"),n("span",{class:"token punctuation"},")"),s(`
                `),n("span",{class:"token comment"},"// 6. [75]   BYTE    车牌颜色"),s(`
                `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"readByte"),n("span",{class:"token punctuation"},"("),s("body"),n("span",{class:"token operator"},"::"),n("span",{class:"token function"},"setColor"),n("span",{class:"token punctuation"},")"),s(`
                `),n("span",{class:"token comment"},"// 7. [76,n)   String    车辆标识"),s(`
                `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"readString"),n("span",{class:"token punctuation"},"("),s("exchange"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"request"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"msgBodyLength"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"76"),n("span",{class:"token punctuation"},","),s(" body"),n("span",{class:"token operator"},"::"),n("span",{class:"token function"},"setCarIdentifier"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        log`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"info"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"body:{}"'),n("span",{class:"token punctuation"},","),s(" body"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

        `),n("span",{class:"token keyword"},"return"),s(" exchange"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"response"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
                `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"msgId"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"BuiltinJt808MsgType"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"CLIENT_REGISTER_REPLY"),n("span",{class:"token punctuation"},")"),s(`
                `),n("span",{class:"token comment"},"// 这里手动指定单个包最大大小为 33 字节"),s(`
                `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"maxPackageSize"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"33"),n("span",{class:"token punctuation"},")"),s(`
                `),n("span",{class:"token comment"},"// 1. byte[0,2) WORD 对应的终端注册消息的流水号"),s(`
                `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"writeWord"),n("span",{class:"token punctuation"},"("),s("exchange"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"request"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"flowId"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
                `),n("span",{class:"token comment"},"// 2. byte[2,3) BYTE 0:成功;1:车辆已被注册;2:数据库中无该车辆; 3:终端已被注册;4:数据库中无该终端"),s(`
                `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"writeByte"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(`
                `),n("span",{class:"token comment"},"// 3. byte[3,x) STRING 鉴权码(只有在成功后才有该字段)"),s(`
                `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"writeString"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"AuthCode2019----"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),g=n("p",null,"发送下面这条测试报文",-1),y=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[n("pre",{class:"language-bash"},[n("code",null,`7E010040560100000000013912344329007B000B0002696439383736353433323174797065303031323334353637383132333435363738383736353433323149443030303031323334353637383132333435363738383736353433323101B8CA4A2D313233343539257E
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),h=n("p",null,[s("然后观察 "),n("code",null,"debug"),s(" 日志的输出:")],-1),f={class:""},w=["src"],S=o(`<p>上面日志解释如下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 0x8100 的第1个子包(-: 转义之前; +: 转义之后)</span>
- <span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span> <span class="token punctuation">(</span>0x8100--33<span class="token punctuation">)</span> <span class="token number">1</span>/3: 7E810060090100000000013912344329000000030001007B0041757468436FE07E
+ <span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span> <span class="token punctuation">(</span>0x8100--33<span class="token punctuation">)</span> <span class="token number">1</span>/3: 7E810060090100000000013912344329000000030001007B0041757468436FE07E
<span class="token comment"># 0x8100 的第2个子包(-: 转义之前; +: 转义之后)</span>
- <span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span> <span class="token punctuation">(</span>0x8100--33<span class="token punctuation">)</span> <span class="token number">2</span>/3: 7E8100600901000000000139123443290001000300026465323031392D2D2DBB7E
+ <span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span> <span class="token punctuation">(</span>0x8100--33<span class="token punctuation">)</span> <span class="token number">2</span>/3: 7E8100600901000000000139123443290001000300026465323031392D2D2DBB7E
<span class="token comment"># 0x8100 的第3个子包(-: 转义之前; +: 转义之后)</span>
- <span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span> <span class="token punctuation">(</span>0x8100--25<span class="token punctuation">)</span> <span class="token number">3</span>/3: 7E8100600101000000000139123443290002000300032DBA7E
+ <span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span> <span class="token punctuation">(</span>0x8100--25<span class="token punctuation">)</span> <span class="token number">3</span>/3: 7E8100600101000000000139123443290002000300032DBA7E
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="分包补传" tabindex="-1"><a class="header-anchor" href="#分包补传"><span>分包补传</span></a></h2><p>这里指的是 <code>0x0005</code> 的 <strong>终端补传分包请求</strong>。</p><p>当服务端将消息分包发送给终端时，如果终端没有收到某些子包，会发送 <code>0x0005</code> 请求要求服务端重传指定的子包。</p><h3 id="分包暂存器" tabindex="-1"><a class="header-anchor" href="#分包暂存器"><span>分包暂存器</span></a></h3><p>服务端将消息分包发送时，会将子包保存在 <code>Jt808ResponseSubPackageStorage</code> 中,该接口定义如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Jt808ResponseSubPackageStorage</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 保存某个子包(响应消息分包时会回调),子包保存多久看具体实现类的实现逻辑
     *
     * <span class="token keyword">@param</span> <span class="token parameter">subPackage</span> 子包
     */</span>
    <span class="token keyword">void</span> <span class="token function">saveSubPackage</span><span class="token punctuation">(</span><span class="token class-name">Jt808Response<span class="token punctuation">.</span>Jt808ResponseSubPackage</span> subPackage<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 分包补传(0x0005) 时可以通过这个方法获取之前发送过的子包
     *
     * <span class="token keyword">@param</span> <span class="token parameter">terminalId</span>              终端手机号
     * <span class="token keyword">@param</span> <span class="token parameter">firstFlowIdOfSubPackage</span> 分包消息中的第一个子包的流水号
     * <span class="token keyword">@param</span> <span class="token parameter">packageIds</span>              要求重传的子包ID
     * <span class="token keyword">@return</span> 编码后子包消息字节流
     */</span>
    <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ByteBuf</span><span class="token punctuation">&gt;</span></span> <span class="token function">getSubPackageMsg</span><span class="token punctuation">(</span><span class="token class-name">String</span> terminalId<span class="token punctuation">,</span> <span class="token keyword">int</span> firstFlowIdOfSubPackage<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> packageIds<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>遇到分包补传请求 <code>0x0005</code> 时，可以从 Jt808ResponseSubPackageStorage 中获取子包信息。</p><h3 id="内置分包暂存器" tabindex="-1"><a class="header-anchor" href="#内置分包暂存器"><span>内置分包暂存器</span></a></h3><p><code>Jt808ResponseSubPackageStorage</code> 内置了三个实现类:</p><ul><li><code>CaffeineJt808ResponseSubPackageStorage</code><ul><li>基于 caffeine 的实现</li><li>配置项 <code>jt808.response-sub-package-storage.type=caffeine</code> 时启用</li></ul></li><li><code>RedisJt808ResponseSubPackageStorage</code><ul><li>基于 redis 的实现</li><li>配置项 <code>jt808.response-sub-package-storage.type=redis</code> 时启用</li></ul></li><li><code>Jt808ResponseSubPackageStorage.NO_OPS_STORAGE</code><ul><li>空的实现</li><li>配置项 <code>jt808.response-sub-package-storage.type=none</code> 时启用</li></ul></li></ul><h3 id="示例-1" tabindex="-1"><a class="header-anchor" href="#示例-1"><span>示例</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Jt808RequestHandler</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RetransmissionHandler</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Jt808ResponseSubPackageStorage</span> responseSubPackageStorage<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Jt808SessionManager</span> sessionManager<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">RetransmissionHandler</span><span class="token punctuation">(</span><span class="token class-name">Jt808ResponseSubPackageStorage</span> responseSubPackageStorage<span class="token punctuation">,</span> <span class="token class-name">Jt808SessionManager</span> sessionManager<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>responseSubPackageStorage <span class="token operator">=</span> responseSubPackageStorage<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>sessionManager <span class="token operator">=</span> sessionManager<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 7E00054008010000000001391234432900010000000200010002387E</span>
    <span class="token comment">// 7E000540080100000000013912344329000100030002000100023B7E</span>
    <span class="token annotation punctuation">@Jt808RequestHandlerMapping</span><span class="token punctuation">(</span>msgType <span class="token operator">=</span> <span class="token number">0x0005</span><span class="token punctuation">,</span> desc <span class="token operator">=</span> <span class="token string">&quot;终端补传分包请求&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processRetransmissionMsg</span><span class="token punctuation">(</span><span class="token class-name">Jt808RequestEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BuiltinMsg0005</span><span class="token punctuation">&gt;</span></span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">Jt808Session</span> session <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sessionManager<span class="token punctuation">.</span><span class="token function">findByTerminalId</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">terminalId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">final</span> <span class="token class-name">BuiltinMsg0005</span> body <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 分包消息中第一包的流水号</span>
        <span class="token keyword">final</span> <span class="token keyword">int</span> firstSubPackageFlowId <span class="token operator">=</span> body<span class="token punctuation">.</span><span class="token function">getFirstSubPackageFlowId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 需要重传的子包ID</span>
        <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> packageIdList <span class="token operator">=</span> body<span class="token punctuation">.</span><span class="token function">getPackageIdList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">BuiltinMsg0005<span class="token punctuation">.</span>PackageId</span><span class="token operator">::</span><span class="token function">getValue</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 获取子包</span>
        <span class="token keyword">final</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ByteBuf</span><span class="token punctuation">&gt;</span></span> subPackageMsgList <span class="token operator">=</span> responseSubPackageStorage<span class="token punctuation">.</span><span class="token function">getSubPackageMsg</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">terminalId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> firstSubPackageFlowId<span class="token punctuation">,</span> packageIdList<span class="token punctuation">)</span><span class="token punctuation">;</span>

        subPackageMsgList
                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span>subPackageMsg <span class="token operator">-&gt;</span> log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;re-send msg to client {} : {}&quot;</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">terminalId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">HexStringUtils</span><span class="token punctuation">.</span><span class="token function">byteBufToString</span><span class="token punctuation">(</span>subPackageMsg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment">// 将子包发送给终端</span>
                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>session<span class="token operator">::</span><span class="token function">sendMsgToClient</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14);function R(c,E){const p=i("CodeTabs");return u(),r("div",null,[m,k(p,{id:"41",data:[{id:"@Jt808ResponseBody示例"},{id:"maxPackageSize()示例"}],active:0},{title0:a(({value:e,isActive:t})=>[s("@Jt808ResponseBody示例")]),title1:a(({value:e,isActive:t})=>[s("Jt808Response")]),tab0:a(({value:e,isActive:t})=>[v]),tab1:a(({value:e,isActive:t})=>[b]),_:1},8,["data"]),g,y,h,n("p",f,[n("img",{src:c.$withBase("/img/v2/basic/Jt808ResponseBody-sub-package.png.png")},null,8,w)]),S])}const B=l(d,[["render",R],["__file","response-sub-package.html.vue"]]),_=JSON.parse('{"path":"/v2/jt-808/guide/basic/response-sub-package.html","title":"响应消息分包","lang":"zh-CN","frontmatter":{"icon":"object","description":"响应消息分包 分包方式 Jt808MsgEncoder 的默认实现类 DefaultJt808MsgEncoder 会将较大的消息自动分包，分包的阈值可以手动指定。 默认值是 1024 字节。 也就是说：DefaultJt808MsgEncoder 在编码消息时(转义之前)，发现消息包的大小超过了阈值，会自动将消息分包发送给客户端。 内置的支持自动分包...","head":[["meta",{"property":"og:url","content":"https://github.com/hylexus/jt-framework/jt-framework/v2/jt-808/guide/basic/response-sub-package.html"}],["meta",{"property":"og:site_name","content":"jt-framework"}],["meta",{"property":"og:title","content":"响应消息分包"}],["meta",{"property":"og:description","content":"响应消息分包 分包方式 Jt808MsgEncoder 的默认实现类 DefaultJt808MsgEncoder 会将较大的消息自动分包，分包的阈值可以手动指定。 默认值是 1024 字节。 也就是说：DefaultJt808MsgEncoder 在编码消息时(转义之前)，发现消息包的大小超过了阈值，会自动将消息分包发送给客户端。 内置的支持自动分包..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-12-23T16:14:45.000Z"}],["meta",{"property":"article:author","content":"hylexus"}],["meta",{"property":"article:modified_time","content":"2022-12-23T16:14:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"响应消息分包\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-12-23T16:14:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"hylexus\\",\\"url\\":\\"https://github.com/hylexus\\"}]}"]]},"headers":[{"level":2,"title":"分包方式","slug":"分包方式","link":"#分包方式","children":[{"level":3,"title":"Jt808Response","slug":"jt808response","link":"#jt808response","children":[]},{"level":3,"title":"@Jt808ResponseBody","slug":"jt808responsebody","link":"#jt808responsebody","children":[]},{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]}]},{"level":2,"title":"分包补传","slug":"分包补传","link":"#分包补传","children":[{"level":3,"title":"分包暂存器","slug":"分包暂存器","link":"#分包暂存器","children":[]},{"level":3,"title":"内置分包暂存器","slug":"内置分包暂存器","link":"#内置分包暂存器","children":[]},{"level":3,"title":"示例","slug":"示例-1","link":"#示例-1","children":[]}]}],"git":{"createdTime":1671812085000,"updatedTime":1671812085000,"contributors":[{"name":"hylexus","email":"hylexus@163.com","commits":1}]},"readingTime":{"minutes":4.71,"words":1412},"filePathRelative":"v2/jt-808/guide/basic/response-sub-package.md","localizedDate":"2022年12月24日","autoDesc":true,"excerpt":"\\n<h2>分包方式</h2>\\n<p><code>Jt808MsgEncoder</code> 的默认实现类 <code>DefaultJt808MsgEncoder</code> 会将较大的消息自动分包，分包的阈值可以手动指定。 默认值是 <code>1024</code> 字节。</p>\\n<p>也就是说：<code>DefaultJt808MsgEncoder</code> 在编码消息时(<strong>转义之前</strong>)，发现消息包的大小超过了<strong>阈值</strong>，会自动将消息分包发送给客户端。</p>\\n<p>内置的支持自动分包的返回类型有两种: <code>Jt808Response</code> 和被 <code>@Jt808ResponseBody</code> 标记的类型。</p>"}');export{B as comp,_ as data};
