import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o as i,c as u,b as n,d as s,e as a,w as p,a as o}from"./app-BEQS3wW-.js";const d={},k=o(`<h1 id="消息处理器" tabindex="-1"><a class="header-anchor" href="#消息处理器"><span>消息处理器</span></a></h1><p><code>MsgHandler</code> 负责处理经过 <code>RequestMsgBodyConverter</code> 转换之后的 <code>请求体消息实体类</code>。</p><p>对于请求消息的处理完全是由 <code>MsgHandler</code> 接口来实现的。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MsgHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">RequestMsgBody</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">OrderedComponent</span> <span class="token punctuation">{</span>

    <span class="token keyword">default</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MsgType</span><span class="token punctuation">&gt;</span></span> <span class="token function">getSupportedMsgTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Sets</span><span class="token punctuation">.</span><span class="token function">newHashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">handleMsg</span><span class="token punctuation">(</span><span class="token class-name">RequestMsgMetadata</span> metadata<span class="token punctuation">,</span> <span class="token class-name">T</span> body<span class="token punctuation">,</span> <span class="token class-name">Session</span> session<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),r={class:"hint-container caution"},m=n("p",{class:"hint-container-title"},"MsgHandler",-1),v=n("li",null,[s("自定义的消息处理器 "),n("code",null,"必须"),s(" 实现 "),n("code",null,"MsgHandler"),s(" 这个泛型接口")],-1),g=n("code",null,"基于注解",-1),b=n("code",null,"MsgHandler",-1),y=o(`<p>消息处理完成后对客户端的响应也是一个 <code>byte[]</code> ，可以通过 <code>handleMsg()</code> 方法的 <code>Session</code> 参数中拿到 <code>Netty</code> 的 <code>Channel</code>，然后通过 <code>Channel</code> 发送给客户端。</p><h2 id="手动实现并注册" tabindex="-1"><a class="header-anchor" href="#手动实现并注册"><span>手动实现并注册</span></a></h2><h3 id="实现" tabindex="-1"><a class="header-anchor" href="#实现"><span>实现</span></a></h3><ul><li>所以一般的消息处理步骤应该像下面这样：</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SampleMsgHandler</span> <span class="token keyword">implements</span> <span class="token class-name">MsgHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AuthRequestMsgBody</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token keyword">byte</span> <span class="token constant">SUCCESS</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">byte</span> <span class="token constant">AUTH_CODE_ERROR</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MsgType</span><span class="token punctuation">&gt;</span></span> <span class="token function">getSupportedMsgTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singleton</span><span class="token punctuation">(</span><span class="token class-name">BuiltinJt808MsgType</span><span class="token punctuation">.</span><span class="token constant">CLIENT_AUTH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMsg</span><span class="token punctuation">(</span><span class="token class-name">RequestMsgMetadata</span> metadata<span class="token punctuation">,</span> <span class="token class-name">AuthRequestMsgBody</span> body<span class="token punctuation">,</span> <span class="token class-name">Session</span> session<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">String</span> authCode <span class="token operator">=</span> body<span class="token punctuation">.</span><span class="token function">getAuthCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 鉴权逻辑</span>
        <span class="token keyword">final</span> <span class="token keyword">byte</span> result <span class="token operator">=</span> <span class="token function">isValidAuthCode</span><span class="token punctuation">(</span>authCode<span class="token punctuation">,</span> session<span class="token punctuation">.</span><span class="token function">getTerminalId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token operator">?</span> <span class="token constant">SUCCESS</span>
                <span class="token operator">:</span> <span class="token constant">AUTH_CODE_ERROR</span><span class="token punctuation">;</span>

        <span class="token comment">// 组装响应消息的字节数组(别忘了转义)</span>
        <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> respMsgBody <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">encodeMsgBody</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> metadata<span class="token punctuation">,</span> session<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 发送给客户端</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">send2Client</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> respMsgBody<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">encodeMsgBody</span><span class="token punctuation">(</span><span class="token keyword">byte</span> result<span class="token punctuation">,</span> <span class="token class-name">RequestMsgMetadata</span> metadata<span class="token punctuation">,</span> <span class="token class-name">Session</span> session<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
        <span class="token comment">// 按文档格式组装字节数组</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isValidAuthCode</span><span class="token punctuation">(</span><span class="token class-name">String</span> authCode<span class="token punctuation">,</span> <span class="token class-name">String</span> terminalId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
        <span class="token comment">// 具体鉴权逻辑</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">send2Client</span><span class="token punctuation">(</span><span class="token class-name">Channel</span> channel<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">ChannelFuture</span> future <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span><span class="token class-name">Unpooled</span><span class="token punctuation">.</span><span class="token function">copiedBuffer</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>future<span class="token punctuation">.</span><span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;ERROR : &#39;send data to client:&#39;&quot;</span><span class="token punctuation">,</span> future<span class="token punctuation">.</span><span class="token function">cause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>又或者像这样 <ul><li>继承 <code>AbstractMsgHandler</code></li><li>这里的 <code>RespMsgBody.toBytes()</code> 不用转义</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@BuiltinComponent</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthMsgHandler</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractMsgHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AuthRequestMsgBody</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MsgType</span><span class="token punctuation">&gt;</span></span> <span class="token function">getSupportedMsgTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">newHashSet</span><span class="token punctuation">(</span><span class="token class-name">BuiltinJt808MsgType</span><span class="token punctuation">.</span><span class="token constant">CLIENT_AUTH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RespMsgBody</span><span class="token punctuation">&gt;</span></span> <span class="token function">doProcess</span><span class="token punctuation">(</span><span class="token class-name">RequestMsgMetadata</span> metadata<span class="token punctuation">,</span> <span class="token class-name">AuthRequestMsgBody</span> body<span class="token punctuation">,</span> <span class="token class-name">Session</span> session<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;receive AuthMsg : {}&quot;</span><span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> valid <span class="token operator">=</span> authCodeValidator<span class="token punctuation">.</span><span class="token function">validateAuthCode</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> metadata<span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>valid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token function">commonSuccessReply</span><span class="token punctuation">(</span>metadata<span class="token punctuation">,</span> <span class="token class-name">BuiltinJt808MsgType</span><span class="token punctuation">.</span><span class="token constant">CLIENT_AUTH</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">CommonReplyMsgBody</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token constant">AUTH_CODE_ERROR</span><span class="token punctuation">,</span> metadata<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFlowId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">BuiltinJt808MsgType</span><span class="token punctuation">.</span><span class="token constant">CLIENT_AUTH</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>以下为示例性的处理位置消息的 <code>MsgHandler</code></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocationInfoUploadMsgHandler</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractMsgHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LocationUploadMsgBody</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RespMsgBody</span><span class="token punctuation">&gt;</span></span> <span class="token function">doProcess</span><span class="token punctuation">(</span><span class="token class-name">RequestMsgMetadata</span> metadata<span class="token punctuation">,</span> <span class="token class-name">LocationUploadMsgBody</span> body<span class="token punctuation">,</span> <span class="token class-name">Session</span> session<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token function">commonSuccessReply</span><span class="token punctuation">(</span>metadata<span class="token punctuation">,</span> <span class="token class-name">BuiltinJt808MsgType</span><span class="token punctuation">.</span><span class="token constant">CLIENT_LOCATION_INFO_UPLOAD</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="注册自定义msghandler" tabindex="-1"><a class="header-anchor" href="#注册自定义msghandler"><span>注册自定义MsgHandler</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Jt808Config</span> <span class="token keyword">extends</span> <span class="token class-name">Jt808ServerConfigurationSupport</span> <span class="token punctuation">{</span> 
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureMsgHandlerMapping</span><span class="token punctuation">(</span><span class="token class-name">MsgHandlerMapping</span> mapping<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">configureMsgHandlerMapping</span><span class="token punctuation">(</span>mapping<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 如果你在这里注册了自定义的鉴权消息处理器，那么AuthCodeValidator也无需提供了</span>
        <span class="token comment">// 此处也可以从Spring容器中获取bean来注入，不一定要手动new一个Handler注册</span>
        mapping<span class="token punctuation">.</span><span class="token function">registerConverter</span><span class="token punctuation">(</span><span class="token class-name">Jt808MsgType</span><span class="token punctuation">.</span><span class="token constant">CLIENT_LOCATION_INFO_UPLOAD</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LocationInfoUploadMsgHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="基于注解实现" tabindex="-1"><a class="header-anchor" href="#基于注解实现"><span>基于注解实现</span></a></h2>`,12),h={class:"hint-container tip"},f=n("p",{class:"hint-container-title"},"传送门",-1),w=n("hr",null,null,-1),M={class:"hint-container tip"},_=n("p",{class:"hint-container-title"},"传送门",-1),C={href:"https://github.com/hylexus/jt-framework/tree/master/samples/jt-808-server-sample-customized",target:"_blank",rel:"noopener noreferrer"};function H(j,x){const t=e("RouteLink"),c=e("ExternalLinkIcon");return i(),u("div",null,[k,n("div",r,[m,n("ul",null,[v,n("li",null,[s("当然，这种实现接口并手动注册的方式显得非常繁琐，你完全可以 "),a(t,{to:"/v1/jt-808/guide/customization/src/v1/jt-808/guide/annotation-based-dev/msg-handler-register.html#@jt808requestmsghandlermapping"},{default:p(()=>[s("参考这里")]),_:1}),s(" 使用 "),g,s(" 的方式来实现 "),b,s(" 的功能。")])])]),y,n("div",h,[f,n("p",null,[s("基于注解来实现MsgHandler的功能 "),a(t,{to:"/v1/jt-808/guide/customization/src/v1/jt-808/guide/annotation-based-dev/msg-handler-register.html#@Jt808RequestMsgHandlerMapping"},{default:p(()=>[s("请移步这里")]),_:1})])]),w,n("div",M,[_,n("p",null,[s("本小节示例可以在 "),n("a",C,[s("samples/jt-808-server-sample-customized"),a(c)]),s(" 找到相关代码。")])])])}const R=l(d,[["render",H],["__file","msg-handler-config.html.vue"]]),B=JSON.parse('{"path":"/v1/jt-808/guide/customization/msg-handler-config.html","title":"消息处理器","lang":"zh-CN","frontmatter":{"description":"消息处理器 MsgHandler 负责处理经过 RequestMsgBodyConverter 转换之后的 请求体消息实体类。 对于请求消息的处理完全是由 MsgHandler 接口来实现的。 MsgHandler 自定义的消息处理器 必须 实现 MsgHandler 这个泛型接口 当然，这种实现接口并手动注册的方式显得非常繁琐，你完全可以 使用 基于...","head":[["meta",{"property":"og:url","content":"https://github.com/hylexus/jt-framework/jt-framework/v1/jt-808/guide/customization/msg-handler-config.html"}],["meta",{"property":"og:site_name","content":"jt-framework"}],["meta",{"property":"og:title","content":"消息处理器"}],["meta",{"property":"og:description","content":"消息处理器 MsgHandler 负责处理经过 RequestMsgBodyConverter 转换之后的 请求体消息实体类。 对于请求消息的处理完全是由 MsgHandler 接口来实现的。 MsgHandler 自定义的消息处理器 必须 实现 MsgHandler 这个泛型接口 当然，这种实现接口并手动注册的方式显得非常繁琐，你完全可以 使用 基于..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-12-23T16:14:45.000Z"}],["meta",{"property":"article:author","content":"hylexus"}],["meta",{"property":"article:modified_time","content":"2022-12-23T16:14:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"消息处理器\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-12-23T16:14:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"hylexus\\",\\"url\\":\\"https://github.com/hylexus\\"}]}"]]},"headers":[{"level":2,"title":"手动实现并注册","slug":"手动实现并注册","link":"#手动实现并注册","children":[{"level":3,"title":"实现","slug":"实现","link":"#实现","children":[]},{"level":3,"title":"注册自定义MsgHandler","slug":"注册自定义msghandler","link":"#注册自定义msghandler","children":[]}]},{"level":2,"title":"基于注解实现","slug":"基于注解实现","link":"#基于注解实现","children":[]}],"git":{"createdTime":1671812085000,"updatedTime":1671812085000,"contributors":[{"name":"hylexus","email":"hylexus@163.com","commits":1}]},"readingTime":{"minutes":2.11,"words":634},"filePathRelative":"v1/jt-808/guide/customization/msg-handler-config.md","localizedDate":"2022年12月24日","autoDesc":true,"excerpt":"\\n<p><code>MsgHandler</code> 负责处理经过 <code>RequestMsgBodyConverter</code> 转换之后的 <code>请求体消息实体类</code>。</p>\\n<p>对于请求消息的处理完全是由 <code>MsgHandler</code> 接口来实现的。</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">interface</span> <span class=\\"token class-name\\">MsgHandler</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">T</span> <span class=\\"token keyword\\">extends</span> <span class=\\"token class-name\\">RequestMsgBody</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token keyword\\">extends</span> <span class=\\"token class-name\\">OrderedComponent</span> <span class=\\"token punctuation\\">{</span>\\n\\n    <span class=\\"token keyword\\">default</span> <span class=\\"token class-name\\">Set</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">MsgType</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token function\\">getSupportedMsgTypes</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token class-name\\">Sets</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">newHashSet</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">handleMsg</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">RequestMsgMetadata</span> metadata<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">T</span> body<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Session</span> session<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">IOException</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">InterruptedException</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>"}');export{R as comp,B as data};
