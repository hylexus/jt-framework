import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as e,b as n,a as o}from"./app-BEQS3wW-.js";const p={},i=o(`<h1 id="批量位置上传报文解析示例" tabindex="-1"><a class="header-anchor" href="#批量位置上传报文解析示例"><span>批量位置上传报文解析示例</span></a></h1><div class="hint-container caution"><p class="hint-container-title">警告</p><ul><li><strong>808</strong>文档中定义的位置上传报文有很多字段，<strong>但是</strong> 许多厂商实现的 <strong>808协议</strong> 位置上传报文 <strong>只是原始808的一个子集</strong> 。</li><li>本文举例用到的报文也 <strong>不是标准完整的位置上传报文</strong>，但是原理都一样。</li><li>此处以 <strong>2019</strong> 版的位置批量上传报文为例，展示如何基于注解来解析报文。</li></ul></div><h2 id="解析报文到实体类" tabindex="-1"><a class="header-anchor" href="#解析报文到实体类"><span>解析报文到实体类</span></a></h2><p>实体类映射关系如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@BuiltinComponent</span>
<span class="token annotation punctuation">@Jt808RequestBody</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocationBatchUploadMsgV2019</span> <span class="token punctuation">{</span>
    <span class="token comment">// byte[0,2)    WORD    数据项个数</span>
    <span class="token comment">// 从 2.1.1 开始可以不再指定 \`startIndex\` 属性</span>
    <span class="token comment">// 从 2.1.1 开始可以不再指定 \`startIndex\` 属性</span>
    <span class="token comment">// 从 2.1.1 开始可以不再指定 \`startIndex\` 属性</span>
    <span class="token comment">// @RequestField(order = 100, startIndex = 0, dataType = WORD)</span>
    <span class="token annotation punctuation">@RequestField</span><span class="token punctuation">(</span>order <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token constant">WORD</span><span class="token punctuation">)</span>
    <span class="token comment">// @RequestFieldAlias.Word(order = 100) // v2.1.1</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>

    <span class="token comment">// byte[2]    WORD    位置数据类型</span>
    <span class="token annotation punctuation">@RequestField</span><span class="token punctuation">(</span>order <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token constant">BYTE</span><span class="token punctuation">)</span>
    <span class="token comment">// @RequestFieldAlias.Byte(order = 200)</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> type<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@RequestField</span><span class="token punctuation">(</span>order <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">,</span> lengthExpression <span class="token operator">=</span> <span class="token string">&quot;#ctx.msgBodyLength() - 3&quot;</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token constant">LIST</span><span class="token punctuation">)</span>
    <span class="token comment">// @RequestFieldAlias.List(order = 300, lengthExpression = &quot;#ctx.msgBodyLength() - 3&quot;)</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Msg0704Item</span><span class="token punctuation">&gt;</span></span> itemList<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Data</span>
    <span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Msg0704Item</span> <span class="token punctuation">{</span>
        <span class="token comment">// byte[0,2)    WORD    位置汇报数据体长度</span>
        <span class="token annotation punctuation">@RequestField</span><span class="token punctuation">(</span>order <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token constant">WORD</span><span class="token punctuation">)</span>
        <span class="token comment">// @RequestFieldAlias.Word(order = 100)</span>
        <span class="token keyword">private</span> <span class="token keyword">int</span> msgLength<span class="token punctuation">;</span>

        <span class="token comment">// byte[2,n)    WORD    位置汇报数据体</span>
        <span class="token annotation punctuation">@RequestField</span><span class="token punctuation">(</span>order <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">,</span> lengthExpression <span class="token operator">=</span> <span class="token string">&quot;msgLength&quot;</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token constant">OBJECT</span><span class="token punctuation">)</span>
        <span class="token comment">// @RequestFieldAlias.Object(order = 200, lengthExpression = &quot;msgLength&quot;)</span>
        <span class="token keyword">private</span> <span class="token class-name">LocationUploadMsgV2019</span> locationInfo<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>消息处理器如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Jt808RequestHandler</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocationMsgHandler</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Jt808RequestHandlerMapping</span><span class="token punctuation">(</span>msgType <span class="token operator">=</span> <span class="token number">0x0704</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">BuiltinServerCommonReplyMsg</span> <span class="token function">processLocationBatchUploadMsgV2019</span><span class="token punctuation">(</span><span class="token class-name">Jt808RequestEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LocationBatchUploadMsgV2019</span><span class="token punctuation">&gt;</span></span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;LocationBatchUpload -- V2019 -- {}&quot;</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token class-name">BuiltinServerCommonReplyMsg</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">msgId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">flowId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="测试" tabindex="-1"><a class="header-anchor" href="#测试"><span>测试</span></a></h2><p>测试报文如下</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>7E070400E401583860765500040003010049000000000004000301D9F190073CA3C1000C00000000211204082941010400D728AD3001003101092504000000001404000000041504000000001604000000001702000118030000000049000000000004000301D9F190073CA3C1000C00000000211130171352010400D728AD3001003101092504000000001404000000041504000000001604000000001702000118030000000049000000000004000301D9F190073CA3C1000C00000000211130171357010400D728AD300115310109250400000000140400000004150400000000160400000000170200011803000000407E
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>消息处理器截图如下：</p>`,11),c={class:"demo"},l=["src"];function u(s,r){return t(),e("div",null,[i,n("p",c,[n("img",{src:s.$withBase("/img/v2/annotation-driven-dev/location-batch-upload-v2019-debug.png")},null,8,l)])])}const m=a(p,[["render",u],["__file","location-batch-upload-msg-parse-demo.html.vue"]]),v=JSON.parse('{"path":"/v2/jt-808/guide/annotation-based-dev/location-batch-upload-msg-parse-demo.html","title":"批量位置上传报文解析示例","lang":"zh-CN","frontmatter":{"icon":"code","description":"批量位置上传报文解析示例 警告 808文档中定义的位置上传报文有很多字段，但是 许多厂商实现的 808协议 位置上传报文 只是原始808的一个子集 。 本文举例用到的报文也 不是标准完整的位置上传报文，但是原理都一样。 此处以 2019 版的位置批量上传报文为例，展示如何基于注解来解析报文。 解析报文到实体类 实体类映射关系如下： 消息处理器如下： 测...","head":[["meta",{"property":"og:url","content":"https://github.com/hylexus/jt-framework/jt-framework/v2/jt-808/guide/annotation-based-dev/location-batch-upload-msg-parse-demo.html"}],["meta",{"property":"og:site_name","content":"jt-framework"}],["meta",{"property":"og:title","content":"批量位置上传报文解析示例"}],["meta",{"property":"og:description","content":"批量位置上传报文解析示例 警告 808文档中定义的位置上传报文有很多字段，但是 许多厂商实现的 808协议 位置上传报文 只是原始808的一个子集 。 本文举例用到的报文也 不是标准完整的位置上传报文，但是原理都一样。 此处以 2019 版的位置批量上传报文为例，展示如何基于注解来解析报文。 解析报文到实体类 实体类映射关系如下： 消息处理器如下： 测..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-12-23T16:14:45.000Z"}],["meta",{"property":"article:author","content":"hylexus"}],["meta",{"property":"article:modified_time","content":"2022-12-23T16:14:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"批量位置上传报文解析示例\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-12-23T16:14:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"hylexus\\",\\"url\\":\\"https://github.com/hylexus\\"}]}"]]},"headers":[{"level":2,"title":"解析报文到实体类","slug":"解析报文到实体类","link":"#解析报文到实体类","children":[]},{"level":2,"title":"测试","slug":"测试","link":"#测试","children":[]}],"git":{"createdTime":1671812085000,"updatedTime":1671812085000,"contributors":[{"name":"hylexus","email":"hylexus@163.com","commits":1}]},"readingTime":{"minutes":0.7,"words":209},"filePathRelative":"v2/jt-808/guide/annotation-based-dev/location-batch-upload-msg-parse-demo.md","localizedDate":"2022年12月24日","autoDesc":true,"excerpt":"\\n<div class=\\"hint-container caution\\">\\n<p class=\\"hint-container-title\\">警告</p>\\n<ul>\\n<li><strong>808</strong>文档中定义的位置上传报文有很多字段，<strong>但是</strong> 许多厂商实现的 <strong>808协议</strong> 位置上传报文 <strong>只是原始808的一个子集</strong> 。</li>\\n<li>本文举例用到的报文也 <strong>不是标准完整的位置上传报文</strong>，但是原理都一样。</li>\\n<li>此处以 <strong>2019</strong> 版的位置批量上传报文为例，展示如何基于注解来解析报文。</li>\\n</ul>\\n</div>"}');export{m as comp,v as data};
