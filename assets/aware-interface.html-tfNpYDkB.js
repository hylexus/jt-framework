import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r,o,c as i,b as a,d as e,e as c,w as p,a as t}from"./app-BEQS3wW-.js";const d={},l=t('<h1 id="aware接口" tabindex="-1"><a class="header-anchor" href="#aware接口"><span>Aware接口</span></a></h1><p>这种 <code>Aware</code> 接口是从 <code>Spring</code> 中借鉴(抄袭)的 😂😂😂😂😂😂。</p><p>所以你要是知道 <code>Spring</code> 中的诸如 <code>ApplicationContextAware</code>、<code>EnvironmentAware</code> 等就几乎没必要看本小节了。</p><h2 id="为什么会提供" tabindex="-1"><a class="header-anchor" href="#为什么会提供"><span>为什么会提供？</span></a></h2><p>在用注解解析映射请求报文到实体类的时候，字段长度等的计算可能会依赖于消息头中的一些属性。</p><p>所以在基于注解的实体类映射时，你可以给实体类实现这些接口以自动注入一些其他信息。</p>',6),u={class:"hint-container caution"},m=a("p",{class:"hint-container-title"},"注意",-1),h=a("strong",null,"Aware",-1),v=a("code",null,"请求体消息实体类",-1),w=t(`<h2 id="jt808requestheaderaware" tabindex="-1"><a class="header-anchor" href="#jt808requestheaderaware"><span>Jt808RequestHeaderAware</span></a></h2><p>每次消息处理时为实体类注入 <code>Jt808RequestHeader</code> 实例。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Jt808RequestHeaderAware</span> <span class="token punctuation">{</span>

    <span class="token keyword">void</span> <span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token class-name">Jt808RequestHeader</span> header<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jt808requestaware" tabindex="-1"><a class="header-anchor" href="#jt808requestaware"><span>Jt808RequestAware</span></a></h2><p>每次消息处理时为实体类注入 <code>Jt808Request</code> 实例。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Jt808RequestAware</span> <span class="token punctuation">{</span>

    <span class="token keyword">void</span> <span class="token function">setRequest</span><span class="token punctuation">(</span><span class="token class-name">Jt808Request</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6);function g(k,A){const n=r("RouteLink");return o(),i("div",null,[l,a("div",u,[m,a("p",null,[e("目前为止，这些"),h,e("接口只能在 "),c(n,{to:"/v2/jt-808/guide/annotation-based-dev/req-msg-mapping.html#jt808requestbody"},{default:p(()=>[e("基于注解处理请求消息映射")]),_:1}),e(" 时用于 "),v,e(" 中。")])]),w])}const b=s(d,[["render",g],["__file","aware-interface.html.vue"]]),y=JSON.parse('{"path":"/v2/jt-808/guide/more/aware-interface.html","title":"Aware接口","lang":"zh-CN","frontmatter":{"icon":"leaf","description":"Aware接口 这种 Aware 接口是从 Spring 中借鉴(抄袭)的 😂😂😂😂😂😂。 所以你要是知道 Spring 中的诸如 ApplicationContextAware、EnvironmentAware 等就几乎没必要看本小节了。 为什么会提供？ 在用注解解析映射请求报文到实体类的时候，字段长度等的计算可能会依赖于消息头中的一些属...","head":[["meta",{"property":"og:url","content":"https://github.com/hylexus/jt-framework/jt-framework/v2/jt-808/guide/more/aware-interface.html"}],["meta",{"property":"og:site_name","content":"jt-framework"}],["meta",{"property":"og:title","content":"Aware接口"}],["meta",{"property":"og:description","content":"Aware接口 这种 Aware 接口是从 Spring 中借鉴(抄袭)的 😂😂😂😂😂😂。 所以你要是知道 Spring 中的诸如 ApplicationContextAware、EnvironmentAware 等就几乎没必要看本小节了。 为什么会提供？ 在用注解解析映射请求报文到实体类的时候，字段长度等的计算可能会依赖于消息头中的一些属..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-12-23T16:14:45.000Z"}],["meta",{"property":"article:author","content":"hylexus"}],["meta",{"property":"article:modified_time","content":"2022-12-23T16:14:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Aware接口\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-12-23T16:14:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"hylexus\\",\\"url\\":\\"https://github.com/hylexus\\"}]}"]]},"headers":[{"level":2,"title":"为什么会提供？","slug":"为什么会提供","link":"#为什么会提供","children":[]},{"level":2,"title":"Jt808RequestHeaderAware","slug":"jt808requestheaderaware","link":"#jt808requestheaderaware","children":[]},{"level":2,"title":"Jt808RequestAware","slug":"jt808requestaware","link":"#jt808requestaware","children":[]}],"git":{"createdTime":1671812085000,"updatedTime":1671812085000,"contributors":[{"name":"hylexus","email":"hylexus@163.com","commits":1}]},"readingTime":{"minutes":0.77,"words":232},"filePathRelative":"v2/jt-808/guide/more/aware-interface.md","localizedDate":"2022年12月24日","autoDesc":true,"excerpt":"\\n<p>这种 <code>Aware</code> 接口是从 <code>Spring</code> 中借鉴(抄袭)的 😂😂😂😂😂😂。</p>\\n<p>所以你要是知道 <code>Spring</code> 中的诸如 <code>ApplicationContextAware</code>、<code>EnvironmentAware</code> 等就几乎没必要看本小节了。</p>\\n<h2>为什么会提供？</h2>\\n<p>在用注解解析映射请求报文到实体类的时候，字段长度等的计算可能会依赖于消息头中的一些属性。</p>\\n<p>所以在基于注解的实体类映射时，你可以给实体类实现这些接口以自动注入一些其他信息。</p>"}');export{b as comp,y as data};
