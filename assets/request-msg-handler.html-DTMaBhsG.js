import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as r,c as u,b as n,e as d,w as a,a as c,d as s}from"./app-BEQS3wW-.js";const k={},m=c('<h1 id="请求消息处理器" tabindex="-1"><a class="header-anchor" href="#请求消息处理器"><span>请求消息处理器</span></a></h1><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p><strong>接收/处理</strong> 请求没有强制指定固定类型的处理器，由谁来处理消息取决于 <code>Jt808HandlerMapping</code> 配置。</p></div><p>内置了两个 <code>Jt808HandlerMapping</code>:</p>',4),v={class:"demo"},b=["src"],g=c(`<ul><li><code>SimpleJt808RequestHandlerHandlerMapping</code> 能将消息路由到 <code>SimpleJt808RequestHandler</code> 类型的 <strong>类级别</strong> 处理器。</li><li><code>Jt808RequestHandlerMappingHandlerMapping</code> 能将消息路由到 <code>@Jt808RequestHandlerMapping</code> 注解修饰的 <strong>方法级别</strong> 处理器。</li></ul><h2 id="jt808requesthandlermapping" tabindex="-1"><a class="header-anchor" href="#jt808requesthandlermapping"><span>@Jt808RequestHandlerMapping</span></a></h2><h3 id="介绍-1" tabindex="-1"><a class="header-anchor" href="#介绍-1"><span>介绍</span></a></h3><p>被 <code>@Jt808RequestHandlerMapping</code> 标记的这种处理器也是从 <code>Spring</code> 借鉴(抄袭)的。和 <code>Spring</code> 的 <code>@Controller</code>、<code>@RestController</code> 用法类似。</p><p>作用就是标记一下当前类是一个消息处理器类。被该注解标记的类中应该存在若干个能处理请求的方法。</p><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Component</span>
<span class="token comment">// @Jt808RequestHandler 标记该类 表示该类是一个消息处理器累(具体的处理器是该类中的部分方法)</span>
<span class="token annotation punctuation">@Jt808RequestHandler</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeRequestHandler</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Jt808RequestHandlerMapping</span><span class="token punctuation">(</span>msgType <span class="token operator">=</span> <span class="token number">0x0100</span><span class="token punctuation">,</span> versions <span class="token operator">=</span> <span class="token constant">VERSION_2013</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">TerminalRegisterReplyMsg</span> <span class="token function">processTerminalRegisterMsgV2011</span><span class="token punctuation">(</span><span class="token class-name">Jt808Request</span> request<span class="token punctuation">,</span> <span class="token class-name">TerminalRegisterMsgV2011</span> body<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token function">processRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Jt808RequestHandlerMapping</span><span class="token punctuation">(</span>msgType <span class="token operator">=</span> <span class="token number">0x0100</span><span class="token punctuation">,</span> versions <span class="token operator">=</span> <span class="token constant">VERSION_2019</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">TerminalRegisterReplyMsg</span> <span class="token function">processTerminalRegisterMsgV2019</span><span class="token punctuation">(</span><span class="token class-name">Jt808RequestEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TerminalRegisterMsgV2019</span><span class="token punctuation">&gt;</span></span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token function">processRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="simplejt808requesthandler" tabindex="-1"><a class="header-anchor" href="#simplejt808requesthandler"><span>SimpleJt808RequestHandler</span></a></h2><h3 id="介绍-2" tabindex="-1"><a class="header-anchor" href="#介绍-2"><span>介绍</span></a></h3><p>最直观的处理方式就是类似于 <code>Spring</code> 的 <code>WebFlux</code> 中的 <code>org.springframework.web.reactive.function.server.HandlerFunction</code>。</p><p>但是 <code>HandlerFunction</code> 需要借助 <code>RouterFunction</code> 来将请求和 <code>HandlerFunction</code> 联系起来。</p><p>本项目借鉴(抄袭) <code>WebFlux</code>，提供了一个 <code>SimpleJt808RequestHandler</code>(为了编码简单，直接省去了 <code>RouterFunction</code>) :</p>`,12),h=n("div",{class:"language-java line-numbers-mode","data-ext":"java","data-title":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token comment"},"// 这里是 Spring WebFlux 的 HandlerFunction 定义"),s(`
`),n("span",{class:"token keyword"},"package"),s(),n("span",{class:"token namespace"},[s("org"),n("span",{class:"token punctuation"},"."),s("springframework"),n("span",{class:"token punctuation"},"."),s("web"),n("span",{class:"token punctuation"},"."),s("reactive"),n("span",{class:"token punctuation"},"."),s("function"),n("span",{class:"token punctuation"},"."),s("server")]),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"interface"),s(),n("span",{class:"token class-name"},"HandlerFunction"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"T"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token class-name"},"ServerResponse"),n("span",{class:"token punctuation"},">")]),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token class-name"},"Mono"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"T"),n("span",{class:"token punctuation"},">")]),s(),n("span",{class:"token function"},"handle"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"ServerRequest"),s(" request"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),y=n("div",{class:"language-java line-numbers-mode","data-ext":"java","data-title":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"interface"),s(),n("span",{class:"token class-name"},"SimpleJt808RequestHandler"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"T"),n("span",{class:"token punctuation"},">")]),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token class-name"},"MultipleVersionSupport"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token doc-comment comment"},[s(`/**
     * `),n("span",{class:"token keyword"},"@return"),s(` 该处理器可以处理什么类型的消息
     */`)]),s(`
    `),n("span",{class:"token class-name"},"Set"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"MsgType"),n("span",{class:"token punctuation"},">")]),s(),n("span",{class:"token function"},"getSupportedMsgTypes"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token doc-comment comment"},[s(`/**
     * `),n("span",{class:"token keyword"},"@return"),s(` 该处理器可以处理的协议类型(默认为ALL)
     */`)]),s(`
    `),n("span",{class:"token annotation punctuation"},"@Override"),s(`
    `),n("span",{class:"token keyword"},"default"),s(),n("span",{class:"token class-name"},"Set"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"Jt808ProtocolVersion"),n("span",{class:"token punctuation"},">")]),s(),n("span",{class:"token function"},"getSupportedVersions"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token class-name"},"MultipleVersionSupport"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"super"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getSupportedVersions"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token doc-comment comment"},[s(`/**
     * 处理消息
     *
     * `),n("span",{class:"token keyword"},"@return"),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token keyword"},"@link"),s(),n("span",{class:"token reference"},[n("span",{class:"token class-name"},"Jt808Response")]),n("span",{class:"token punctuation"},"}"),s(" 或 可以转换为 "),n("span",{class:"token punctuation"},"{"),n("span",{class:"token keyword"},"@link"),s(),n("span",{class:"token reference"},[n("span",{class:"token class-name"},"Jt808Response")]),n("span",{class:"token punctuation"},"}"),s(` 的类型
     */`)]),s(`
    `),n("span",{class:"token class-name"},"T"),s(),n("span",{class:"token function"},"handleMsg"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Jt808ServerExchange"),s(" exchange"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),R=c(`<h3 id="示例-1" tabindex="-1"><a class="header-anchor" href="#示例-1"><span>示例</span></a></h3><div class="hint-container tip"><p class="hint-container-title">使用方式</p><p>直接将实现了 <code>SimpleJt808RequestHandler</code> 接口的处理器类加入到 <code>Spring</code> 容器中就可以。</p></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TerminalRegisterMsgHandlerV2011</span> <span class="token keyword">implements</span> <span class="token class-name">SimpleJt808RequestHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BuiltinMsg8100</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 处理 [终端注册] 消息
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MsgType</span><span class="token punctuation">&gt;</span></span> <span class="token function">getSupportedMsgTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Set</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">BuiltinJt808MsgType</span><span class="token punctuation">.</span><span class="token constant">CLIENT_REGISTER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 处理 [V2011] 版的消息
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Jt808ProtocolVersion</span><span class="token punctuation">&gt;</span></span> <span class="token function">getSupportedVersions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Jt808ProtocolVersion</span><span class="token punctuation">.</span><span class="token function">unmodifiableSetVersion2011</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 7E01000023013912344321007B000B0002696431323361626364656667684944313233343501B8CA4A2D313233343531317E</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">BuiltinMsg8100</span> <span class="token function">handleMsg</span><span class="token punctuation">(</span><span class="token class-name">Jt808ServerExchange</span> exchange<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token function">processRequest</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3);function q(l,H){const p=i("CodeTabs");return r(),u("div",null,[m,n("p",v,[n("img",{src:l.$withBase("/img/v2/design/jt808-handler-mapping.png")},null,8,b)]),g,d(p,{id:"58",data:[{id:"HandlerFunction(Spring)"},{id:"SimpleJt808RequestHandler:active"}],active:1,"tab-id":"HandlerFunction(Spring)"},{title0:a(({value:e,isActive:t})=>[s("HandlerFunction(Spring)")]),title1:a(({value:e,isActive:t})=>[s("SimpleJt808RequestHandler:active")]),tab0:a(({value:e,isActive:t})=>[h]),tab1:a(({value:e,isActive:t})=>[y]),_:1},8,["data"]),R])}const J=o(k,[["render",q],["__file","request-msg-handler.html.vue"]]),M=JSON.parse('{"path":"/v2/jt-808/guide/basic/request-msg-handler.html","title":"请求消息处理器","lang":"zh-CN","frontmatter":{"icon":"wrap","description":"请求消息处理器 介绍 提示 接收/处理 请求没有强制指定固定类型的处理器，由谁来处理消息取决于 Jt808HandlerMapping 配置。 内置了两个 Jt808HandlerMapping: SimpleJt808RequestHandlerHandlerMapping 能将消息路由到 SimpleJt808RequestHandler 类型的 ...","head":[["meta",{"property":"og:url","content":"https://github.com/hylexus/jt-framework/jt-framework/v2/jt-808/guide/basic/request-msg-handler.html"}],["meta",{"property":"og:site_name","content":"jt-framework"}],["meta",{"property":"og:title","content":"请求消息处理器"}],["meta",{"property":"og:description","content":"请求消息处理器 介绍 提示 接收/处理 请求没有强制指定固定类型的处理器，由谁来处理消息取决于 Jt808HandlerMapping 配置。 内置了两个 Jt808HandlerMapping: SimpleJt808RequestHandlerHandlerMapping 能将消息路由到 SimpleJt808RequestHandler 类型的 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-02T14:49:50.000Z"}],["meta",{"property":"article:author","content":"hylexus"}],["meta",{"property":"article:modified_time","content":"2023-05-02T14:49:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"请求消息处理器\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-02T14:49:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"hylexus\\",\\"url\\":\\"https://github.com/hylexus\\"}]}"]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"@Jt808RequestHandlerMapping","slug":"jt808requesthandlermapping","link":"#jt808requesthandlermapping","children":[{"level":3,"title":"介绍","slug":"介绍-1","link":"#介绍-1","children":[]},{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]}]},{"level":2,"title":"SimpleJt808RequestHandler","slug":"simplejt808requesthandler","link":"#simplejt808requesthandler","children":[{"level":3,"title":"介绍","slug":"介绍-2","link":"#介绍-2","children":[]},{"level":3,"title":"示例","slug":"示例-1","link":"#示例-1","children":[]}]}],"git":{"createdTime":1671812085000,"updatedTime":1683038990000,"contributors":[{"name":"hylexus","email":"hylexus@163.com","commits":2}]},"readingTime":{"minutes":1.35,"words":404},"filePathRelative":"v2/jt-808/guide/basic/request-msg-handler.md","localizedDate":"2022年12月24日","autoDesc":true,"excerpt":"\\n<h2>介绍</h2>\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p><strong>接收/处理</strong> 请求没有强制指定固定类型的处理器，由谁来处理消息取决于 <code>Jt808HandlerMapping</code> 配置。</p>\\n</div>\\n<p>内置了两个 <code>Jt808HandlerMapping</code>:</p>\\n<p class=\\"demo\\">\\n    \\n</p>\\n<ul>\\n<li><code>SimpleJt808RequestHandlerHandlerMapping</code> 能将消息路由到 <code>SimpleJt808RequestHandler</code> 类型的 <strong>类级别</strong> 处理器。</li>\\n<li><code>Jt808RequestHandlerMappingHandlerMapping</code> 能将消息路由到 <code>@Jt808RequestHandlerMapping</code> 注解修饰的 <strong>方法级别</strong> 处理器。</li>\\n</ul>"}');export{J as comp,M as data};
