import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as t}from"./app-BEQS3wW-.js";const e={},p=t(`<h1 id="_808数据类型处理器" tabindex="-1"><a class="header-anchor" href="#_808数据类型处理器"><span>808数据类型处理器</span></a></h1><h2 id="jt808bytereader" tabindex="-1"><a class="header-anchor" href="#jt808bytereader"><span>Jt808ByteReader</span></a></h2><p>用来从 <code>ByteBuf</code> 中读取指定类型的 <code>JT/T-808</code> 数据类型。</p><div class="hint-container tip"><p class="hint-container-title">内置的支持 Jt808ByteReader 的类</p><p><code>Jt808Request.bodyAsReader()</code> 方法可以将消息体转换为 <code>Jt808ByteReader</code> 来手动读取数据。</p></div><h3 id="简单示例" tabindex="-1"><a class="header-anchor" href="#简单示例"><span>简单示例</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Jt808ByteReaderTest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">ByteBuf</span> originalByteBuf <span class="token operator">=</span> <span class="token class-name">ByteBufAllocator</span><span class="token punctuation">.</span><span class="token constant">DEFAULT</span><span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 下面两行代码给原始ByteBuf中加入一些测试数据</span>
            <span class="token class-name">JtProtocolUtils</span><span class="token punctuation">.</span><span class="token function">writeBcd</span><span class="token punctuation">(</span>originalByteBuf<span class="token punctuation">,</span> <span class="token string">&quot;10203040&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">JtProtocolUtils</span><span class="token punctuation">.</span><span class="token function">writeDword</span><span class="token punctuation">(</span>originalByteBuf<span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 下面依次从 originalByteBuf 中读取 BCD、UnsignedDword</span>
            <span class="token keyword">final</span> <span class="token class-name">ByteBuf</span> afterRead <span class="token operator">=</span> <span class="token class-name">Jt808ByteReader</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>originalByteBuf<span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">readBcd</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> bcdString <span class="token operator">-&gt;</span> <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;10203040&quot;</span><span class="token punctuation">,</span> bcdString<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">readUnsignedDword</span><span class="token punctuation">(</span>dword <span class="token operator">-&gt;</span> <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> dword<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">readable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 读取完成之后，Jt808ByteReader 不会改变内部 originalByteBuf 的引用指向</span>
            <span class="token function">assertSame</span><span class="token punctuation">(</span>originalByteBuf<span class="token punctuation">,</span> afterRead<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token comment">// Jt808ByteReader 只是个辅助类，不会改变内部 readable() 指向的 ByteBuf 的 refCnt</span>
            <span class="token comment">// 应该在恰当的时机释放被包装的 originalByteBuf</span>
            originalByteBuf<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> originalByteBuf<span class="token punctuation">.</span><span class="token function">refCnt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用jt808bytereader来解析请求体" tabindex="-1"><a class="header-anchor" href="#使用jt808bytereader来解析请求体"><span>使用Jt808ByteReader来解析请求体</span></a></h3><p>除了使用 <code>@Jt808RequestBody</code> 标记的实体类来解析请求，也可以通过 <code>Jt808ByteReader</code> 来手动读取数据：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TerminalRegisterMsgHandlerV2013</span> <span class="token keyword">implements</span> <span class="token class-name">SimpleJt808RequestHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Jt808Response</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token comment">// ...</span>

    <span class="token comment">// 除了使用注解，也可以通过 \`Jt808ByteReader\` 来手动读取数据</span>
    <span class="token keyword">public</span> <span class="token class-name">Jt808Response</span> <span class="token function">handleMsg</span><span class="token punctuation">(</span><span class="token class-name">Jt808ServerExchange</span> exchange<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        exchange<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">bodyAsReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">// 1. [0-2) WORD 省域ID</span>
                <span class="token punctuation">.</span><span class="token function">readUnsignedWord</span><span class="token punctuation">(</span>provinceId <span class="token operator">-&gt;</span> log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;省域ID:{}&quot;</span><span class="token punctuation">,</span> provinceId<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment">// 2. [2-4) WORD 省域ID</span>
                <span class="token punctuation">.</span><span class="token function">readUnsignedWord</span><span class="token punctuation">(</span>cityId <span class="token operator">-&gt;</span> log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;省域ID:{}&quot;</span><span class="token punctuation">,</span> cityId<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment">// 3. [4-9) BYTE[5] 制造商ID</span>
                <span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> manufacturerId <span class="token operator">-&gt;</span> log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;制造商ID:{}&quot;</span><span class="token punctuation">,</span> manufacturerId<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment">// 4. [9-29) BYTE[20] 终端型号</span>
                <span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> terminalType <span class="token operator">-&gt;</span> log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;终端型号:{}&quot;</span><span class="token punctuation">,</span> terminalType<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment">// 5. [29-36) BYTE[7] 终端ID</span>
                <span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> terminalId <span class="token operator">-&gt;</span> log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;终端ID:{}&quot;</span><span class="token punctuation">,</span> terminalId<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment">// 6. [36]   BYTE    车牌颜色</span>
                <span class="token punctuation">.</span><span class="token function">readByte</span><span class="token punctuation">(</span>color <span class="token operator">-&gt;</span> log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;车牌颜色:{}&quot;</span><span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment">// 7. [37,n)   String    车辆标识</span>
                <span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span>exchange<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">msgBodyLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">37</span><span class="token punctuation">,</span> carIdentifier <span class="token operator">-&gt;</span> log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;车辆标识:{}&quot;</span><span class="token punctuation">,</span> carIdentifier<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jt808bytewriter" tabindex="-1"><a class="header-anchor" href="#jt808bytewriter"><span>Jt808ByteWriter</span></a></h2><p>用来像 <code>ByteBuf</code> 中写入指定类型的 <code>JT/T-808</code> 数据类型。</p><div class="hint-container tip"><p class="hint-container-title">内置的支持 Jt808ByteWriter 的类</p><ul><li><code>Jt808Response.Jt808ResponseBuilder.body(Consumer&lt;Jt808ByteWriter&gt;)</code></li><li><code>ByteBufJt808MsgBuilder.body(Consumer&lt;Jt808ByteWriter&gt;)</code></li></ul></div><h3 id="简单示例-1" tabindex="-1"><a class="header-anchor" href="#简单示例-1"><span>简单示例</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Jt808ByteWriterTest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">ByteBuf</span> originalByteBuf <span class="token operator">=</span> <span class="token class-name">ByteBufAllocator</span><span class="token punctuation">.</span><span class="token constant">DEFAULT</span><span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">final</span> <span class="token class-name">Jt808ByteWriter</span> writer <span class="token operator">=</span> <span class="token class-name">Jt808ByteWriter</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>originalByteBuf<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">final</span> <span class="token class-name">ByteBuf</span> afterWrite <span class="token operator">=</span> writer
                    <span class="token punctuation">.</span><span class="token function">writeBcd</span><span class="token punctuation">(</span><span class="token string">&quot;10203040&quot;</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span><span class="token string">&quot;STRING&quot;</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">writeDWord</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
                    <span class="token comment">// 这里返回的 ByteBuf 应该和初始化传入的是同一个对象</span>
                    <span class="token punctuation">.</span><span class="token function">writable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token function">assertSame</span><span class="token punctuation">(</span>originalByteBuf<span class="token punctuation">,</span> afterWrite<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;10203040535452494E4700000064&quot;</span><span class="token punctuation">,</span> <span class="token class-name">HexStringUtils</span><span class="token punctuation">.</span><span class="token function">byteBufToString</span><span class="token punctuation">(</span>originalByteBuf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;10203040535452494E4700000064&quot;</span><span class="token punctuation">,</span> <span class="token class-name">HexStringUtils</span><span class="token punctuation">.</span><span class="token function">byteBufToString</span><span class="token punctuation">(</span>afterWrite<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token comment">// Jt808ByteWriter 只是个辅助类，不会改变内部 writable() 指向的 ByteBuf 的 refCnt</span>
            <span class="token comment">// 应该在恰当的时机释放被包装的 originalByteBuf</span>
            originalByteBuf<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> originalByteBuf<span class="token punctuation">.</span><span class="token function">refCnt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用jt808bytewriter手动编码响应体" tabindex="-1"><a class="header-anchor" href="#使用jt808bytewriter手动编码响应体"><span>使用Jt808ByteWriter手动编码响应体</span></a></h3><p>除了使用 <code>@Jt808ResponseBody</code> 标记的实体类来编码请求，也可以通过 <code>Jt808ByteWriter</code> 来手动写入数据：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TerminalRegisterMsgHandlerV2013</span> <span class="token keyword">implements</span> <span class="token class-name">SimpleJt808RequestHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Jt808Response</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Jt808Response</span> <span class="token function">handleMsg</span><span class="token punctuation">(</span><span class="token class-name">Jt808ServerExchange</span> exchange<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
        <span class="token keyword">return</span> <span class="token class-name">Jt808Response</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">msgId</span><span class="token punctuation">(</span><span class="token class-name">BuiltinJt808MsgType</span><span class="token punctuation">.</span><span class="token constant">CLIENT_REGISTER_REPLY</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">terminalId</span><span class="token punctuation">(</span>exchange<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">terminalId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">flowId</span><span class="token punctuation">(</span>exchange<span class="token punctuation">.</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextFlowId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span>exchange<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment">// 除了使用注解，也可以通过 \`Jt808ByteWriter\` 来手动写入数据</span>
                <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>writer <span class="token operator">-&gt;</span> writer
                        <span class="token comment">// 1. byte[0,2) WORD 对应的终端注册消息的流水号</span>
                        <span class="token punctuation">.</span><span class="token function">writeWord</span><span class="token punctuation">(</span>exchange<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flowId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token comment">// 2. byte[2,3) BYTE 0:成功;1:车辆已被注册;2:数据库中无该车辆; 3:终端已被注册;4:数据库中无该终端</span>
                        <span class="token punctuation">.</span><span class="token function">writeByte</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
                        <span class="token comment">// 3. byte[3,x) STRING 鉴权码(只有在成功后才有该字段)</span>
                        <span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span><span class="token string">&quot;AuthCode-123&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","jt808-data-type-ops.html.vue"]]),k=JSON.parse('{"path":"/v2/jt-808/guide/utilities/jt808-data-type-ops.html","title":"808数据类型处理器","lang":"zh-CN","frontmatter":{"icon":"change","description":"808数据类型处理器 Jt808ByteReader 用来从 ByteBuf 中读取指定类型的 JT/T-808 数据类型。 内置的支持 Jt808ByteReader 的类 Jt808Request.bodyAsReader() 方法可以将消息体转换为 Jt808ByteReader 来手动读取数据。 简单示例 使用Jt808ByteReader来解...","head":[["meta",{"property":"og:url","content":"https://github.com/hylexus/jt-framework/jt-framework/v2/jt-808/guide/utilities/jt808-data-type-ops.html"}],["meta",{"property":"og:site_name","content":"jt-framework"}],["meta",{"property":"og:title","content":"808数据类型处理器"}],["meta",{"property":"og:description","content":"808数据类型处理器 Jt808ByteReader 用来从 ByteBuf 中读取指定类型的 JT/T-808 数据类型。 内置的支持 Jt808ByteReader 的类 Jt808Request.bodyAsReader() 方法可以将消息体转换为 Jt808ByteReader 来手动读取数据。 简单示例 使用Jt808ByteReader来解..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-12-23T16:14:45.000Z"}],["meta",{"property":"article:author","content":"hylexus"}],["meta",{"property":"article:modified_time","content":"2022-12-23T16:14:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"808数据类型处理器\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-12-23T16:14:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"hylexus\\",\\"url\\":\\"https://github.com/hylexus\\"}]}"]]},"headers":[{"level":2,"title":"Jt808ByteReader","slug":"jt808bytereader","link":"#jt808bytereader","children":[{"level":3,"title":"简单示例","slug":"简单示例","link":"#简单示例","children":[]},{"level":3,"title":"使用Jt808ByteReader来解析请求体","slug":"使用jt808bytereader来解析请求体","link":"#使用jt808bytereader来解析请求体","children":[]}]},{"level":2,"title":"Jt808ByteWriter","slug":"jt808bytewriter","link":"#jt808bytewriter","children":[{"level":3,"title":"简单示例","slug":"简单示例-1","link":"#简单示例-1","children":[]},{"level":3,"title":"使用Jt808ByteWriter手动编码响应体","slug":"使用jt808bytewriter手动编码响应体","link":"#使用jt808bytewriter手动编码响应体","children":[]}]}],"git":{"createdTime":1671812085000,"updatedTime":1671812085000,"contributors":[{"name":"hylexus","email":"hylexus@163.com","commits":1}]},"readingTime":{"minutes":2.36,"words":708},"filePathRelative":"v2/jt-808/guide/utilities/jt808-data-type-ops.md","localizedDate":"2022年12月24日","autoDesc":true,"excerpt":"\\n<h2>Jt808ByteReader</h2>\\n<p>用来从 <code>ByteBuf</code> 中读取指定类型的 <code>JT/T-808</code> 数据类型。</p>\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">内置的支持 Jt808ByteReader 的类</p>\\n<p><code>Jt808Request.bodyAsReader()</code> 方法可以将消息体转换为 <code>Jt808ByteReader</code> 来手动读取数据。</p>\\n</div>\\n<h3>简单示例</h3>"}');export{d as comp,k as data};
