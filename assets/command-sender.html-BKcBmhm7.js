import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as p,b as n,a as s}from"./app-BEQS3wW-.js";const o={},c=s(`<h1 id="消息下发" tabindex="-1"><a class="header-anchor" href="#消息下发"><span>消息下发</span></a></h1><h2 id="手动下发" tabindex="-1"><a class="header-anchor" href="#手动下发"><span>手动下发</span></a></h2><p>所谓手动下发就是指使用 <code>io.github.hylexus.jt.jt808.spec.session.Jt808Session.sendMsgToClient(io.netty.buffer.ByteBuf)</code> 方法来发送数据。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/demo01&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoController</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Jt808CommandSender</span> commandSender<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Jt808SessionManager</span> sessionManager<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">DemoController</span><span class="token punctuation">(</span><span class="token class-name">Jt808CommandSender</span> commandSender<span class="token punctuation">,</span> <span class="token class-name">Jt808SessionManager</span> sessionManager<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>commandSender <span class="token operator">=</span> commandSender<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>sessionManager <span class="token operator">=</span> sessionManager<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/send-some-msg&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMsgBySession</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;terminalId&quot;</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> defaultValue <span class="token operator">=</span> <span class="token string">&quot;013912344323&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> terminalId<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span>sessionManager<span class="token punctuation">.</span><span class="token function">findByTerminalId</span><span class="token punctuation">(</span>terminalId<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;No terminal found with terminalId &quot;</span> <span class="token operator">+</span> terminalId<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment">// 手动编码后通过 Session 下发消息</span>
                <span class="token punctuation">.</span><span class="token function">sendMsgToClient</span><span class="token punctuation">(</span><span class="token class-name">ByteBufAllocator</span><span class="token punctuation">.</span><span class="token constant">DEFAULT</span><span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeBytes</span><span class="token punctuation">(</span><span class="token string">&quot;data will be sent to client&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;GBK&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="commandsender-消息下发流程图" tabindex="-1"><a class="header-anchor" href="#commandsender-消息下发流程图"><span>CommandSender 消息下发流程图</span></a></h2><ol><li>通过 <code>Jt808SessionManager</code> 获取到 <code>Jt808Session</code></li><li>通过上一步中获取到的 <code>Jt808Session</code> 下发消息</li><li>同时生成一个消息应答的 <code>key</code> 放入 <code>CommandWaitingPool</code> 中等待</li><li>出站（服务端下发）</li><li>入站（客户端上报）</li><li>消息处理器处理 <ul><li>这里的消息处理器就是被 <code>@Jt808RequestHandlerMapping</code> 修饰的消息处理方法</li></ul></li><li>这一步应该将收到的客户端消息放入的 <code>CommandWaitingPool</code> 中 <ul><li>然后 <strong>步骤3</strong> 中处于等待状态的线程会拿到这个 <code>key</code> 对应的消息</li><li><strong>步骤3</strong> 和 <strong>步骤7</strong> 生成的 <code>key</code> 必须是一致的，否则 <strong>步骤3</strong> 中的线程取不到值</li><li>同时应该注意：<strong>步骤3</strong> 中的线程应该和 <strong>步骤7</strong> 中的线程分开，不要使用同一个线程，否则会出现线程阻塞问题，取不到值</li></ul></li></ol>`,6),l={class:""},i=["src"],u=s(`<h2 id="通过commandsender下发" tabindex="-1"><a class="header-anchor" href="#通过commandsender下发"><span>通过CommandSender下发</span></a></h2><p>下发消息，并等待。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/demo01&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoController</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Jt808CommandSender</span> commandSender<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Jt808SessionManager</span> sessionManager<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">DemoController</span><span class="token punctuation">(</span><span class="token class-name">Jt808CommandSender</span> commandSender<span class="token punctuation">,</span> <span class="token class-name">Jt808SessionManager</span> sessionManager<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>commandSender <span class="token operator">=</span> commandSender<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>sessionManager <span class="token operator">=</span> sessionManager<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 7E00010005013912344323007B0001810300827E</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/set-terminal-params&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">sendMsg</span><span class="token punctuation">(</span>
            <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;terminalId&quot;</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> defaultValue <span class="token operator">=</span> <span class="token string">&quot;013912344323&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> terminalId<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>

        <span class="token keyword">final</span> <span class="token class-name">RespTerminalSettings</span> param <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RespTerminalSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RespTerminalSettings<span class="token punctuation">.</span>ParamItem</span><span class="token punctuation">&gt;</span></span> paramList <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>
                <span class="token keyword">new</span> <span class="token class-name">RespTerminalSettings<span class="token punctuation">.</span>ParamItem</span><span class="token punctuation">(</span><span class="token number">0x0029</span><span class="token punctuation">,</span> <span class="token class-name">ByteBufAllocator</span><span class="token punctuation">.</span><span class="token constant">DEFAULT</span><span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">RespTerminalSettings<span class="token punctuation">.</span>ParamItem</span><span class="token punctuation">(</span><span class="token number">0x0030</span><span class="token punctuation">,</span> <span class="token class-name">ByteBufAllocator</span><span class="token punctuation">.</span><span class="token constant">DEFAULT</span><span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token number">211</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        param<span class="token punctuation">.</span><span class="token function">setParamList</span><span class="token punctuation">(</span>paramList<span class="token punctuation">)</span><span class="token punctuation">;</span>
        param<span class="token punctuation">.</span><span class="token function">setTotalParamCount</span><span class="token punctuation">(</span>paramList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">final</span> <span class="token class-name">Jt808Session</span> session <span class="token operator">=</span> sessionManager<span class="token punctuation">.</span><span class="token function">findByTerminalId</span><span class="token punctuation">(</span>terminalId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token keyword">int</span> nextFlowId <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">nextFlowId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 1. 生成Key(收到终端回复时会根据这个Key来匹配)</span>
        <span class="token keyword">final</span> <span class="token class-name">Jt808CommandKey</span> commandKey <span class="token operator">=</span> <span class="token class-name">Jt808CommandKey</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>terminalId<span class="token punctuation">,</span> <span class="token class-name">BuiltinJt808MsgType</span><span class="token punctuation">.</span><span class="token constant">CLIENT_COMMON_REPLY</span><span class="token punctuation">,</span> nextFlowId<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">final</span> <span class="token class-name">Object</span> resp <span class="token operator">=</span> commandSender<span class="token punctuation">.</span><span class="token function">sendCommandAndWaitingForReply</span><span class="token punctuation">(</span>commandKey<span class="token punctuation">,</span> param<span class="token punctuation">,</span> <span class="token number">20L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;RESP::::::: {}&quot;</span><span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> resp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>收到结果后，放入 <code>CommandWaitingPool</code>。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Jt808RequestHandler</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonHandler</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Jt808RequestHandlerMapping</span><span class="token punctuation">(</span>msgType <span class="token operator">=</span> <span class="token number">0x0001</span><span class="token punctuation">,</span> versions <span class="token operator">=</span> <span class="token class-name">Jt808ProtocolVersion</span><span class="token punctuation">.</span><span class="token constant">AUTO_DETECTION</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processMsg0001</span><span class="token punctuation">(</span><span class="token class-name">Jt808RequestEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BuiltinTerminalCommonReplyMsg</span><span class="token punctuation">&gt;</span></span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">BuiltinTerminalCommonReplyMsg</span> body <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">String</span> terminalId <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">terminalId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 2. 生成同样的Key</span>
        <span class="token keyword">final</span> <span class="token class-name">Jt808CommandKey</span> commandKey <span class="token operator">=</span> <span class="token class-name">Jt808CommandKey</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>terminalId<span class="token punctuation">,</span> <span class="token class-name">BuiltinJt808MsgType</span><span class="token punctuation">.</span><span class="token constant">CLIENT_COMMON_REPLY</span><span class="token punctuation">,</span> body<span class="token punctuation">.</span><span class="token function">getServerFlowId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 将结果放入CommandWaitingPool</span>
        <span class="token class-name">CommandWaitingPool</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putIfNecessary</span><span class="token punctuation">(</span>commandKey<span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function r(a,k){return e(),p("div",null,[c,n("p",l,[n("img",{src:a.$withBase("/img/v2/basic/command-sender-flow.png")},null,8,i)]),u])}const v=t(o,[["render",r],["__file","command-sender.html.vue"]]),b=JSON.parse('{"path":"/v2/jt-808/guide/basic/command-sender.html","title":"消息下发","lang":"zh-CN","frontmatter":{"icon":"return","description":"消息下发 手动下发 所谓手动下发就是指使用 io.github.hylexus.jt.jt808.spec.session.Jt808Session.sendMsgToClient(io.netty.buffer.ByteBuf) 方法来发送数据。 CommandSender 消息下发流程图 通过 Jt808SessionManager 获取到 Jt8...","head":[["meta",{"property":"og:url","content":"https://github.com/hylexus/jt-framework/jt-framework/v2/jt-808/guide/basic/command-sender.html"}],["meta",{"property":"og:site_name","content":"jt-framework"}],["meta",{"property":"og:title","content":"消息下发"}],["meta",{"property":"og:description","content":"消息下发 手动下发 所谓手动下发就是指使用 io.github.hylexus.jt.jt808.spec.session.Jt808Session.sendMsgToClient(io.netty.buffer.ByteBuf) 方法来发送数据。 CommandSender 消息下发流程图 通过 Jt808SessionManager 获取到 Jt8..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-21T05:52:48.000Z"}],["meta",{"property":"article:author","content":"hylexus"}],["meta",{"property":"article:modified_time","content":"2024-04-21T05:52:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"消息下发\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-21T05:52:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"hylexus\\",\\"url\\":\\"https://github.com/hylexus\\"}]}"]]},"headers":[{"level":2,"title":"手动下发","slug":"手动下发","link":"#手动下发","children":[]},{"level":2,"title":"CommandSender 消息下发流程图","slug":"commandsender-消息下发流程图","link":"#commandsender-消息下发流程图","children":[]},{"level":2,"title":"通过CommandSender下发","slug":"通过commandsender下发","link":"#通过commandsender下发","children":[]}],"git":{"createdTime":1671812085000,"updatedTime":1713678768000,"contributors":[{"name":"hylexus","email":"hylexus@163.com","commits":2}]},"readingTime":{"minutes":1.79,"words":537},"filePathRelative":"v2/jt-808/guide/basic/command-sender.md","localizedDate":"2022年12月24日","autoDesc":true,"excerpt":"\\n<h2>手动下发</h2>\\n<p>所谓手动下发就是指使用 <code>io.github.hylexus.jt.jt808.spec.session.Jt808Session.sendMsgToClient(io.netty.buffer.ByteBuf)</code> 方法来发送数据。</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token annotation punctuation\\">@RestController</span>\\n<span class=\\"token annotation punctuation\\">@RequestMapping</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"/demo01\\"</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">DemoController</span> <span class=\\"token punctuation\\">{</span>\\n\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">final</span> <span class=\\"token class-name\\">Jt808CommandSender</span> commandSender<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">final</span> <span class=\\"token class-name\\">Jt808SessionManager</span> sessionManager<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">DemoController</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Jt808CommandSender</span> commandSender<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Jt808SessionManager</span> sessionManager<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>commandSender <span class=\\"token operator\\">=</span> commandSender<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>sessionManager <span class=\\"token operator\\">=</span> sessionManager<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token annotation punctuation\\">@RequestMapping</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"/send-some-msg\\"</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">sendMsgBySession</span><span class=\\"token punctuation\\">(</span><span class=\\"token annotation punctuation\\">@RequestParam</span><span class=\\"token punctuation\\">(</span>name <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"terminalId\\"</span><span class=\\"token punctuation\\">,</span> required <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">,</span> defaultValue <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"013912344323\\"</span><span class=\\"token punctuation\\">)</span> <span class=\\"token class-name\\">String</span> terminalId<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>sessionManager<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">findByTerminalId</span><span class=\\"token punctuation\\">(</span>terminalId<span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">orElseThrow</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-&gt;</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">IllegalArgumentException</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"No terminal found with terminalId \\"</span> <span class=\\"token operator\\">+</span> terminalId<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token comment\\">// 手动编码后通过 Session 下发消息</span>\\n                <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">sendMsgToClient</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">ByteBufAllocator</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">DEFAULT</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">buffer</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">writeBytes</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"data will be sent to client\\"</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getBytes</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Charset</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">forName</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"GBK\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>"}');export{v as comp,b as data};
