import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o as p,c as o,b as n,d as c,e as l,a as s}from"./app-BEQS3wW-.js";const i={},u=s(`<h1 id="报文构建器" tabindex="-1"><a class="header-anchor" href="#报文构建器"><span>报文构建器</span></a></h1><p>内置了两种 <code>Jt808MsgBuilder</code> 实现类用来构建报文：</p><ul><li>用来构建调试报文</li><li>回复客户端的消息也可以使用 <code>Jt808MsgBuilder</code> 来构建</li></ul><h2 id="entityjt808msgbuilder" tabindex="-1"><a class="header-anchor" href="#entityjt808msgbuilder"><span>EntityJt808MsgBuilder</span></a></h2><p>该实现类通过被 <code>@Jt808ResponseBody</code> 标记的实体类来构建报文。</p><div class="hint-container caution"><p class="hint-container-title">注意</p><ul><li>该实现 <strong>支持</strong> 多次调用 <code>builder.build()</code> 方法</li><li>该实现不需要显式调用 <code>builder.release()</code>；当然即便是显式调用 <code>builder.release()</code>，也不会有任何影响</li><li>方法返回的构建结果需要调用方自己在恰当的时机释放</li></ul></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Jt808MsgBuilderTest</span> <span class="token punctuation">{</span>

    <span class="token comment">// 这里使用-1，通过 Jt808MsgBuilder.msgId(int msgId) 来指定了消息ID</span>
    <span class="token comment">// 也可以直接在这里指定具体的消息ID</span>
    <span class="token annotation punctuation">@Jt808ResponseBody</span><span class="token punctuation">(</span>msgId <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Data</span>
    <span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">TestEntity</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1. 应答流水号 WORD    对应的平台消息的流水号</span>
        <span class="token annotation punctuation">@ResponseField</span><span class="token punctuation">(</span>order <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token constant">WORD</span><span class="token punctuation">)</span>
        <span class="token keyword">int</span> serverFlowId<span class="token punctuation">;</span>

        <span class="token comment">// 2. 应答id WORD     对应的平台消息的 ID</span>
        <span class="token annotation punctuation">@ResponseField</span><span class="token punctuation">(</span>order <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token constant">WORD</span><span class="token punctuation">)</span>
        <span class="token keyword">int</span> serverMsgId<span class="token punctuation">;</span>

        <span class="token comment">// 3. 结果  byte 0:成功/确认;1:失败;2:消息有误;3:不支持</span>
        <span class="token annotation punctuation">@ResponseField</span><span class="token punctuation">(</span>order <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token constant">BYTE</span><span class="token punctuation">)</span>
        <span class="token keyword">int</span> result<span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token comment">// 流水号生成器(这里使用一个永远返回0的生成器用来调试)</span>
    <span class="token comment">// 可以使用 Jt808Session(已经实现了Jt808FlowIdGenerator) 或者 Jt808FlowIdGenerator.DEFAULT(默认实现类) 来生成自增的流水号</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Jt808FlowIdGenerator</span> <span class="token constant">ALWAYS_RETURN_0</span> <span class="token operator">=</span> step <span class="token operator">-&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">testEntityMsgBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 通过实体类来转换消息体内容</span>
        <span class="token keyword">final</span> <span class="token class-name">TestEntity</span> entity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setServerFlowId</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setServerMsgId</span><span class="token punctuation">(</span><span class="token number">0x8103</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setResult</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">final</span> <span class="token class-name">EntityJt808MsgBuilder</span> builder <span class="token operator">=</span> <span class="token class-name">Jt808MsgBuilder</span><span class="token punctuation">.</span><span class="token function">newEntityBuilder</span><span class="token punctuation">(</span><span class="token constant">ALWAYS_RETURN_0</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token class-name">Jt808ProtocolVersion</span><span class="token punctuation">.</span><span class="token constant">VERSION_2013</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">terminalId</span><span class="token punctuation">(</span><span class="token string">&quot;013912344323&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">msgId</span><span class="token punctuation">(</span><span class="token class-name">BuiltinJt808MsgType</span><span class="token punctuation">.</span><span class="token constant">CLIENT_COMMON_REPLY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">final</span> <span class="token class-name">ByteBuf</span> result <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;7E0001000501391234432300000000810300F87E&quot;</span><span class="token punctuation">,</span> <span class="token class-name">HexStringUtils</span><span class="token punctuation">.</span><span class="token function">byteBufToString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;7E0001000501391234432300000000810300F87E&quot;</span><span class="token punctuation">,</span> builder<span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">refCnt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        result<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">refCnt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="bytebufjt808msgbuilder" tabindex="-1"><a class="header-anchor" href="#bytebufjt808msgbuilder"><span>ByteBufJt808MsgBuilder</span></a></h2><p>该实现类通过 <code>Jt808ByteWriter</code> (<code>ByteBuf</code>) 来构建报文。</p><div class="hint-container caution"><p class="hint-container-title">注意</p><ul><li>该实现 <strong>不支持</strong> 多次调用 <code>builder.build()</code> 方法</li><li>该实现需要调用 <code>builder.release()</code> 方法来释放 <code>builder</code> 内部用到的临时 <code>ByteBuf</code></li><li>推荐在 <code>try-with-resources</code> 块中使用</li><li>方法返回的构建结果需要调用方自己在恰当的时机释放</li></ul></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Jt808MsgBuilderTest</span> <span class="token punctuation">{</span>

    <span class="token comment">// 流水号生成器(这里使用一个永远返回0的生成器用来调试)</span>
    <span class="token comment">// 可以使用 Jt808Session(已经实现了Jt808FlowIdGenerator) 或者 Jt808FlowIdGenerator.DEFAULT(默认实现类) 来生成自增的流水号</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Jt808FlowIdGenerator</span> <span class="token constant">ALWAYS_RETURN_0</span> <span class="token operator">=</span> step <span class="token operator">-&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testByteBufMsgBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// final ByteBuf originalBuf = ByteBufAllocator.DEFAULT.buffer(128);</span>
        <span class="token keyword">final</span> <span class="token class-name">ByteBuf</span> originalBuf <span class="token operator">=</span> <span class="token class-name">Unpooled</span><span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">ByteBufJt808MsgBuilder</span> builder <span class="token operator">=</span> <span class="token class-name">Jt808MsgBuilder</span><span class="token punctuation">.</span><span class="token function">newByteBufBuilder</span><span class="token punctuation">(</span><span class="token constant">ALWAYS_RETURN_0</span><span class="token punctuation">,</span> originalBuf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            builder<span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token class-name">Jt808ProtocolVersion</span><span class="token punctuation">.</span><span class="token constant">VERSION_2013</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">msgId</span><span class="token punctuation">(</span><span class="token class-name">BuiltinJt808MsgType</span><span class="token punctuation">.</span><span class="token constant">CLIENT_COMMON_REPLY</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">terminalId</span><span class="token punctuation">(</span><span class="token string">&quot;013912344323&quot;</span><span class="token punctuation">)</span>
                    <span class="token comment">// 消息体借助 Jt808ByteWriter 来写入内容</span>
                    <span class="token comment">// 也可以直接提供一个已经写好内容的 ByteBuf 用来充当消息体</span>
                    <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>writer <span class="token operator">-&gt;</span> writer
                            <span class="token comment">// 1. 应答流水号 WORD    对应的平台消息的流水号</span>
                            <span class="token punctuation">.</span><span class="token function">writeWord</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
                            <span class="token comment">// 2. 应答id WORD     对应的平台消息的 ID</span>
                            <span class="token punctuation">.</span><span class="token function">writeWord</span><span class="token punctuation">(</span><span class="token number">0x8103</span><span class="token punctuation">)</span>
                            <span class="token comment">// 3. 结果  byte 0:成功/确认;1:失败;2:消息有误;3:不支持</span>
                            <span class="token punctuation">.</span><span class="token function">writeByte</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
                    <span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">final</span> <span class="token class-name">ByteBuf</span> result <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;7E0001000501391234432300000000810300F87E&quot;</span><span class="token punctuation">,</span> <span class="token class-name">HexStringUtils</span><span class="token punctuation">.</span><span class="token function">byteBufToString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">refCnt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> originalBuf<span class="token punctuation">.</span><span class="token function">refCnt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 在恰当的时机释放构建结果</span>
            result<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">refCnt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// try-with-resource 释放了 originalBuf</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> originalBuf<span class="token punctuation">.</span><span class="token function">refCnt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),r={id:"rebuildablebytebufjt808msgbuilder",tabindex:"-1"},d={class:"header-anchor",href:"#rebuildablebytebufjt808msgbuilder"},k=s(`<p>该实现类通过 <code>Jt808ByteWriter</code> (<code>ByteBuf</code>) 来构建报文。</p><div class="hint-container caution"><p class="hint-container-title">注意</p><ul><li>该实现 <strong>支持</strong> 多次调用 <code>builder.build()</code> 方法</li><li>该实现需要调用 <code>builder.release()</code> 方法来释放 <code>builder</code> 内部用到的临时 <code>ByteBuf</code></li><li>推荐在 <code>try-with-resources</code> 块中使用</li><li>方法返回的构建结果需要调用方自己在恰当的时机释放</li></ul></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">RebuildableByteBufJt808MsgBuilderTest</span> <span class="token punctuation">{</span>
    
    <span class="token class-name">Jt808FlowIdGenerator</span> flowIdGenerator <span class="token operator">=</span> step <span class="token operator">-&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">ByteBuf</span> originalBuf <span class="token operator">=</span> <span class="token class-name">ByteBufAllocator</span><span class="token punctuation">.</span><span class="token constant">DEFAULT</span><span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token keyword">var</span> builder <span class="token operator">=</span> <span class="token class-name">Jt808MsgBuilder</span><span class="token punctuation">.</span><span class="token function">newRebuildableByteBufBuilder</span><span class="token punctuation">(</span>flowIdGenerator<span class="token punctuation">,</span> originalBuf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            builder<span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token class-name">Jt808ProtocolVersion</span><span class="token punctuation">.</span><span class="token constant">VERSION_2013</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">msgId</span><span class="token punctuation">(</span><span class="token class-name">BuiltinJt808MsgType</span><span class="token punctuation">.</span><span class="token constant">CLIENT_COMMON_REPLY</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">terminalId</span><span class="token punctuation">(</span><span class="token string">&quot;013912344323&quot;</span><span class="token punctuation">)</span>
                    <span class="token comment">// 消息体借助 Jt808ByteWriter 来写入内容</span>
                    <span class="token comment">// 也可以直接提供一个已经写好内容的 ByteBuf 用来充当消息体</span>
                    <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>writer <span class="token operator">-&gt;</span> writer
                            <span class="token comment">// 1. 应答流水号 WORD    对应的平台消息的流水号</span>
                            <span class="token punctuation">.</span><span class="token function">writeWord</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
                            <span class="token comment">// 2. 应答id WORD     对应的平台消息的 ID</span>
                            <span class="token punctuation">.</span><span class="token function">writeWord</span><span class="token punctuation">(</span><span class="token number">0x8103</span><span class="token punctuation">)</span>
                            <span class="token comment">// 3. 结果  byte 0:成功/确认;1:失败;2:消息有误;3:不支持</span>
                            <span class="token punctuation">.</span><span class="token function">writeByte</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
                    <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">final</span> <span class="token class-name">ByteBuf</span> result <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">refCnt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;7E0001000501391234432300000000810300F87E&quot;</span><span class="token punctuation">,</span> <span class="token class-name">FormatUtils</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token function">doSomeProcess</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>

            result<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">refCnt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">final</span> <span class="token class-name">ByteBuf</span> result2 <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> result2<span class="token punctuation">.</span><span class="token function">refCnt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token function">doSomeProcess</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token punctuation">;</span>

            result2<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> result2<span class="token punctuation">.</span><span class="token function">refCnt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// try-with-resources 会自动释放 originalBuf</span>
        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> originalBuf<span class="token punctuation">.</span><span class="token function">refCnt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3);function m(v,b){const a=e("Badge");return p(),o("div",null,[u,n("h2",r,[n("a",d,[n("span",null,[c("RebuildableByteBufJt808MsgBuilder "),l(a,{text:"v2.1.4",type:"tip",vertical:"middle"})])])]),k])}const g=t(i,[["render",m],["__file","msg-builder.html.vue"]]),B=JSON.parse('{"path":"/v2/jt-808/guide/utilities/msg-builder.html","title":"报文构建器","lang":"zh-CN","frontmatter":{"icon":"build","description":"报文构建器 内置了两种 Jt808MsgBuilder 实现类用来构建报文： 用来构建调试报文 回复客户端的消息也可以使用 Jt808MsgBuilder 来构建 EntityJt808MsgBuilder 该实现类通过被 @Jt808ResponseBody 标记的实体类来构建报文。 注意 该实现 支持 多次调用 builder.build() 方法...","head":[["meta",{"property":"og:url","content":"https://github.com/hylexus/jt-framework/jt-framework/v2/jt-808/guide/utilities/msg-builder.html"}],["meta",{"property":"og:site_name","content":"jt-framework"}],["meta",{"property":"og:title","content":"报文构建器"}],["meta",{"property":"og:description","content":"报文构建器 内置了两种 Jt808MsgBuilder 实现类用来构建报文： 用来构建调试报文 回复客户端的消息也可以使用 Jt808MsgBuilder 来构建 EntityJt808MsgBuilder 该实现类通过被 @Jt808ResponseBody 标记的实体类来构建报文。 注意 该实现 支持 多次调用 builder.build() 方法..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-08T08:39:44.000Z"}],["meta",{"property":"article:author","content":"hylexus"}],["meta",{"property":"article:modified_time","content":"2024-06-08T08:39:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"报文构建器\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-08T08:39:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"hylexus\\",\\"url\\":\\"https://github.com/hylexus\\"}]}"]]},"headers":[{"level":2,"title":"EntityJt808MsgBuilder","slug":"entityjt808msgbuilder","link":"#entityjt808msgbuilder","children":[]},{"level":2,"title":"ByteBufJt808MsgBuilder","slug":"bytebufjt808msgbuilder","link":"#bytebufjt808msgbuilder","children":[]},{"level":2,"title":"RebuildableByteBufJt808MsgBuilder","slug":"rebuildablebytebufjt808msgbuilder","link":"#rebuildablebytebufjt808msgbuilder","children":[]}],"git":{"createdTime":1671812085000,"updatedTime":1717835984000,"contributors":[{"name":"hylexus","email":"hylexus@163.com","commits":2}]},"readingTime":{"minutes":3.24,"words":972},"filePathRelative":"v2/jt-808/guide/utilities/msg-builder.md","localizedDate":"2022年12月24日","autoDesc":true,"excerpt":"\\n<p>内置了两种 <code>Jt808MsgBuilder</code> 实现类用来构建报文：</p>\\n<ul>\\n<li>用来构建调试报文</li>\\n<li>回复客户端的消息也可以使用 <code>Jt808MsgBuilder</code> 来构建</li>\\n</ul>\\n<h2>EntityJt808MsgBuilder</h2>\\n<p>该实现类通过被 <code>@Jt808ResponseBody</code> 标记的实体类来构建报文。</p>\\n<div class=\\"hint-container caution\\">\\n<p class=\\"hint-container-title\\">注意</p>\\n<ul>\\n<li>该实现 <strong>支持</strong> 多次调用 <code>builder.build()</code> 方法</li>\\n<li>该实现不需要显式调用 <code>builder.release()</code>；当然即便是显式调用 <code>builder.release()</code>，也不会有任何影响</li>\\n<li>方法返回的构建结果需要调用方自己在恰当的时机释放</li>\\n</ul>\\n</div>"}');export{g as comp,B as data};
