import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as o,b as e,a as n}from"./app-BEQS3wW-.js";const l={},i=n(`<h1 id="组件顺序" tabindex="-1"><a class="header-anchor" href="#组件顺序"><span>组件顺序</span></a></h1><p>从 <a href="src/v1/jt-808/guide/basic">协议入门</a> 和 <a href="src/v1/jt-808/guide/annotation-based-dev">注解驱动开发</a> 的文档不难看出以下问题：</p><h2 id="请求消息映射的实现" tabindex="-1"><a class="header-anchor" href="#请求消息映射的实现"><span>请求消息映射的实现</span></a></h2><p>请求消息映射的实现方式：</p><ul><li>手动实现并注册 <code>RequestMsgBodyConverter</code></li><li>基于 <code>@Jt808ReqMsgBody</code> 注解方式处理</li><li>内置了 <code>AuthRequestMsgBodyConverter</code></li></ul><h2 id="请求消息的业务处理的实现" tabindex="-1"><a class="header-anchor" href="#请求消息的业务处理的实现"><span>请求消息的业务处理的实现</span></a></h2><p>请求消息的业务处理实现方式：</p><ul><li>手动实现并注册 <code>MsgHandler</code> 接口</li><li>基于 <code>@Jt808RequestMsgHandler</code> 注解方式处理</li><li>内置了 <code>AuthMsgHandler</code></li></ul><h2 id="引出的问题" tabindex="-1"><a class="header-anchor" href="#引出的问题"><span>引出的问题</span></a></h2><p>以 <code>将请求消息映射为实体类</code> 的 <code>RequestMsgBodyConverter</code> 为例，假如：</p><ul><li><ol><li><code>jt808.entity-scan.enable-builtin-entity = true</code></li></ol><ul><li>至少内置了鉴权消息的实体类</li></ul></li><li><ol start="2"><li>自定义并注册了 <code>RequestMsgBodyConverter</code> 的实现类</li></ol></li><li><ol start="3"><li>同时扫描了 <code>@Jt808ReqMsgBody</code> 修饰的请求消息体实体类</li></ol></li></ul><div class="hint-container caution"><p class="hint-container-title">？？？</p><p>那么此时到底由谁去处理 <code>byte[] -&gt; 请求消息体实体类</code> 的映射功能呢？？？</p></div><ul><li>像处理器链一样逐个往下调用谁能处理就谁处理，否则直接抛到下游？ <ul><li>实现类多了有点头大，实现也有点麻烦。</li><li>所以此处不按这种方式处理</li></ul></li><li>按优先级找一个组件来处理？ <ul><li>个人认为一种消息由一个组件来处理就够了</li><li>如果处理逻辑太复杂，可以在单个组件内调用其他专门的复杂逻辑处理流程</li><li>所以此处选择了这种优先级的处理方式，<strong>相同功能的组件只会按照优先级注册其仅注册一个</strong></li></ul></li></ul><p>所以提供了一个 <code>io.github.hylexus.jt808.support.OrderedComponent</code> 接口，来处理组件注册时的 <code>优先级(相互覆盖)</code> 问题。</p><h2 id="orderedcomponent" tabindex="-1"><a class="header-anchor" href="#orderedcomponent"><span>OrderedComponent</span></a></h2><p>以下是 <code>OrderedComponent</code> 接口的声明：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderedComponent</span> <span class="token punctuation">{</span>

    <span class="token keyword">int</span> <span class="token constant">DEFAULT_ORDER</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> <span class="token constant">ANNOTATION_BASED_DEV_COMPONENT_ORDER</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> <span class="token constant">BUILTIN_COMPONENT_ORDER</span> <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>


    <span class="token keyword">default</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">DEFAULT_ORDER</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">shouldBeReplacedBy</span><span class="token punctuation">(</span><span class="token class-name">OrderedComponent</span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 数字越小优先级越高</span>
        <span class="token comment">// 数字小的覆盖数字大的</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> other<span class="token punctuation">.</span><span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>内置的 <code>OrderedComponent</code> 实现类至少有以下几个：</p>`,18),c={class:""},d=["src"],p=n('<div class="hint-container tip"><p class="hint-container-title">由以上源码不难看出组件的优先级问题：</p><p>相同功能的组件只会 <code>按照优先级注册其仅注册一个</code> ：</p><ul><li><ol><li>手动实现并注册的 <code>MsgHandler</code> 和 <code>RequestMsgBodyConverter</code> 优先级最高</li></ol></li><li><ol start="2"><li>基于注解实现的 <code>MsgHandler</code> 和 <code>RequestMsgBodyConverter</code> 次之</li></ol></li><li><ol start="3"><li>内置组件的优先级最低</li></ol></li></ul></div>',1);function r(s,u){return t(),o("div",null,[i,e("p",c,[e("img",{src:s.$withBase("/img/builtin-ordered-component.png"),alt:"builtin-ordered-component"},null,8,d)]),p])}const v=a(l,[["render",r],["__file","component-order.html.vue"]]),k=JSON.parse('{"path":"/v1/jt-808/guide/more/component-order.html","title":"组件顺序","lang":"zh-CN","frontmatter":{"description":"组件顺序 从 协议入门 和 注解驱动开发 的文档不难看出以下问题： 请求消息映射的实现 请求消息映射的实现方式： 手动实现并注册 RequestMsgBodyConverter 基于 @Jt808ReqMsgBody 注解方式处理 内置了 AuthRequestMsgBodyConverter 请求消息的业务处理的实现 请求消息的业务处理实现方式： 手...","head":[["meta",{"property":"og:url","content":"https://github.com/hylexus/jt-framework/jt-framework/v1/jt-808/guide/more/component-order.html"}],["meta",{"property":"og:site_name","content":"jt-framework"}],["meta",{"property":"og:title","content":"组件顺序"}],["meta",{"property":"og:description","content":"组件顺序 从 协议入门 和 注解驱动开发 的文档不难看出以下问题： 请求消息映射的实现 请求消息映射的实现方式： 手动实现并注册 RequestMsgBodyConverter 基于 @Jt808ReqMsgBody 注解方式处理 内置了 AuthRequestMsgBodyConverter 请求消息的业务处理的实现 请求消息的业务处理实现方式： 手..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-12-23T16:14:45.000Z"}],["meta",{"property":"article:author","content":"hylexus"}],["meta",{"property":"article:modified_time","content":"2022-12-23T16:14:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"组件顺序\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-12-23T16:14:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"hylexus\\",\\"url\\":\\"https://github.com/hylexus\\"}]}"]]},"headers":[{"level":2,"title":"请求消息映射的实现","slug":"请求消息映射的实现","link":"#请求消息映射的实现","children":[]},{"level":2,"title":"请求消息的业务处理的实现","slug":"请求消息的业务处理的实现","link":"#请求消息的业务处理的实现","children":[]},{"level":2,"title":"引出的问题","slug":"引出的问题","link":"#引出的问题","children":[]},{"level":2,"title":"OrderedComponent","slug":"orderedcomponent","link":"#orderedcomponent","children":[]}],"git":{"createdTime":1671812085000,"updatedTime":1671812085000,"contributors":[{"name":"hylexus","email":"hylexus@163.com","commits":1}]},"readingTime":{"minutes":1.91,"words":574},"filePathRelative":"v1/jt-808/guide/more/component-order.md","localizedDate":"2022年12月24日","autoDesc":true,"excerpt":"\\n<p>从 <a href=\\"src/v1/jt-808/guide/basic\\">协议入门</a> 和 <a href=\\"src/v1/jt-808/guide/annotation-based-dev\\">注解驱动开发</a> 的文档不难看出以下问题：</p>\\n<h2>请求消息映射的实现</h2>\\n<p>请求消息映射的实现方式：</p>\\n<ul>\\n<li>手动实现并注册 <code>RequestMsgBodyConverter</code></li>\\n<li>基于 <code>@Jt808ReqMsgBody</code> 注解方式处理</li>\\n<li>内置了 <code>AuthRequestMsgBodyConverter</code></li>\\n</ul>"}');export{v as comp,k as data};
