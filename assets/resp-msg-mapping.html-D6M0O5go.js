import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,b as s,d as n,e as t,w as e,a as i}from"./app-BEQS3wW-.js";const u={},d=s("h1",{id:"响应消息映射",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#响应消息映射"},[s("span",null,"响应消息映射")])],-1),r=s("code",null,"基于注解的响应消息映射",-1),k=i(`<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Jt808RequestMsgHandler</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonHandler</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Jt808RequestMsgHandlerMapping</span><span class="token punctuation">(</span>msgType <span class="token operator">=</span> <span class="token number">0x0102</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">RespMsgBody</span> <span class="token function">processAuthMsg</span><span class="token punctuation">(</span><span class="token class-name">AuthRequestMsgBody</span> msgBody<span class="token punctuation">,</span> <span class="token class-name">RequestMsgHeader</span> header<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;处理鉴权消息 terminalId = {}, authCode = {}&quot;</span><span class="token punctuation">,</span> header<span class="token punctuation">.</span><span class="token function">getTerminalId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msgBody<span class="token punctuation">.</span><span class="token function">getAuthCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">CommonReplyMsgBody</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span><span class="token function">getFlowId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">BuiltinJt808MsgType</span><span class="token punctuation">.</span><span class="token constant">CLIENT_AUTH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="直接返回respmsgbody" tabindex="-1"><a class="header-anchor" href="#直接返回respmsgbody"><span>直接返回RespMsgBody</span></a></h2><p>对于这种直接返回 <code>RespMsgBody</code> 的 <code>MsgHandler</code>，其实转换逻辑已经在 <code>RespMsgBody.toBytes()</code> 里实现了。</p><p>常用的 <code>服务端通用应答消息</code>，可以用内置的 <code>CommonReplyMsgBody</code> 来表示。此处不再赘述。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonReplyMsgBody</span> <span class="token keyword">implements</span> <span class="token class-name">RespMsgBody</span> <span class="token punctuation">{</span>

    <span class="token comment">// 1. 应答流水号 WORD terminal flowId</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> replyFlowId<span class="token punctuation">;</span>
    <span class="token comment">// 2. 应答id WORD 0x0102 ...</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> replyMsgId<span class="token punctuation">;</span>
    <span class="token comment">// 3. 结果  byte 0:成功/确认;1:失败;2:消息有误;3:不支持</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">byte</span> result <span class="token operator">=</span> <span class="token constant">SUCCESS</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">CommonReplyMsgBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">CommonReplyMsgBody</span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token keyword">int</span> replyFlowId<span class="token punctuation">,</span> <span class="token class-name">MsgType</span> replyFor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token constant">SUCCESS</span><span class="token punctuation">,</span> replyFlowId<span class="token punctuation">,</span> replyFor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">CommonReplyMsgBody</span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">byte</span> result<span class="token punctuation">,</span> <span class="token keyword">int</span> replyFlowId<span class="token punctuation">,</span> <span class="token class-name">MsgType</span> replyFor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonReplyMsgBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setResult</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setReplyFlowId</span><span class="token punctuation">(</span>replyFlowId<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setReplyMsgId</span><span class="token punctuation">(</span>replyFor<span class="token punctuation">.</span><span class="token function">getMsgId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Bytes</span><span class="token punctuation">.</span><span class="token function">concatAll</span><span class="token punctuation">(</span>
                <span class="token class-name">IntBitOps</span><span class="token punctuation">.</span><span class="token function">intTo2Bytes</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getReplyFlowId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token class-name">IntBitOps</span><span class="token punctuation">.</span><span class="token function">intTo2Bytes</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getReplyMsgId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">MsgType</span> <span class="token function">replyMsgType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">BuiltinJt808MsgType</span><span class="token punctuation">.</span><span class="token constant">SERVER_COMMON_REPLY</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="不给客户端回复数据" tabindex="-1"><a class="header-anchor" href="#不给客户端回复数据"><span>不给客户端回复数据</span></a></h2><div class="hint-container tip"><p class="hint-container-title">以下情况不会发送数据给客户端：</p><ul><li>手动实现的 <code>MsgHandler</code><ul><li>返回 <code>Optional.empty()</code></li></ul></li><li>基于 <code>@Jt808RequestMsgHandlerMapping</code> 实现的 <code>MsgHandler</code><ul><li>方法返回类型为 <code>void</code></li><li>方法返回值为 <code>VoidRespMsgBody.NO_DATA_WILL_BE_SENT_TO_CLIENT</code></li></ul></li></ul></div><h2 id="jt808respmsgbody" tabindex="-1"><a class="header-anchor" href="#jt808respmsgbody"><span>@Jt808RespMsgBody</span></a></h2><p><code>MsgHandler</code> 除了直接返回 <code>RespMsgBody</code> 外，还可以返回 被 <code>@Jt808RespMsgBody</code> 标记的实体类。</p><h3 id="示例代码" tabindex="-1"><a class="header-anchor" href="#示例代码"><span>示例代码</span></a></h3><ul><li>以下为终端通用应答的示例代码：</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Value</span>
<span class="token comment">// MsgId 0x8001</span>
<span class="token annotation punctuation">@Jt808RespMsgBody</span><span class="token punctuation">(</span>respMsgId <span class="token operator">=</span> <span class="token number">0x8001</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerCommonReplyMsgBody</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1. [0-1] 应答流水号 WORD terminal flowId</span>
    <span class="token annotation punctuation">@CommandField</span><span class="token punctuation">(</span>order <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> targetMsgDataType <span class="token operator">=</span> <span class="token constant">WORD</span><span class="token punctuation">)</span>
    <span class="token keyword">int</span> replyFlowId<span class="token punctuation">;</span>
    <span class="token comment">// 2. [2-3] 应答id WORD 0x0102 ... </span>
    <span class="token annotation punctuation">@CommandField</span><span class="token punctuation">(</span>order <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> targetMsgDataType <span class="token operator">=</span> <span class="token constant">WORD</span><span class="token punctuation">)</span>
    <span class="token keyword">int</span> replyMsgId<span class="token punctuation">;</span>
    <span class="token comment">// 3. [4] 结果  byte 0:成功/确认;1:失败;2:消息有误;3:不支持 </span>
    <span class="token annotation punctuation">@CommandField</span><span class="token punctuation">(</span>order <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> targetMsgDataType <span class="token operator">=</span> <span class="token constant">BYTE</span><span class="token punctuation">)</span>
    <span class="token keyword">byte</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>以下为对应的Handler返回</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Jt808RequestMsgHandler</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonHandler</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Jt808RequestMsgHandlerMapping</span><span class="token punctuation">(</span>msgType <span class="token operator">=</span> <span class="token number">0x0200</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ServerCommonReplyMsgBody</span> <span class="token function">processLocationMsg</span><span class="token punctuation">(</span>
            <span class="token class-name">Session</span> session<span class="token punctuation">,</span> <span class="token class-name">RequestMsgMetadata</span> metadata<span class="token punctuation">,</span>
            <span class="token class-name">RequestMsgHeader</span> header<span class="token punctuation">,</span> <span class="token class-name">LocationUploadRequestMsgBody</span> msgBody<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">assert</span> header<span class="token punctuation">.</span><span class="token function">getMsgId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">BuiltinJt808MsgType</span><span class="token punctuation">.</span><span class="token constant">CLIENT_LOCATION_INFO_UPLOAD</span><span class="token punctuation">.</span><span class="token function">getMsgId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">assert</span> session<span class="token punctuation">.</span><span class="token function">getTerminalId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span><span class="token function">getTerminalId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">assert</span> session<span class="token punctuation">.</span><span class="token function">getTerminalId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>metadata<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTerminalId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">assert</span> metadata<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> header<span class="token punctuation">;</span>

        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;处理位置上报消息 terminalId = {}, msgBody = {}&quot;</span><span class="token punctuation">,</span> header<span class="token punctuation">.</span><span class="token function">getTerminalId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msgBody<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//         return CommonReplyMsgBody.success(header.getFlowId(), BuiltinJt808MsgType.CLIENT_LOCATION_INFO_UPLOAD);</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ServerCommonReplyMsgBody</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span><span class="token function">getFlowId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">CLIENT_LOCATION_INFO_UPLOAD</span><span class="token punctuation">.</span><span class="token function">getMsgId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="属性解释" tabindex="-1"><a class="header-anchor" href="#属性解释"><span>属性解释</span></a></h3><table><thead><tr><th>属性</th><th>解释</th><th>取值示例</th></tr></thead><tbody><tr><td><code>respMsgId</code></td><td>服务端下发消息的 <code>MsgId</code></td><td><code>0x8001</code></td></tr><tr><td><code>desc</code></td><td>描述</td><td></td></tr></tbody></table><h3 id="commandfield" tabindex="-1"><a class="header-anchor" href="#commandfield"><span>@CommandField</span></a></h3><table><thead><tr><th>属性</th><th>解释</th><th>取值示例</th></tr></thead><tbody><tr><td><code>order</code></td><td>字节顺序，值越小越先编码</td><td><code>-1</code>、<code>0</code>、<code>2</code></td></tr><tr><td><code>targetMsgDataType</code></td><td>数据类型</td><td><code>DWORD</code></td></tr><tr><td><code>isNestedCommandField</code></td><td>是否是嵌套类型，<code>true</code> 表示被修饰的字段类型是一个 <code>@CommandField</code> 嵌套的类型</td><td>默认值: <code>false</code></td></tr><tr><td><code>customerDataTypeConverterClass</code></td><td>客户自定义给字段的编码实现</td><td></td></tr></tbody></table>`,18);function m(v,g){const a=o("RouteLink");return c(),l("div",null,[d,s("p",null,[n("本节内容是 "),t(a,{to:"/v1/jt-808/guide/annotation-based-dev/src/v1/jt-808/guide/annotation-based-dev/msg-handler-register.html"},{default:e(()=>[n("基于注解的消息处理器")]),_:1}),n(" 的后续内容。")]),s("p",null,[n("所以本小节所说的 "),r,n(" 都是基于 "),t(a,{to:"/v1/jt-808/guide/annotation-based-dev/src/v1/jt-808/guide/annotation-based-dev/msg-handler-register.html"},{default:e(()=>[n("基于注解的消息处理器")]),_:1}),n(" 而言的，像下面这种处理方式：")]),k])}const h=p(u,[["render",m],["__file","resp-msg-mapping.html.vue"]]),M=JSON.parse('{"path":"/v1/jt-808/guide/annotation-based-dev/resp-msg-mapping.html","title":"响应消息映射","lang":"zh-CN","frontmatter":{"headerDepth":3,"description":"响应消息映射 本节内容是 的后续内容。 所以本小节所说的 基于注解的响应消息映射 都是基于 而言的，像下面这种处理方式： 直接返回RespMsgBody 对于这种直接返回 RespMsgBody 的 MsgHandler，其实转换逻辑已经在 RespMsgBody.toBytes() 里实现了。 常用的 服务端通用应答消息，可以用内置的 CommonR...","head":[["meta",{"property":"og:url","content":"https://github.com/hylexus/jt-framework/jt-framework/v1/jt-808/guide/annotation-based-dev/resp-msg-mapping.html"}],["meta",{"property":"og:site_name","content":"jt-framework"}],["meta",{"property":"og:title","content":"响应消息映射"}],["meta",{"property":"og:description","content":"响应消息映射 本节内容是 的后续内容。 所以本小节所说的 基于注解的响应消息映射 都是基于 而言的，像下面这种处理方式： 直接返回RespMsgBody 对于这种直接返回 RespMsgBody 的 MsgHandler，其实转换逻辑已经在 RespMsgBody.toBytes() 里实现了。 常用的 服务端通用应答消息，可以用内置的 CommonR..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-03T08:03:24.000Z"}],["meta",{"property":"article:author","content":"hylexus"}],["meta",{"property":"article:modified_time","content":"2023-07-03T08:03:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"响应消息映射\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-07-03T08:03:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"hylexus\\",\\"url\\":\\"https://github.com/hylexus\\"}]}"]]},"headers":[{"level":2,"title":"直接返回RespMsgBody","slug":"直接返回respmsgbody","link":"#直接返回respmsgbody","children":[]},{"level":2,"title":"不给客户端回复数据","slug":"不给客户端回复数据","link":"#不给客户端回复数据","children":[]},{"level":2,"title":"@Jt808RespMsgBody","slug":"jt808respmsgbody","link":"#jt808respmsgbody","children":[{"level":3,"title":"示例代码","slug":"示例代码","link":"#示例代码","children":[]},{"level":3,"title":"属性解释","slug":"属性解释","link":"#属性解释","children":[]},{"level":3,"title":"@CommandField","slug":"commandfield","link":"#commandfield","children":[]}]}],"git":{"createdTime":1671812085000,"updatedTime":1688371404000,"contributors":[{"name":"eric","email":"dferic@foxmail.com","commits":1},{"name":"hylexus","email":"hylexus@163.com","commits":1}]},"readingTime":{"minutes":2.11,"words":634},"filePathRelative":"v1/jt-808/guide/annotation-based-dev/resp-msg-mapping.md","localizedDate":"2022年12月24日","autoDesc":true,"excerpt":"\\n<p>本节内容是 <a href=\\"/jt-framework/v1/jt-808/guide/annotation-based-dev/src/v1/jt-808/guide/annotation-based-dev/msg-handler-register.html\\" target=\\"_blank\\">基于注解的消息处理器</a> 的后续内容。</p>\\n<p>所以本小节所说的 <code>基于注解的响应消息映射</code> 都是基于 <a href=\\"/jt-framework/v1/jt-808/guide/annotation-based-dev/src/v1/jt-808/guide/annotation-based-dev/msg-handler-register.html\\" target=\\"_blank\\">基于注解的消息处理器</a> 而言的，像下面这种处理方式：</p>"}');export{h as comp,M as data};
