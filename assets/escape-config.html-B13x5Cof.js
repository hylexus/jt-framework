import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o as p,c as o,b as n,d as s,e as c,a as i}from"./app-BEQS3wW-.js";const l={},u=i(`<h1 id="转义相关" tabindex="-1"><a class="header-anchor" href="#转义相关"><span>转义相关</span></a></h1><div class="hint-container tip"><p class="hint-container-title">提示</p><p>每个硬件厂商实现808协议的时候对转义的处理可能略有不同。</p><p>如果内置的转义逻辑不符合要求，可以自己实现 BytesEncoder 接口实现转义逻辑。</p><p>之后覆盖内置的处理逻辑即可。</p></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Jt808Config</span> <span class="token keyword">extends</span> <span class="token class-name">Jt808ServerConfigurationSupport</span> <span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">BytesEncoder</span> <span class="token function">supplyBytesEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BytesEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">doEscapeForReceive</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MsgEscapeException</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
    
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">doEscapeForSend</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MsgEscapeException</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),r={class:"hint-container tip"},k=n("p",{class:"hint-container-title"},"传送门",-1),d={href:"https://github.com/hylexus/jt-framework/tree/master/samples/jt-808-server-sample-customized",target:"_blank",rel:"noopener noreferrer"};function m(y,v){const a=e("ExternalLinkIcon");return p(),o("div",null,[u,n("div",r,[k,n("p",null,[s("本小节示例可以在 "),n("a",d,[s("samples/jt-808-server-sample-customized"),c(a)]),s(" 找到相关代码。")])])])}const b=t(l,[["render",m],["__file","escape-config.html.vue"]]),g=JSON.parse('{"path":"/v1/jt-808/guide/customization/escape-config.html","title":"转义相关","lang":"zh-CN","frontmatter":{"description":"转义相关 提示 每个硬件厂商实现808协议的时候对转义的处理可能略有不同。 如果内置的转义逻辑不符合要求，可以自己实现 BytesEncoder 接口实现转义逻辑。 之后覆盖内置的处理逻辑即可。 传送门 本小节示例可以在 samples/jt-808-server-sample-customized 找到相关代码。","head":[["meta",{"property":"og:url","content":"https://github.com/hylexus/jt-framework/jt-framework/v1/jt-808/guide/customization/escape-config.html"}],["meta",{"property":"og:site_name","content":"jt-framework"}],["meta",{"property":"og:title","content":"转义相关"}],["meta",{"property":"og:description","content":"转义相关 提示 每个硬件厂商实现808协议的时候对转义的处理可能略有不同。 如果内置的转义逻辑不符合要求，可以自己实现 BytesEncoder 接口实现转义逻辑。 之后覆盖内置的处理逻辑即可。 传送门 本小节示例可以在 samples/jt-808-server-sample-customized 找到相关代码。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-12-23T16:14:45.000Z"}],["meta",{"property":"article:author","content":"hylexus"}],["meta",{"property":"article:modified_time","content":"2022-12-23T16:14:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"转义相关\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-12-23T16:14:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"hylexus\\",\\"url\\":\\"https://github.com/hylexus\\"}]}"]]},"headers":[],"git":{"createdTime":1671812085000,"updatedTime":1671812085000,"contributors":[{"name":"hylexus","email":"hylexus@163.com","commits":1}]},"readingTime":{"minutes":0.48,"words":145},"filePathRelative":"v1/jt-808/guide/customization/escape-config.md","localizedDate":"2022年12月24日","autoDesc":true,"excerpt":"\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p>每个硬件厂商实现808协议的时候对转义的处理可能略有不同。</p>\\n<p>如果内置的转义逻辑不符合要求，可以自己实现 BytesEncoder 接口实现转义逻辑。</p>\\n<p>之后覆盖内置的处理逻辑即可。</p>\\n</div>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token annotation punctuation\\">@Configuration</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Jt808Config</span> <span class=\\"token keyword\\">extends</span> <span class=\\"token class-name\\">Jt808ServerConfigurationSupport</span> <span class=\\"token punctuation\\">{</span>\\n    \\n    <span class=\\"token annotation punctuation\\">@Override</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">BytesEncoder</span> <span class=\\"token function\\">supplyBytesEncoder</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">BytesEncoder</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    \\n            <span class=\\"token annotation punctuation\\">@Override</span>\\n            <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">byte</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> <span class=\\"token function\\">doEscapeForReceive</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">byte</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> bytes<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> start<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> end<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">MsgEscapeException</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n    \\n            <span class=\\"token annotation punctuation\\">@Override</span>\\n            <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">byte</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> <span class=\\"token function\\">doEscapeForSend</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">byte</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> bytes<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> start<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> end<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">MsgEscapeException</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>"}');export{b as comp,g as data};
