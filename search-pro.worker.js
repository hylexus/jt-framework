const V=Object.entries,et=Object.fromEntries,st="ENTRIES",L="KEYS",T="VALUES",_="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case T:return this.value();case L:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const g=c[h],m=i*a,p=m-i;let l=o[m];const f=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let F=f;F<y;++F){const v=g!==t[F],z=o[p+F]+ +v,A=o[p+F+1]+1,w=o[m+F]+1,j=o[m+F+1]=Math.min(z,A,w);j<l&&(l=j)}if(l>s)continue t}R(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=k(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=k(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new D(this,L)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,I(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},k=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return k(e.get(s),t.slice(s.length))},I=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;q(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&q(e.slice(0,-1),n,o)}},q=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],ut=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,M="or",$="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},N=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[M]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),N(n.terms,u)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);N(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},at=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:M,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:$,prefix:(e,t,s)=>t===s.length-1},Ft={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},_t={...Ft,...U},K=Symbol("*"),yt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,u]of e._documentIds){const i=n.boostDocument?n.boostDocument(u,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},X=(e,t=M)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},S=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],g=o.get(h);if(g==null)continue;let m=g.size;const p=e._avgFieldLength[h];for(const l of g.keys()){if(!e._documentIds.has(l)){ft(e,h,l,s),m-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const y=g.get(l),F=e._fieldLength.get(l)[h],v=dt(y,m,e._documentCount,F,p,r),z=n*a*f*v,A=d.get(l);if(A){A.score+=z,ct(A.terms,t);const w=G(A.match,s);w?w.push(c):A.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...J.weights,...i},h=e._index.get(t.term),g=S(e,t.term,t.term,1,h,o,u,d);let m,p;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(m)for(const[l,f]of m){const y=l.length-t.term.length;if(!y)continue;p?.delete(l);const F=a*l.length/(l.length+.3*y);S(e,t.term,l,F,f,o,u,d,g)}if(p)for(const l of p.keys()){const[f,y]=p.get(l);if(!y)continue;const F=c*l.length/(l.length+y);S(e,t.term,l,F,f,o,u,d,g)}return g},Y=(e,t,s={})=>{if(t===K)return yt(e,s);if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(g=>Y(e,g,a));return X(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(at(i)).map(a=>At(e,a,i));return X(c,i.combineWith)},Q=(e,t,s={})=>{const n=Y(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length||1,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),queryTerms:r,match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Q(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(P),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?_t:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[g,m]of h._documentIds)h._idToShortId.set(m,g);for(const[g,m]of e){const p=new Map;for(const l of Object.keys(m)){let f=m[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(g,p)}return h},B=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},wt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),xt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return Q(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),g=Number(a),m=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(y=>!y.includes(l))),{contents:p}=n[g]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:g,index:h,display:m.map(l=>o.c.map(f=>B(f,l))).flat().filter(l=>l!==null)},r]);else{const l=m.map(f=>B(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:g,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const y=m.map(F=>B(f,F)).filter(F=>F!==null);y.length&&p.push([{type:"text",id:g,...c&&{anchor:h},display:y},r])}}}),V(n).sort(([,o],[,u])=>"max"==="total"?wt(o,u):xt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=ut(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},tt=(e,t,s={})=>Ct(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:n})=>n),bt=et(V(JSON.parse("{\"/\":{\"documentCount\":576,\"nextId\":576,\"documentIds\":{\"0\":\"0\",\"1\":\"0#项目结构\",\"2\":\"0#软件版本\",\"3\":\"1\",\"4\":\"1#联系我们\",\"5\":\"1#赞助\",\"6\":\"2\",\"7\":\"2#mac端调试工具\",\"8\":\"2#linux端调试工具\",\"9\":\"2#windows端调试工具\",\"10\":\"3\",\"11\":\"3#章节目录\",\"12\":\"4\",\"13\":\"4#支持哪些版本的协议\",\"14\":\"4#分包报文的处理\",\"15\":\"4#报文加密解密\",\"16\":\"5\",\"17\":\"6\",\"18\":\"6#请先读我\",\"19\":\"6#章节目录\",\"20\":\"7\",\"21\":\"7#_1-0-12-release\",\"22\":\"7#🐞-bug-fixes\",\"23\":\"7#⭐-new-features\",\"24\":\"7#_1-0-11-release\",\"25\":\"7#⭐-new-features-1\",\"26\":\"7#🐞-bug-fixes-1\",\"27\":\"7#_1-0-10-release\",\"28\":\"7#⭐-new-features-2\",\"29\":\"7#🐞-bug-fixes-2\",\"30\":\"7#_1-0-9-snapshot\",\"31\":\"7#⭐-new-features-3\",\"32\":\"7#🐞-bug-fixes-3\",\"33\":\"7#🔨-others\",\"34\":\"7#_1-0-8-snapshot\",\"35\":\"7#⭐-new-features-4\",\"36\":\"7#🐞-bug-fixes-4\",\"37\":\"7#🔨-others-1\",\"38\":\"7#_1-0-7-snapshot\",\"39\":\"7#⭐-new-features-5\",\"40\":\"7#🐞-bug-fixes-5\",\"41\":\"7#🔨-others-2\",\"42\":\"7#_1-0-5-snapshot\",\"43\":\"7#⭐-new-features-6\",\"44\":\"7#🐞-bug-fixes-6\",\"45\":\"7#🔨-others-3\",\"46\":\"7#_1-0-4-snapshot\",\"47\":\"7#⭐-new-features-7\",\"48\":\"7#🐞-bug-fixes-7\",\"49\":\"7#🔨-others-4\",\"50\":\"7#_1-0-3-snapshot\",\"51\":\"7#bug-fixes\",\"52\":\"8\",\"53\":\"8#_2-0-3-release\",\"54\":\"8#⭐-new-features\",\"55\":\"8#🐞-bug-fixes\",\"56\":\"8#_2-0-3-rc1\",\"57\":\"8#⭐-new-features-1\",\"58\":\"8#🐞-bug-fixes-1\",\"59\":\"8#_2-0-2-release\",\"60\":\"8#⭐-new-features-2\",\"61\":\"8#📔-documentation\",\"62\":\"8#❤️-contributors\",\"63\":\"8#_2-0-2-rc2\",\"64\":\"8#⭐-new-features-3\",\"65\":\"8#🔨-dependency-upgrades\",\"66\":\"8#❤️-contributors-1\",\"67\":\"8#_2-0-2-rc1\",\"68\":\"8#🐞-bug-fixes-2\",\"69\":\"8#⭐-new-features-4\",\"70\":\"8#🔨-dependency-upgrades-1\",\"71\":\"8#❤️-contributors-2\",\"72\":\"8#_2-0-1-release\",\"73\":\"8#🐞-bug-fixes-3\",\"74\":\"8#_2-0-0-release\",\"75\":\"8#⭐-new-features-5\",\"76\":\"8#📔-documentation-1\",\"77\":\"8#❤️-contributors-3\",\"78\":\"9\",\"79\":\"9#_2-1-5-2024-07-20\",\"80\":\"9#⭐-new-features\",\"81\":\"9#🐞-bug-fixes\",\"82\":\"9#🔨-dependency-upgrades\",\"83\":\"9#_2-1-4-2024-06-08\",\"84\":\"9#⭐-new-features-1\",\"85\":\"9#🔨-dependency-upgrades-1\",\"86\":\"9#📔-documentation\",\"87\":\"9#_2-1-4-rc-4-2024-06-02\",\"88\":\"9#⭐-new-features-2\",\"89\":\"9#_2-1-4-rc-3-2024-03-24\",\"90\":\"9#🐞-bug-fixes-1\",\"91\":\"9#_2-1-4-rc-2-2024-01-28\",\"92\":\"9#⭐-new-features-3\",\"93\":\"9#_2-1-4-beta1-2024-01-14\",\"94\":\"9#⭐-new-features-4\",\"95\":\"9#_2-1-3-2023-10-05\",\"96\":\"9#🐞-bug-fixes-2\",\"97\":\"9#_2-1-2-2023-09-01\",\"98\":\"9#⭐-new-features-5\",\"99\":\"9#_2-1-1-2023-05-12\",\"100\":\"9#⭐-new-features-6\",\"101\":\"9#🐞-bug-fixes-3\",\"102\":\"9#_2-1-1-rc3-2023-05-06\",\"103\":\"9#⭐-new-features-7\",\"104\":\"9#_2-1-1-rc2-2023-05-02\",\"105\":\"9#⭐-new-features-8\",\"106\":\"9#_2-1-1-rc1-2023-04-29\",\"107\":\"9#⭐-new-features-9\",\"108\":\"9#🐞-bug-fixes-4\",\"109\":\"9#🔨-others\",\"110\":\"9#_2-1-0\",\"111\":\"9#⭐-new-features-10\",\"112\":\"9#_2-1-0-rc2\",\"113\":\"9#⭐-new-features-11\",\"114\":\"9#_2-1-0-rc1\",\"115\":\"9#⭐-new-features-12\",\"116\":\"9#🔨-dependency-upgrades-2\",\"117\":\"10\",\"118\":\"10#_2-3-0-rc-6-2025-04-20\",\"119\":\"10#⭐-新特性\",\"120\":\"10#_2-3-0-rc-5-2025-04-16\",\"121\":\"10#⚡不兼容的变更\",\"122\":\"10#⭐-新特性-1\",\"123\":\"10#📖-升级参考\",\"124\":\"10#_2-3-0-rc-4-2025-02-24\",\"125\":\"10#🐞-bug-fixes\",\"126\":\"10#_2-3-0-rc-3-2024-12-11\",\"127\":\"10#🐞-bug-fixes-1\",\"128\":\"10#_2-3-0-rc-2-2024-11-29\",\"129\":\"10#⭐-new-features\",\"130\":\"10#_2-3-0-rc-1-2024-08-03\",\"131\":\"10#⭐-new-features-1\",\"132\":\"10#❤️-contributors\",\"133\":\"11\",\"134\":\"12\",\"135\":\"12#消息结构\",\"136\":\"12#消息头\",\"137\":\"13\",\"138\":\"14\",\"139\":\"14#消息结构\",\"140\":\"14#消息头\",\"141\":\"15\",\"142\":\"16\",\"143\":\"16#配置项总览\",\"144\":\"16#默认配置\",\"145\":\"17\",\"146\":\"18\",\"147\":\"18#配置项总览\",\"148\":\"18#request-filter\",\"149\":\"18#program-param-printer\",\"150\":\"19\",\"151\":\"19#配置项总览\",\"152\":\"19#core-pool-size\",\"153\":\"19#max-pool-size\",\"154\":\"19#keep-alive\",\"155\":\"19#max-pending-tasks\",\"156\":\"19#daemon\",\"157\":\"19#pool-name\",\"158\":\"20\",\"159\":\"20#配置项总览\",\"160\":\"20#msg-processor-thread-pool\",\"161\":\"20#msg-processor-executor-group\",\"162\":\"20#thread-count\",\"163\":\"20#max-pending-tasks\",\"164\":\"20#pool-name\",\"165\":\"21\",\"166\":\"21#配置项总览\",\"167\":\"21#built-components\",\"168\":\"21#component-statistics-enabled\",\"169\":\"21#request-handlers-enabled\",\"170\":\"21#logging\",\"171\":\"22\",\"172\":\"22#配置项总览\",\"173\":\"22#max-frame-length\",\"174\":\"23\",\"175\":\"23#配置项总览\",\"176\":\"23#enabled\",\"177\":\"23#port\",\"178\":\"23#boss-thread-count\",\"179\":\"23#worker-thread-count\",\"180\":\"23#prefer-epoll\",\"181\":\"23#idle-state-handler\",\"182\":\"24\",\"183\":\"24#配置项总览\",\"184\":\"24#request-sub-package-storage\",\"185\":\"24#response-sub-package-storage\",\"186\":\"25\",\"187\":\"26\",\"188\":\"26#提示\",\"189\":\"26#章节目录\",\"190\":\"27\",\"191\":\"27#配置项\",\"192\":\"27#protocol\",\"193\":\"27#version\",\"194\":\"27#max-frame-length\",\"195\":\"27#server\",\"196\":\"27#port\",\"197\":\"27#boss-thread-count\",\"198\":\"27#worker-thread-count\",\"199\":\"27#idle-state-handler\",\"200\":\"27#entity-scan\",\"201\":\"27#enabled\",\"202\":\"27#enable-builtin-entity\",\"203\":\"27#base-packages\",\"204\":\"27#register-builtin-request-msg-converters\",\"205\":\"27#handler-scan\",\"206\":\"27#enabled-1\",\"207\":\"27#base-packages-1\",\"208\":\"27#register-builtin-msg-handlers\",\"209\":\"27#exception-handler-scan\",\"210\":\"27#enabled-2\",\"211\":\"27#base-packages-2\",\"212\":\"27#register-builtin-exception-handlers\",\"213\":\"27#msg-processor-thread-pool\",\"214\":\"27#core-pool-size\",\"215\":\"27#maximum-pool-size\",\"216\":\"27#keep-alive-time\",\"217\":\"27#blocking-queue-size\",\"218\":\"27#thread-name-format\",\"219\":\"27#其他配置\",\"220\":\"27#print-component-statistics\",\"221\":\"28\",\"222\":\"28#注意\",\"223\":\"28#章节目录\",\"224\":\"29\",\"225\":\"29#为什么要引入别名机制\",\"226\":\"29#requestfieldalias\",\"227\":\"29#responsefieldalias\",\"228\":\"29#faq\",\"229\":\"29#兼容性\",\"230\":\"29#混合使用\",\"231\":\"30\",\"232\":\"30#请先读我\",\"233\":\"30#示例1-geopoint\",\"234\":\"30#目的\",\"235\":\"30#定义自己的注解\",\"236\":\"30#提供一个转换器\",\"237\":\"30#使用自定义注解\",\"238\":\"30#示例2-bcddatetime\",\"239\":\"30#目的-1\",\"240\":\"30#定义自己的注解-1\",\"241\":\"30#提供一个转换器-1\",\"242\":\"30#使用自定义注解-1\",\"243\":\"30#其他说明\",\"244\":\"31\",\"245\":\"31#相关知识\",\"246\":\"31#请先读我\",\"247\":\"31#byte\",\"248\":\"31#反序列化byte\",\"249\":\"31#序列化byte\",\"250\":\"31#bytes\",\"251\":\"31#反序列化bytes\",\"252\":\"31#序列化bytes\",\"253\":\"31#word\",\"254\":\"31#反序列化word\",\"255\":\"31#序列化word\",\"256\":\"31#dword\",\"257\":\"31#反序列化dword\",\"258\":\"31#序列化dword\",\"259\":\"31#bcd\",\"260\":\"31#反序列化bcd\",\"261\":\"31#序列号bcd\",\"262\":\"31#string\",\"263\":\"31#反序列化string\",\"264\":\"31#序列化string\",\"265\":\"32\",\"266\":\"32#byte\",\"267\":\"32#反序列化byte\",\"268\":\"32#序列化byte\",\"269\":\"32#bytes\",\"270\":\"32#反序列化bytes\",\"271\":\"32#序列化bytes\",\"272\":\"32#word\",\"273\":\"32#反序列化word\",\"274\":\"32#序列化word\",\"275\":\"32#dword\",\"276\":\"32#反序列化dword\",\"277\":\"32#序列化dword\",\"278\":\"32#bcd\",\"279\":\"32#反序列化bcd\",\"280\":\"32#序列号bcd\",\"281\":\"32#string\",\"282\":\"32#反序列化string\",\"283\":\"32#序列化string\",\"284\":\"33\",\"285\":\"34\",\"286\":\"34#_2-1-4之前\",\"287\":\"34#_2-1-4\",\"288\":\"35\",\"289\":\"36\",\"290\":\"36#解析报文到实体类\",\"291\":\"36#测试\",\"292\":\"37\",\"293\":\"37#解析报文到实体类\",\"294\":\"37#测试\",\"295\":\"38\",\"296\":\"39\",\"297\":\"39#jt808requesthandler\",\"298\":\"39#jt808requesthandlermapping\",\"299\":\"39#属性\",\"300\":\"39#示例\",\"301\":\"39#jt808requestbody\",\"302\":\"39#requestfield\",\"303\":\"39#属性-1\",\"304\":\"39#spel\",\"305\":\"39#示例-1\",\"306\":\"39#slicedfrom\",\"307\":\"39#属性-2\",\"308\":\"39#示例-2\",\"309\":\"40\",\"310\":\"40#jt808responsebody\",\"311\":\"40#属性\",\"312\":\"40#示例\",\"313\":\"40#responsefield\",\"314\":\"40#属性-1\",\"315\":\"40#spel\",\"316\":\"40#示例-1\",\"317\":\"41\",\"318\":\"41#手动下发\",\"319\":\"41#commandsender-消息下发流程图\",\"320\":\"41#通过commandsender下发\",\"321\":\"42\",\"322\":\"42#介绍\",\"323\":\"42#示例\",\"324\":\"43\",\"325\":\"44\",\"326\":\"44#介绍\",\"327\":\"44#支持的参数类型\",\"328\":\"44#jt808request\",\"329\":\"44#jt808response\",\"330\":\"44#jt808session\",\"331\":\"44#jt808serverexchange\",\"332\":\"44#jt808requestheader\",\"333\":\"44#jt808requestbody\",\"334\":\"44#jt808requestentity\",\"335\":\"45\",\"336\":\"45#介绍\",\"337\":\"45#jt808requesthandlermapping\",\"338\":\"45#介绍-1\",\"339\":\"45#示例\",\"340\":\"45#simplejt808requesthandler\",\"341\":\"45#介绍-2\",\"342\":\"45#示例-1\",\"343\":\"46\",\"344\":\"47\",\"345\":\"47#分包合并\",\"346\":\"47#分包暂存器\",\"347\":\"47#内置分包暂存器\",\"348\":\"47#示例\",\"349\":\"47#分包补传\",\"350\":\"48\",\"351\":\"48#说明\",\"352\":\"48#jt808responsebody\",\"353\":\"48#说明-1\",\"354\":\"48#示例\",\"355\":\"48#jt808response\",\"356\":\"48#说明-2\",\"357\":\"48#示例-1\",\"358\":\"49\",\"359\":\"49#分包方式\",\"360\":\"49#jt808response\",\"361\":\"49#jt808responsebody\",\"362\":\"49#示例\",\"363\":\"49#分包补传\",\"364\":\"49#分包暂存器\",\"365\":\"49#内置分包暂存器\",\"366\":\"49#示例-1\",\"367\":\"50\",\"368\":\"51\",\"369\":\"51#jt808msgbytesprocessor\",\"370\":\"51#jt808msgdecoder\",\"371\":\"51#jt808msgencoder\",\"372\":\"52\",\"373\":\"52#配置内置业务线程池\",\"374\":\"52#替换内置业务线程池\",\"375\":\"53\",\"376\":\"53#说明\",\"377\":\"53#配置项\",\"378\":\"54\",\"379\":\"55\",\"380\":\"56\",\"381\":\"56#相关资料\",\"382\":\"56#加密方式的判断\",\"383\":\"56#加密-解密报文\",\"384\":\"57\",\"385\":\"57#_2-3-0-rc-5以及之后版本\",\"386\":\"57#示例\",\"387\":\"57#_2-3-0-rc-5之前版本\",\"388\":\"58\",\"389\":\"58#介绍\",\"390\":\"58#使用示例\",\"391\":\"59\",\"392\":\"59#jt808session\",\"393\":\"59#jt808sessionmanager\",\"394\":\"59#jt808sessioneventlistener\",\"395\":\"59#jt808flowidgenerator\",\"396\":\"60\",\"397\":\"61\",\"398\":\"61#为什么会提供\",\"399\":\"61#jt808requestheaderaware\",\"400\":\"61#jt808requestaware\",\"401\":\"62\",\"402\":\"63\",\"403\":\"64\",\"404\":\"64#请先读我\",\"405\":\"64#依赖升级\",\"406\":\"64#spring-boot-2-x\",\"407\":\"64#spring-boot-3-x\",\"408\":\"65\",\"409\":\"65#请先读我\",\"410\":\"65#变更原因\",\"411\":\"65#升级参考\",\"412\":\"66\",\"413\":\"66#作用\",\"414\":\"66#场景示例\",\"415\":\"66#简单使用\",\"416\":\"67\",\"417\":\"67#作用\",\"418\":\"67#场景示例\",\"419\":\"67#如何创建实例\",\"420\":\"68\",\"421\":\"68#作用\",\"422\":\"68#场景示例\",\"423\":\"68#如何创建实例\",\"424\":\"68#注意事项\",\"425\":\"69\",\"426\":\"70\",\"427\":\"70#jt808bytereader\",\"428\":\"70#简单示例\",\"429\":\"70#使用jt808bytereader来解析请求体\",\"430\":\"70#jt808bytewriter\",\"431\":\"70#简单示例-1\",\"432\":\"70#使用jt808bytewriter手动编码响应体\",\"433\":\"71\",\"434\":\"71#entityjt808msgbuilder\",\"435\":\"71#bytebufjt808msgbuilder\",\"436\":\"71#rebuildablebytebufjt808msgbuilder\",\"437\":\"72\",\"438\":\"72#请先读我\",\"439\":\"72#要求\",\"440\":\"72#为什么编译源码一定要-jdk17\",\"441\":\"72#jdk版本要求\",\"442\":\"72#spring-boot版本要求\",\"443\":\"72#编译\",\"444\":\"72#命令行编译\",\"445\":\"72#导入idea\",\"446\":\"72#导入eclipse\",\"447\":\"73\",\"448\":\"73#请先读我\",\"449\":\"73#项目模块介绍\",\"450\":\"73#jdk\",\"451\":\"73#spring-boot\",\"452\":\"73#请先读我-1\",\"453\":\"73#内置版本\",\"454\":\"73#spring-boot-2-x\",\"455\":\"73#spring-boot-3-x\",\"456\":\"74\",\"457\":\"75\",\"458\":\"75#msgtype\",\"459\":\"75#jt808msgtypeparser\",\"460\":\"76\",\"461\":\"77\",\"462\":\"77#创建工程\",\"463\":\"77#添加依赖\",\"464\":\"77#spring-boot-2-x\",\"465\":\"77#spring-boot-3-x\",\"466\":\"77#配置\",\"467\":\"77#测试\",\"468\":\"77#启动项目\",\"469\":\"77#发报文\",\"470\":\"77#服务端\",\"471\":\"78\",\"472\":\"78#jt808request\",\"473\":\"78#jt808response\",\"474\":\"78#jt808session\",\"475\":\"78#jt808serverexchange\",\"476\":\"79\",\"477\":\"80\",\"478\":\"80#数据类型\",\"479\":\"80#_808协议数据类型\",\"480\":\"80#对应java数据类型\",\"481\":\"80#消息结构\",\"482\":\"80#消息头\",\"483\":\"81\",\"484\":\"81#创建工程\",\"485\":\"81#添加依赖\",\"486\":\"81#配置\",\"487\":\"81#测试\",\"488\":\"81#使用发包工具测试鉴权消息\",\"489\":\"82\",\"490\":\"82#jt808requestmsghandleradvice\",\"491\":\"82#jt808exceptionhandler\",\"492\":\"83\",\"493\":\"84\",\"494\":\"84#十六进制报文\",\"495\":\"84#解析位置基本信息\",\"496\":\"84#关于status字段的解析\",\"497\":\"84#_1-手动解析\",\"498\":\"84#_2-使用-slicedfrom解析\",\"499\":\"84#_3-使用-splittablefield解析\",\"500\":\"84#关于经纬度的解析\",\"501\":\"84#_1-解析为4字节的int\",\"502\":\"84#_2-解析为double\",\"503\":\"84#关于位置附加项的解析\",\"504\":\"84#使用-basicfield解析\",\"505\":\"84#使用-extrafield解析\",\"506\":\"85\",\"507\":\"85#jt808requestmsghandler\",\"508\":\"85#jt808requestmsghandlermapping\",\"509\":\"85#参数自动注入\",\"510\":\"85#msghandler注入到spring容器\",\"511\":\"86\",\"512\":\"86#_1-手动下发\",\"513\":\"86#_2-使用commandsender下发\",\"514\":\"86#实现原理\",\"515\":\"86#示例\",\"516\":\"87\",\"517\":\"87#jt808reqmsgbody\",\"518\":\"87#basicfield\",\"519\":\"87#splittablefield\",\"520\":\"87#slicedfrom\",\"521\":\"87#extrafield-extramsgbody\",\"522\":\"88\",\"523\":\"88#直接返回respmsgbody\",\"524\":\"88#不给客户端回复数据\",\"525\":\"88#jt808respmsgbody\",\"526\":\"88#示例代码\",\"527\":\"88#属性解释\",\"528\":\"88#commandfield\",\"529\":\"89\",\"530\":\"90\",\"531\":\"91\",\"532\":\"92\",\"533\":\"93\",\"534\":\"93#手动实现并注册\",\"535\":\"93#基于注解实现\",\"536\":\"94\",\"537\":\"94#手动实现并注册\",\"538\":\"94#实现\",\"539\":\"94#注册自定义msghandler\",\"540\":\"94#基于注解实现\",\"541\":\"95\",\"542\":\"95#扩展msgtype\",\"543\":\"95#定制msgtypeparser\",\"544\":\"96\",\"545\":\"97\",\"546\":\"97#jt808sessionmanager\",\"547\":\"97#jt808sessionmanagereventlistener\",\"548\":\"98\",\"549\":\"99\",\"550\":\"100\",\"551\":\"100#为什么会提供\",\"552\":\"100#requestmsgheaderaware\",\"553\":\"100#requestmsgmetadataaware\",\"554\":\"100#bytesencoderaware\",\"555\":\"101\",\"556\":\"101#请求消息映射的实现\",\"557\":\"101#请求消息的业务处理的实现\",\"558\":\"101#引出的问题\",\"559\":\"101#orderedcomponent\",\"560\":\"102\",\"561\":\"102#组件关系图\",\"562\":\"102#时序图\",\"563\":\"102#msgdispatcher\",\"564\":\"102#msgconsumer\",\"565\":\"103\",\"566\":\"103#配置项\",\"567\":\"103#附件服务器\",\"568\":\"104\",\"569\":\"105\",\"570\":\"106\",\"571\":\"107\",\"572\":\"108\",\"573\":\"109\",\"574\":\"110\",\"575\":\"111\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[1,50],\"2\":[1,14],\"3\":[1],\"4\":[1,15],\"5\":[1,4],\"6\":[1],\"7\":[1,14],\"8\":[1,1],\"9\":[1,1],\"10\":[1],\"11\":[1],\"12\":[1],\"13\":[2,16],\"14\":[1,4],\"15\":[1,7],\"16\":[6,32],\"17\":[1],\"18\":[1,32],\"19\":[1,2],\"20\":[2],\"21\":[4],\"22\":[3,8],\"23\":[3,27],\"24\":[4],\"25\":[3,9],\"26\":[3,11],\"27\":[4],\"28\":[3,10],\"29\":[3,8],\"30\":[4],\"31\":[3,11],\"32\":[3],\"33\":[2,1],\"34\":[4],\"35\":[3,4],\"36\":[3,3],\"37\":[2,1],\"38\":[4],\"39\":[3,20],\"40\":[3,9],\"41\":[2,3],\"42\":[4],\"43\":[3,3],\"44\":[3,3],\"45\":[2,2],\"46\":[4],\"47\":[3,4],\"48\":[3,12],\"49\":[2,6],\"50\":[4,8],\"51\":[2,6],\"52\":[3],\"53\":[4],\"54\":[3,7],\"55\":[3,24],\"56\":[4],\"57\":[3,7],\"58\":[3,24],\"59\":[3],\"60\":[3,2],\"61\":[2,4],\"62\":[2,2],\"63\":[3],\"64\":[3,3],\"65\":[3,6],\"66\":[2,2],\"67\":[3],\"68\":[3,8],\"69\":[3,16],\"70\":[3,14],\"71\":[2,2],\"72\":[4],\"73\":[3,8],\"74\":[3],\"75\":[3,4],\"76\":[2,5],\"77\":[2,3],\"78\":[3],\"79\":[7],\"80\":[3,13],\"81\":[3,14],\"82\":[3,7],\"83\":[7],\"84\":[3,4],\"85\":[3,20],\"86\":[2,4],\"87\":[8],\"88\":[3,11],\"89\":[9],\"90\":[3,5],\"91\":[8],\"92\":[3,9],\"93\":[8],\"94\":[3,1],\"95\":[7],\"96\":[3,6],\"97\":[6],\"98\":[3,2],\"99\":[6],\"100\":[3,8],\"101\":[3,14],\"102\":[7],\"103\":[3,7],\"104\":[7],\"105\":[3,6],\"106\":[7],\"107\":[3,85],\"108\":[3,10],\"109\":[2,15],\"110\":[3],\"111\":[3,16],\"112\":[4],\"113\":[3,15],\"114\":[4],\"115\":[3,69],\"116\":[3,8],\"117\":[3],\"118\":[9],\"119\":[2,8],\"120\":[9],\"121\":[1,12],\"122\":[2,14],\"123\":[2,7],\"124\":[9],\"125\":[3,2],\"126\":[8],\"127\":[3,3],\"128\":[8],\"129\":[3,4],\"130\":[9],\"131\":[3,17],\"132\":[2,3],\"133\":[1,45],\"134\":[1],\"135\":[1,8],\"136\":[1,58],\"137\":[1,3],\"138\":[1],\"139\":[1,8],\"140\":[1,61],\"141\":[1,2],\"142\":[1],\"143\":[1,22],\"144\":[1,15],\"145\":[5,62],\"146\":[4,7],\"147\":[1,12],\"148\":[2,16],\"149\":[3,33],\"150\":[2,13],\"151\":[1,22],\"152\":[3,10],\"153\":[3,10],\"154\":[2,11],\"155\":[3,9],\"156\":[1,4],\"157\":[2,6],\"158\":[2,16],\"159\":[1,15],\"160\":[1,16],\"161\":[4],\"162\":[2,12],\"163\":[3,4],\"164\":[2,13],\"165\":[1,3],\"166\":[1,22],\"167\":[2],\"168\":[3,18],\"169\":[3,25],\"170\":[1,22],\"171\":[1,7],\"172\":[1,7],\"173\":[3,12],\"174\":[1,7],\"175\":[1,30],\"176\":[1,6],\"177\":[1,7],\"178\":[3,12],\"179\":[3,12],\"180\":[2,13],\"181\":[3,47],\"182\":[2,5],\"183\":[1],\"184\":[4,21],\"185\":[4,23],\"186\":[1],\"187\":[1],\"188\":[1,11],\"189\":[1,6],\"190\":[3,16],\"191\":[1,15],\"192\":[1],\"193\":[1,14],\"194\":[3,12],\"195\":[1],\"196\":[1,7],\"197\":[3,14],\"198\":[3,14],\"199\":[3,25],\"200\":[2],\"201\":[1,13],\"202\":[3,13],\"203\":[2,7],\"204\":[5,7],\"205\":[2],\"206\":[1,12],\"207\":[2,8],\"208\":[4,7],\"209\":[3],\"210\":[1,12],\"211\":[2,8],\"212\":[4,7],\"213\":[4,8],\"214\":[3,16],\"215\":[3,12],\"216\":[3,11],\"217\":[3,12],\"218\":[3,9],\"219\":[1],\"220\":[3,15],\"221\":[3],\"222\":[1,8],\"223\":[1,7],\"224\":[4,3],\"225\":[2,108],\"226\":[2,39],\"227\":[2,42],\"228\":[1],\"229\":[1,21],\"230\":[1,20],\"231\":[4],\"232\":[1,7],\"233\":[3],\"234\":[1,37],\"235\":[1,30],\"236\":[1,72],\"237\":[1,41],\"238\":[3],\"239\":[1,41],\"240\":[1,35],\"241\":[1,66],\"242\":[1,48],\"243\":[1,20],\"244\":[5],\"245\":[1],\"246\":[1,64],\"247\":[1],\"248\":[1,19],\"249\":[1,18],\"250\":[1],\"251\":[1,16],\"252\":[1,13],\"253\":[1],\"254\":[1,18],\"255\":[1,17],\"256\":[1],\"257\":[1,16],\"258\":[1,15],\"259\":[1],\"260\":[1,14],\"261\":[1,11],\"262\":[1],\"263\":[1,13],\"264\":[1,10],\"265\":[3],\"266\":[1],\"267\":[1,22],\"268\":[1,21],\"269\":[1],\"270\":[1,18],\"271\":[1,16],\"272\":[1],\"273\":[1,20],\"274\":[1,19],\"275\":[1],\"276\":[1,18],\"277\":[1,17],\"278\":[1],\"279\":[1,15],\"280\":[1,13],\"281\":[1],\"282\":[1,15],\"283\":[1,13],\"284\":[1,1],\"285\":[5],\"286\":[3,61],\"287\":[3,123],\"288\":[1],\"289\":[1,15],\"290\":[1,78],\"291\":[1,4],\"292\":[1,15],\"293\":[1,131],\"294\":[1,4],\"295\":[1,30],\"296\":[1],\"297\":[2,25],\"298\":[2,9],\"299\":[1,20],\"300\":[1,36],\"301\":[2,15],\"302\":[2],\"303\":[1,48],\"304\":[1,35],\"305\":[1,61],\"306\":[2,12],\"307\":[1,11],\"308\":[1,41],\"309\":[1],\"310\":[2,8],\"311\":[1,21],\"312\":[1,19],\"313\":[2],\"314\":[1,30],\"315\":[1,28],\"316\":[1,42],\"317\":[1],\"318\":[1,68],\"319\":[2,37],\"320\":[1,103],\"321\":[1],\"322\":[1,64],\"323\":[1,9],\"324\":[1],\"325\":[1],\"326\":[1,34],\"327\":[1,15],\"328\":[1,20],\"329\":[1,35],\"330\":[1,24],\"331\":[1,35],\"332\":[1,25],\"333\":[2,51],\"334\":[1,51],\"335\":[1],\"336\":[1,19],\"337\":[2],\"338\":[1,14],\"339\":[1,28],\"340\":[1],\"341\":[1,24],\"342\":[1,38],\"343\":[1,14],\"344\":[1],\"345\":[1,9],\"346\":[1,41],\"347\":[1,22],\"348\":[1,77],\"349\":[1,22],\"350\":[1],\"351\":[1,30],\"352\":[2],\"353\":[1,8],\"354\":[1,73],\"355\":[1],\"356\":[1],\"357\":[1,69],\"358\":[1],\"359\":[1,32],\"360\":[1,34],\"361\":[2,19],\"362\":[1,23],\"363\":[1,9],\"364\":[1,38],\"365\":[1,22],\"366\":[1,67],\"367\":[1],\"368\":[1],\"369\":[1,52],\"370\":[1,66],\"371\":[1,40],\"372\":[7,3],\"373\":[1,34],\"374\":[1,18],\"375\":[7],\"376\":[1,13],\"377\":[1,9],\"378\":[1],\"379\":[4,57],\"380\":[5],\"381\":[1,3],\"382\":[1,48],\"383\":[2,75],\"384\":[1,9],\"385\":[5,28],\"386\":[1,79],\"387\":[5,11],\"388\":[1],\"389\":[1,106],\"390\":[1,47],\"391\":[1],\"392\":[1,28],\"393\":[1,73],\"394\":[1,58],\"395\":[1,57],\"396\":[1,29],\"397\":[1,14],\"398\":[2,11],\"399\":[1,10],\"400\":[1,10],\"401\":[1],\"402\":[1],\"403\":[5],\"404\":[1,71],\"405\":[1],\"406\":[4,26],\"407\":[4,23],\"408\":[5],\"409\":[1,15],\"410\":[1,45],\"411\":[1,7],\"412\":[4,7],\"413\":[1,18],\"414\":[1,43],\"415\":[1,55],\"416\":[4,7],\"417\":[1,12],\"418\":[1,49],\"419\":[2,76],\"420\":[4,7],\"421\":[1,11],\"422\":[1,79],\"423\":[2,88],\"424\":[1,22],\"425\":[1],\"426\":[1],\"427\":[1,15],\"428\":[1,47],\"429\":[1,57],\"430\":[1,16],\"431\":[1,42],\"432\":[1,59],\"433\":[1,6],\"434\":[1,103],\"435\":[1,99],\"436\":[1,87],\"437\":[1],\"438\":[1,23],\"439\":[1],\"440\":[3,19],\"441\":[1,79],\"442\":[2,30],\"443\":[1,6],\"444\":[1,63],\"445\":[1,26],\"446\":[1,24],\"447\":[1],\"448\":[1,37],\"449\":[1,29],\"450\":[1,34],\"451\":[2],\"452\":[1,19],\"453\":[1,30],\"454\":[4,61],\"455\":[4,56],\"456\":[1],\"457\":[1],\"458\":[1,67],\"459\":[1,39],\"460\":[1,16],\"461\":[1,15],\"462\":[1,11],\"463\":[1],\"464\":[4,13],\"465\":[4,12],\"466\":[1,25],\"467\":[1],\"468\":[1,37],\"469\":[1,10],\"470\":[1,10],\"471\":[1,11],\"472\":[1,28],\"473\":[1,47],\"474\":[1,36],\"475\":[1,25],\"476\":[2,6],\"477\":[1],\"478\":[1],\"479\":[1,24],\"480\":[1,72],\"481\":[1,8],\"482\":[1,62],\"483\":[1,13],\"484\":[1,11],\"485\":[1,37],\"486\":[1,28],\"487\":[1,36],\"488\":[1,25],\"489\":[1,9],\"490\":[2,11],\"491\":[2,21],\"492\":[1,21],\"493\":[1,26],\"494\":[1,8],\"495\":[1,97],\"496\":[1,11],\"497\":[2,38],\"498\":[3,29],\"499\":[3,50],\"500\":[1,6],\"501\":[2,26],\"502\":[2,41],\"503\":[1,29],\"504\":[2,34],\"505\":[2,64],\"506\":[1,10],\"507\":[2,15],\"508\":[2,52],\"509\":[1,32],\"510\":[1,26],\"511\":[1,12],\"512\":[2,51],\"513\":[2],\"514\":[1,4],\"515\":[1,110],\"516\":[1],\"517\":[2,32],\"518\":[2,43],\"519\":[2,14],\"520\":[2,22],\"521\":[3,24],\"522\":[1,37],\"523\":[1,71],\"524\":[1,20],\"525\":[2,9],\"526\":[1,73],\"527\":[1,9],\"528\":[2,22],\"529\":[1,64],\"530\":[1,36],\"531\":[1,31],\"532\":[1,98],\"533\":[1,7],\"534\":[1,76],\"535\":[1,13],\"536\":[1,52],\"537\":[1],\"538\":[1,112],\"539\":[1,24],\"540\":[1,11],\"541\":[1,9],\"542\":[1,43],\"543\":[1,48],\"544\":[1,28],\"545\":[1,10],\"546\":[1,20],\"547\":[1,46],\"548\":[1,31],\"549\":[1,4],\"550\":[1,14],\"551\":[2,11],\"552\":[1,10],\"553\":[1,10],\"554\":[1,22],\"555\":[1,6],\"556\":[1,8],\"557\":[1,9],\"558\":[1,47],\"559\":[1,40],\"560\":[1],\"561\":[1,4],\"562\":[1],\"563\":[1],\"564\":[1],\"565\":[5,3],\"566\":[1,2],\"567\":[1,203],\"568\":[1,3],\"569\":[2],\"570\":[1],\"571\":[1],\"572\":[1],\"573\":[2],\"574\":[2],\"575\":[2]},\"averageFieldLength\":[1.9479166666666667,23.119981169618605],\"storedFields\":{\"0\":{\"h\":\"主页\"},\"1\":{\"h\":\"项目结构\",\"t\":[\". ├── build-script # gradle用到的构建脚本和checkstyle配置 ├── docs # 文档 (vue-press) ├── gradle ├── jt-808-server-spring-boot-starter # spring-boot-v3 自动配置 (jdk17+) ├── jt-808-server-spring-boot-starter-boot2 # spring-boot-v2 自动配置 (jdk11+) ├── jt-808-server-support # jt-808的实现 ├── jt-core # 一些公共类(后期可能改名为 jt-common) ├── jt-spring # 和 spring 集成相关的类(2.x不再依赖,后期可能删除) └── samples # 示例项目 ├── jt-808-server-sample-bare # 几乎零配置的示例(spring-boot-2.x) ├── jt-808-server-sample-bare-boot3 # 几乎零配置的示例(spring-boot-3.x) ├── jt-808-server-sample-annotation # 注解相关的示例(spring-boot-2.x) ├── jt-808-server-sample-customized # 定制化示例(spring-boot-2.x) ├── jt-808-client-sample-debug # 开发时用来Debug的项目,请忽略 └── jt-808-server-sample-debug # 开发时用来Debug的项目,请忽略 \"]},\"2\":{\"h\":\"软件版本\",\"t\":[\"提示\",\"JDK : 17+\",\"Netty : 4.7.x\",\"VuePress : 2.0.0-beta.61\",\"Gradle : 7.6\"]},\"3\":{\"h\":\"关于我们\"},\"4\":{\"h\":\"联系我们\",\"t\":[\"GitHub 提交 Issue(推荐) \",\"请尽可能地描述清楚自己的问题\",\"异常信息最好有完整的堆栈记录，以及使用的版本\",\"QQ交流群 : 1072477383\",\"上班时间，(本人)不会回复；有问题群里留言即可，会尽最大可能在非工作时间及时处理\",\"另外拜托群里的各位大佬能解答一下新人的疑问\"]},\"5\":{\"h\":\"赞助\",\"t\":[\"项目的发展离不开你的支持，请作者喝一杯🍺吧！\",\"有钱的捧个钱场 没钱的捧个人场\"]},\"6\":{\"h\":\"调试相关\"},\"7\":{\"h\":\"Mac端调试工具\",\"t\":[\"推荐 sokit 发包工具，详情请参考这位兄台的文章 mac下的socket调试工具---sokit\",\"提示\",\"使用 sokit 工具发送 十六进制 报文，请将报文以 [ 和 ] 包起来。\"]},\"8\":{\"h\":\"Linux端调试工具\",\"t\":[\"TODO\",\"TODO\"]},\"9\":{\"h\":\"Windows端调试工具\",\"t\":[\"下载地址\"]},\"10\":{\"h\":\"FAQ\"},\"11\":{\"h\":\"章节目录\"},\"12\":{\"h\":\"报文解析相关\"},\"13\":{\"h\":\"支持哪些版本的协议?\",\"t\":[\"2.0.0 开始支持 混合 版本。\",\"客户端(不同终端)可以是支持 V2011、V2013 或 V2019 的 808协议 的任意终端。\"]},\"14\":{\"h\":\"分包报文的处理\",\"t\":[\"2.0.0 开始支持。\"]},\"15\":{\"h\":\"报文加密解密\",\"t\":[\"2.1.4 开始支持。\",\"报文加解密参考资料：\",\"issues-82\"]},\"16\":{\"h\":\"1.x 和 2.x 有什么区别?\",\"t\":[\"重写了核心 API(Fluent 风格)\",\"使用 Netty 的 ByteBuf 代替了 1.x 中的 byte[ ]\",\"支持分包\",\"支持混合版本(2011/2013/2019)\",\"注解属性支持 SpEL(Spring-Expression-Language)，不再依赖 XxxAware 接口\",\"替换内置组件不再需要继承指定的类\",\"新增 Jt808HandlerInterceptor\",\"但是\",\"2.x 不向下兼容 1.x\"]},\"17\":{\"h\":\"协议扫盲\"},\"18\":{\"h\":\"请先读我\",\"t\":[\"808协议目前(写jt-framework-2.0文档的时刻即 2021-12-15 01:45:17 ) 就 2011、2013、2019 三个版本。\",\"警告\",\"据官方文档描述 2011 和 2013 在消息整体结构上没任何区别(仅仅是消息体的区别)。\",\"2019 版在 消息体属性 和 终端手机号 之间新增了协议版本号属性。\",\"所以，本项目将 V2011 和 V2013 版统一处理(都叫 V2013 )。\"]},\"19\":{\"h\":\"章节目录\",\"t\":[\"808协议 \"]},\"20\":{\"h\":\"1.x\"},\"21\":{\"h\":\"1.0.12-RELEASE\"},\"22\":{\"h\":\"🐞 Bug Fixes\",\"t\":[\"https://github.com/hylexus/jt-framework/issues/44\"]},\"23\":{\"h\":\"⭐ New Features\",\"t\":[\"新增配置项：\",\"jt808.server.idle-state-handler : 对应 io.netty.handler.timeout.IdleStateHandler 的 三个属性：readerIdleTime、 writerIdleTime 、allIdelTime。 默认值都是 20m;\",\"jt808.protocol.max-frame-length : 对应 io.netty.handler.codec.DelimiterBasedFrameDecoder 的 maxFrameLength 属性。\"]},\"24\":{\"h\":\"1.0.11-RELEASE\"},\"25\":{\"h\":\"⭐ New Features\",\"t\":[\"新增 io.github.hylexus.jt.msg.builder.jt808.Jt808MsgBuilder\"]},\"26\":{\"h\":\"🐞 Bug Fixes\",\"t\":[\"https://github.com/hylexus/jt-framework/issues/32\",\"https://github.com/hylexus/jt-framework/issues/33\",\"https://github.com/hylexus/jt-framework/issues/34\",\"https://github.com/hylexus/jt-framework/issues/37\"]},\"27\":{\"h\":\"1.0.10-RELEASE\"},\"28\":{\"h\":\"⭐ New Features\",\"t\":[\"https://github.com/hylexus/jt-framework/pull/28\",\"@Jt808RequestMsgConverter\",\"@Jt808RequestMsgHandler\"]},\"29\":{\"h\":\"🐞 Bug Fixes\",\"t\":[\"https://github.com/hylexus/jt-framework/issues/26\"]},\"30\":{\"h\":\"1.0.9-SNAPSHOT\"},\"31\":{\"h\":\"⭐ New Features\",\"t\":[\"@NestedFieldMapping 支持List类型 (https://github.com/hylexus/jt-framework/issues/25)\"]},\"32\":{\"h\":\"🐞 Bug Fixes\"},\"33\":{\"h\":\"🔨 Others\",\"t\":[\"文档更新\"]},\"34\":{\"h\":\"1.0.8-SNAPSHOT\"},\"35\":{\"h\":\"⭐ New Features\",\"t\":[\"支持2019版: jt808.protocol.version\"]},\"36\":{\"h\":\"🐞 Bug Fixes\",\"t\":[\"@NestedFieldMapping bug\"]},\"37\":{\"h\":\"🔨 Others\",\"t\":[\"文档更新\"]},\"38\":{\"h\":\"1.0.7-SNAPSHOT\"},\"39\":{\"h\":\"⭐ New Features\",\"t\":[\"修改自定义配置的方式 \",\"旧版的Jt808ServerConfigure 容易引发Bean的循环依赖\",\"从1.0.7-RELEASE开始，使用 Jt808ServerConfigurationSupport 来自定义配置\",\"Maven依赖的 scope 从 runtime 改为 compile，涉及到的依赖如下： \",\"Netty\",\"oaks-lib\"]},\"40\":{\"h\":\"🐞 Bug Fixes\",\"t\":[\"https://github.com/hylexus/jt-framework/issues/18\",\"BytesEncoder转义bug\"]},\"41\":{\"h\":\"🔨 Others\",\"t\":[\"Jt808Session#setChannel\",\"BytesEncoder支持校验码逻辑自定义\"]},\"42\":{\"h\":\"1.0.5-SNAPSHOT\"},\"43\":{\"h\":\"⭐ New Features\",\"t\":[\"Jt808SessionManager 重构，支持自定义\"]},\"44\":{\"h\":\"🐞 Bug Fixes\",\"t\":[\"SessionManager#removeBySessionIdAndClose 的bug\"]},\"45\":{\"h\":\"🔨 Others\",\"t\":[\"CommandSender 文档完善\"]},\"46\":{\"h\":\"1.0.4-SNAPSHOT\"},\"47\":{\"h\":\"⭐ New Features\",\"t\":[\"MsgHandler 可选择性地交给Spring管理，以便于在 MsgHandler 中调用其他的由Spring管理的Bean\"]},\"48\":{\"h\":\"🐞 Bug Fixes\",\"t\":[\"https://github.com/hylexus/jt-framework/issues/16\",\"默认读写空闲时间改为20分钟\",\"修复示例代码中消息消息的返回值类型\",\"https://github.com/hylexus/jt-framework/issues/17\",\"边界情况下默认转义逻辑bug\"]},\"49\":{\"h\":\"🔨 Others\",\"t\":[\"优化 Session#currentFlowId\",\"新增 SessionManager#findBySessionId\"]},\"50\":{\"h\":\"1.0.3-SNAPSHOT\",\"t\":[\"MsgHandler 可选择性地交给Spring管理，以便于在 MsgHandler 中调用其他Bean\",\"bug-fix: #16,#17\"]},\"51\":{\"h\":\"Bug Fixes\",\"t\":[\"decoder: 嵌套类型丢失数据 (#b1a8eaca, closes #2)\"]},\"52\":{\"h\":\"2.0.x\"},\"53\":{\"h\":\"2.0.3-RELEASE\"},\"54\":{\"h\":\"⭐ New Features\",\"t\":[\"Jt808Session 新增如下方法: \",\"setAttribute\",\"getAttribute\",\"getRequiredAttribute\",\"removeAttribute\",\"Jt808ServerExchange 新增如下方法 \",\"removeAttribute\"]},\"55\":{\"h\":\"🐞 Bug Fixes\",\"t\":[\"#66\",\"配置项默认值调整:\",\"jt808: server: idle-state-handler: # 改动原因见 https://github.com/hylexus/jt-framework/issues/66 writer-idle-time: 0s # 由 20m 改为 0s(disabled) all-idle-time: 0s # 由 20m 改为 0s(disabled) \"]},\"56\":{\"h\":\"2.0.3-rc1\"},\"57\":{\"h\":\"⭐ New Features\",\"t\":[\"Jt808Session 新增如下方法: \",\"setAttribute\",\"getAttribute\",\"getRequiredAttribute\",\"removeAttribute\",\"Jt808ServerExchange 新增如下方法 \",\"removeAttribute\"]},\"58\":{\"h\":\"🐞 Bug Fixes\",\"t\":[\"https://github.com/hylexus/jt-framework/issues/66\",\"配置项默认值调整:\",\"jt808: server: idle-state-handler: # 改动原因见 https://github.com/hylexus/jt-framework/issues/66 writer-idle-time: 0s # 由 20m 改为 0s(disabled) all-idle-time: 0s # 由 20m 改为 0s(disabled) \"]},\"59\":{\"h\":\"2.0.2-RELEASE\"},\"60\":{\"h\":\"⭐ New Features\",\"t\":[\"新增 Jt808RequestLifecycleListener\"]},\"61\":{\"h\":\"📔 Documentation\",\"t\":[\"新增 Jt808RequestLifecycleListener 文档\",\"新增 辅助工具 文档\"]},\"62\":{\"h\":\"❤️ Contributors\",\"t\":[\"@hylexus\"]},\"63\":{\"h\":\"2.0.2-rc2\"},\"64\":{\"h\":\"⭐ New Features\",\"t\":[\"新增 Jt808MsgBuilder\",\"新增 ByteArrayFieldSerializer\"]},\"65\":{\"h\":\"🔨 Dependency Upgrades\",\"t\":[\"Spring-Boot 版本升级到 2.5.12\"]},\"66\":{\"h\":\"❤️ Contributors\",\"t\":[\"@hylexus\"]},\"67\":{\"h\":\"2.0.2-rc1\"},\"68\":{\"h\":\"🐞 Bug Fixes\",\"t\":[\"https://github.com/hylexus/jt-framework/issues/64\"]},\"69\":{\"h\":\"⭐ New Features\",\"t\":[\"去掉 EventBus，业务线程池使用自定义的 EventExecutorGroup\",\"废弃 jt808.msg-processor.thread-pool.xxx 配置项，使用 jt808.msg-processor.executor-group.xxx 代替\"]},\"70\":{\"h\":\"🔨 Dependency Upgrades\",\"t\":[\"Gradle 版本升级到 6.8.1\",\"Spring-Boot 版本升级到 2.5.7\",\"Netty 版本升级到 4.1.75.Final\"]},\"71\":{\"h\":\"❤️ Contributors\",\"t\":[\"@hylexus\"]},\"72\":{\"h\":\"2.0.1-RELEASE\"},\"73\":{\"h\":\"🐞 Bug Fixes\",\"t\":[\"https://github.com/hylexus/jt-framework/issues/63\"]},\"74\":{\"h\":\"2.0.0-RELEASE\"},\"75\":{\"h\":\"⭐ New Features\",\"t\":[\"注解驱动开发(支持SpEL)\",\"支持消息分包\",\"支持多版本\"]},\"76\":{\"h\":\"📔 Documentation\",\"t\":[\"新增 2.x 文档。\"]},\"77\":{\"h\":\"❤️ Contributors\",\"t\":[\"@dfEric\",\"@hylexus\"]},\"78\":{\"h\":\"2.1.x\"},\"79\":{\"h\":\"2.1.5(2024-07-20)\"},\"80\":{\"h\":\"⭐ New Features\",\"t\":[\"BitOperator 新增方法:\",\"mapIf(...)\",\"setIf(...)\",\"setWithStatus(...)\",\"setWithStatusIf(...)\",\"setRangeIf(...)\",\"resetIf(...)\",\"resetRangeIf(...)\",\"unsignedLongValue(...)\",\"rangedUnsignedIntValue(...)\",\"rangedUnsignedLongValue(...)\"]},\"81\":{\"h\":\"🐞 Bug Fixes\",\"t\":[\"BitOperator 操作 offset >= 31 的 bit 时溢出的问题，涉及到的方法如下：\",\"BitOperator#set(int offset)\",\"BitOperator#reset(int offset)\",\"BitOperatorget(int offset)\"]},\"82\":{\"h\":\"🔨 Dependency Upgrades\",\"t\":[\"oaks-common-utils 升级到 1.0.7\"]},\"83\":{\"h\":\"2.1.4(2024-06-08)\"},\"84\":{\"h\":\"⭐ New Features\",\"t\":[\"完善 Jt808MsgBuilder\",\"新增 RebuildableByteBufJt808MsgBuilder\"]},\"85\":{\"h\":\"🔨 Dependency Upgrades\",\"t\":[\"Gradle : 8.6 升级到 8.8\",\"spring-boot-dependencies\",\"2.7.14 升级到 2.7.18\",\"3.1.2 升级到 3.3.0\",\"spring-cloud-dependencies\",\"2021.0.8 升级到 2021.0.9\",\"2022.0.4 升级到 2023.0.2\"]},\"86\":{\"h\":\"📔 Documentation\",\"t\":[\"新增消息加解密相关文档\",\"新增 RebuildableByteBufJt808MsgBuilder 相关文档\"]},\"87\":{\"h\":\"2.1.4-rc.4(2024-06-02)\"},\"88\":{\"h\":\"⭐ New Features\",\"t\":[\"初步支持消息加解密，详情见: #82\",\"新增 Jt808MsgEncryptionHandler\",\"@Jt808ResponseBody 新增 encryptionType(int) 属性\",\"Jt808Response 新增 encryptionType(int) 属性\",\"Jt808MsgBuilder 新增 encryptionType(int) 属性\"]},\"89\":{\"h\":\"2.1.4-rc.3(2024-03-24)\"},\"90\":{\"h\":\"🐞 Bug Fixes\",\"t\":[\"解决 ExtendedJt808FieldDeserializerLocationExtraItem 没有考虑 length 属性的问题\"]},\"91\":{\"h\":\"2.1.4-rc.2(2024-01-28)\"},\"92\":{\"h\":\"⭐ New Features\",\"t\":[\"优化苏标附件服务器的支持\",\"支持位置附加项列表注解 @RequestFieldAlias.LocationMsgExtraItemMapping()\",\"新增 @RequestField#conditionalOn() 属性\",\"内置几个和苏标相关的实体类\"]},\"93\":{\"h\":\"2.1.4-beta1(2024-01-14)\"},\"94\":{\"h\":\"⭐ New Features\",\"t\":[\"支持苏标附件服务器\"]},\"95\":{\"h\":\"2.1.3(2023-10-05)\"},\"96\":{\"h\":\"🐞 Bug Fixes\",\"t\":[\"BuiltinCommonHandler.processTerminalHeartBeatMsg 应该回复 0x8001 消息，而不是不回复消息\"]},\"97\":{\"h\":\"2.1.2(2023-09-01)\"},\"98\":{\"h\":\"⭐ New Features\",\"t\":[\"参见 #78\"]},\"99\":{\"h\":\"2.1.1(2023-05-12)\"},\"100\":{\"h\":\"⭐ New Features\",\"t\":[\"参见 2.1.1-RC1、2.1.1-RC2、2.1.1-RC3 中的所有新特性。\"]},\"101\":{\"h\":\"🐞 Bug Fixes\",\"t\":[\"jt808.features.program-param-printer.enabled = false 的时候 classpath 下没有 Jackson 依赖时报错的问题。\"]},\"102\":{\"h\":\"2.1.1-RC3(2023-05-06)\"},\"103\":{\"h\":\"⭐ New Features\",\"t\":[\"完善 BitOperator 辅助类\",\"@SlicedFrom 支持 long 类型\"]},\"104\":{\"h\":\"2.1.1-RC2(2023-05-02)\"},\"105\":{\"h\":\"⭐ New Features\",\"t\":[\"对 2.1.1-RC1 中新增特性的简化。\"]},\"106\":{\"h\":\"2.1.1-RC1(2023-04-29)\"},\"107\":{\"h\":\"⭐ New Features\",\"t\":[\"支持通过 注解别名 来扩展@RequestField 和 @ResponseField\",\"并内置了 @RequestFieldAlias 和 @ResponseFieldAlias 别名\",\"现在你可以自定义注解来扩展自定义的数据类型，比如可以自定义一种 LWord(LongWord,64bit) 类型\",\"扩展注解别名: @RequestFieldAlias 和 @ResponseFieldAlias\",\"支持 MsgDataType#BYTES 和 java.lang.String 互转\",\"Geo 类型(经纬度)支持转换为 long/Long、double/Double、BigDecimal\",\"表达时间语义的 BCD 可以转换为 java.lang.String、java.util.Date、java.time.LocalDateTime\",\"java.util.Date 和 java.time.LocalDateTime 可以转为 BCD\",\"Jt808FieldDeserializer 扩展 Context 参数，方便自定义注解\",\"Jt808FieldSerializer 扩展 Context 参数，方便自定义注解\",\"新增 Jt808RequestFilter(需要配置 jt808.features.request-filter.enabled=true) 支持\",\"新增 BitOperator, 支持将 WORD, DWORD, BYTE 反序列化为 BitOperator\",\"废弃 BytesValueWrapper\",\"使用 ByteBufContainer 或 ByteArrayContainer 代替\",\"内置 ByteBufContainer 或 ByteArrayContainer 的类型转换器\",\"新增如下示例消息(按需修改) \",\"BuiltinMsg8103\",\"BuiltinMsg8103Alias\",\"BuiltinMsg8100Alias\",\"BuiltinMsg8300\",\"BuiltinMsg8300Alias\",\"BuiltinMsg8600V2011Alias\",\"BuiltinMsg8600V2013Alias\",\"BuiltinMsg8600V2019Alias\",\"BuiltinMsg8602V2011Alias\",\"BuiltinMsg8602V2013Alias\",\"BuiltinMsg8602V2019Alias\",\"BuiltinMsg8604V2011Alias\",\"BuiltinMsg8604V2013Alias\",\"BuiltinMsg8604V2019Alias\"]},\"108\":{\"h\":\"🐞 Bug Fixes\",\"t\":[\"@RequestField#length() 支持返回 0\",\"内置的空的心跳消息 BuiltinMsg0200 改名为 BuiltinMsg0002(之前命名错误)\"]},\"109\":{\"h\":\"🔨 Others\",\"t\":[\"jt808.msg-processor.executor-group.thread-count 默认值改为 128\",\"新增配置项 jt808.features.program-param-printer.enabled\"]},\"110\":{\"h\":\"2.1.0\"},\"111\":{\"h\":\"⭐ New Features\",\"t\":[\"参见 2.1.0-RC2 和 2.1.0-RC1 的改动记录\",\"settings.gradle 中删除 docs 子模块(无需 gradle 管理)\"]},\"112\":{\"h\":\"2.1.0-RC2\"},\"113\":{\"h\":\"⭐ New Features\",\"t\":[\"jt-808-server-spring-boot-starter 模块 \",\"排除 jt-808-server-spring-boot-autoconfigure 中自带的 2.x 版的 spring-boot\",\"显式引入 3.x 版的 spring-boot\"]},\"114\":{\"h\":\"2.1.0-RC1\"},\"115\":{\"h\":\"⭐ New Features\",\"t\":[\"从 2.1.x 开始，同时支持 spring-boot-2.x 和 spring-boot-3.x。\",\"提供的 starter 的 JDK 版本、spring-boot 版本限制如下：\",\"Module\",\"JDK\",\"spring-boot\",\"Desc\",\"jt-808-server-spring-boot-starter-boot2\",\"11+\",\"[2.2.x, 2.6.x]\",\"为 spring-boot-2.x 提供的 starter\",\"jt-808-server-spring-boot-starter\",\"17+\",\"[3.0.0, ...]\",\"为 spring-boot-3.x 提供的 starter\",\"变更如下:\",\"1). 模块名称拼写错误修改 \",\"2.0.x 中的 jt-808-server-spring-boot-stater 有单词拼写错误(😂): starter 写成了 stater\",\"在 2.1.x 中改成了 jt-808-server-spring-boot-starter-boot2\",\"stater 修改为 starter\",\"添加了 -boot2 后缀，表示这个模块是给 spring-boot-2.x 提供的\",\"2). JDK版本 和 spring-boot版本 修改 \",\"jt-808-server-spring-boot-starter\",\"给 spring-boot-3.x 的项目提供的，是本次新增的模块\",\"JDK: 17\",\"编译之后的 .class 文件版本 : 61(JDK-17)\",\"spring-boot: 3.0.2\",\"单独依赖该模块时必须满足: jdk.version >=17 && spring-boot.version >= 3.0.0\",\"jt-808-server-spring-boot-starter-boot2\",\"给 spring-boot-2.x 的项目提供的，是从之前的 jt-808-server-spring-boot-stater 重命名过来的\",\"JDK: 17\",\"编译之后的 .class 文件版本 : 55(JDK-11)\",\"spring-boot: 2.6.14\",\"单独依赖该模块时必须满足: jdk.version >= 11 && spring-boot.version >= 2.2.x && spring-boot.version <= 2.6.x\",\"3). spring-boot版本 升级 \",\"从 2.5.12 升级到 2.6.24\",\"新增了 spring-boot-3.x 的支持\"]},\"116\":{\"h\":\"🔨 Dependency Upgrades\",\"t\":[\"Gradle 版本升级到 7.6\",\"Spring-Boot 版本升级到 2.6.14\"]},\"117\":{\"h\":\"2.3.x\"},\"118\":{\"h\":\"2.3.0-rc.6(2025-04-20)\"},\"119\":{\"h\":\"⭐ 新特性\",\"t\":[\"新增配置项 jt808.server.enabled = true | false\"]},\"120\":{\"h\":\"2.3.0-rc.5(2025-04-16)\"},\"121\":{\"h\":\"⚡不兼容的变更\",\"t\":[\"JtServerNettyConfigure 及其子接口和实现类 \",\"Jt808ServerNettyConfigure\",\"删除了 DefaultJt808ServerNettyConfigure\",\"新增 BuiltinJt808ServerNettyConfigure\",\"Jt808AttachmentServerNettyConfigure\",\"删除了 DefaultJt808AttachmentServerNettyConfigure\",\"新增 BuiltinJt808AttachmentServerNettyConfigure\",\"AbstractRunner 构造器参数变更\"]},\"122\":{\"h\":\"⭐ 新特性\",\"t\":[\"新增 DynamicFieldBasedJt808MsgEncoder\",\"Jt808CommandSender 新增接方法: \",\"sendCommand(Metadata, List<DynamicField>)\",\"sendCommandWithDynamicFields(Metadata, List<Map<String,Object>>)\",\"sendCommandAndWaitingForReply(Jt808CommandKey, Metadata, List<DynamicField>, Duration)\",\"sendCommandWithDynamicFieldsAndWaitingForReply\"]},\"123\":{\"h\":\"📖 升级参考\",\"t\":[\"文档 - 升级指南 - 升级到2.3.0-rc.5\"]},\"124\":{\"h\":\"2.3.0-rc.4(2025-02-24)\"},\"125\":{\"h\":\"🐞 Bug Fixes\",\"t\":[\"DispatcherHandler 未释放空消息的问题\"]},\"126\":{\"h\":\"2.3.0-rc.3(2024-12-11)\"},\"127\":{\"h\":\"🐞 Bug Fixes\",\"t\":[\"修复 JDK8 环境下启动异常的问题\"]},\"128\":{\"h\":\"2.3.0-rc.2(2024-11-29)\"},\"129\":{\"h\":\"⭐ New Features\",\"t\":[\"新增业务线程池: jt808.msg-handler\"]},\"130\":{\"h\":\"2.3.0-rc.1(2024-08-03)\"},\"131\":{\"h\":\"⭐ New Features\",\"t\":[\"下面模块的最低 JDK 版本从 11 改为 8:\",\"jt-core\",\"jt-808-server-support\",\"jt-808-server-spring-boot-autoconfigure\",\"jt-808-server-spring-boot-starter-boot2\",\"jt-1078-server-support\",\"jt-1078-server-spring-boot-autoconfigure\",\"jt-1078-server-spring-boot-starter-boot2\"]},\"132\":{\"h\":\"❤️ Contributors\",\"t\":[\"@MaxonCinker\",\"@hylexus\"]},\"133\":{\"h\":\"类型映射\",\"t\":[\"这里要介绍的是 JT/T 808 协议中定义的 BYTE、WORD、DWORD、BCD、STRING、BYTES 和 java 数据类型的映射关系。\",\"参考下面两个章节：\",\"内置消息说明\",\"io.github.hylexus.jt.jt808.spec.builtin.msg.req 包下内置了一些 请求消息 实体类映射示例\",\"io.github.hylexus.jt.jt808.spec.builtin.msg.resp 包下内置了一些 响应消息 实体类映射示例\",\"这些类命名格式都是 BuiltinMsgXxx 或 BuiltinMsgXxxAlias, 以 Alias 结尾的示例是 v2.1.1 开始加入的。\",\"这些类只是个示例，很可能不符合你的需求，你应该复制一份出来修改(不同版本可能有改动)。\"]},\"134\":{\"h\":\"V2011\"},\"135\":{\"h\":\"消息结构\",\"t\":[\"标识位\",\"消息头\",\"消息体\",\"校验码\",\"标识位\",\"1byte(0x7e)\",\"16byte\",\"1byte\",\"1byte(0x7e)\"]},\"136\":{\"h\":\"消息头\",\"t\":[\"分包消息 的消息头长度为 16字节\",\"非分包消息 的消息头长度为 12字节\",\"消息头的结构如下所示：\",\"消息ID[0-2) 消息体属性[2-4) 终端手机号[4-10) 消息流水号[10-12) 消息包封装项[12-16) byte[0-2) 消息ID word(16) byte[2-4) 消息体属性 word(16) bit[0-10) 消息体长度 bit[10-13) 数据加密方式 此三位都为 0,表示消息体不加密 第 10 位为 1,表示消息体经过 RSA 算法加密 其它保留 bit[13] 分包 1: 消息体卫长消息,进行分包发送处理,具体分包信息由消息包封装项决定 0: 则消息头中无消息包封装项字段 bit[14-15] 保留 byte[4-10) 终端手机号或设备ID bcd[6] 根据安装后终端自身的手机号转换 手机号不足12 位,则在前面补 0 byte[10-12) 消息流水号 word(16) 按发送顺序从 0 开始循环累加 byte[12-16) 消息包封装项 如果消息体属性中相关标识位确定消息分包处理,则该项有内容 否则无该项 byte[0-2) 消息包总数(word(16)) 该消息分包后得总包数 byte[2-4) 包序号(word(16)) 从 1 开始 \"]},\"137\":{\"h\":\"V2013\",\"t\":[\"整体消息结构和  一致。\"]},\"138\":{\"h\":\"V2019\"},\"139\":{\"h\":\"消息结构\",\"t\":[\"标识位\",\"消息头\",\"消息体\",\"校验码\",\"标识位\",\"1byte(0x7e)\",\"16byte\",\"1byte\",\"1byte(0x7e)\"]},\"140\":{\"h\":\"消息头\",\"t\":[\"非分包消息 的消息头长度为 17字节\",\"分包消息 的消息头长度为 21字节\",\"消息头的结构如下所示：\",\"消息ID[0-2) 消息体属性[2-4) 协议版本号[4] 终端手机号[5-15) 消息流水号[15-17) 消息包封装项[17-21) byte[0-2) 消息ID word(16) byte[2-4) 消息体属性 word(16) bit[0-10) 消息体长度 bit[10-13) 数据加密方式 此三位都为 0,表示消息体不加密 第 10 位为 1,表示消息体经过 RSA 算法加密 其它保留 bit[13] 分包 1: 消息体卫长消息,进行分包发送处理,具体分包信息由消息包封装项决定 0: 则消息头中无消息包封装项字段 bit[14] 版本标识 bit[15] 保留 byte[4] 协议版本号 byte[5-15) 终端手机号或设备ID bcd[10] 根据安装后终端自身的手机号转换 手机号不足12 位,则在前面补 0 byte[15-17) 消息流水号 word(16) 按发送顺序从 0 开始循环累加 byte[17-21) 消息包封装项 如果消息体属性中相关标识位确定消息分包处理,则该项有内容 否则无该项 byte[0-2) 消息包总数(word(16)) 该消息分包后得总包数 byte[2-4) 包序号(word(16)) 从 1 开始 \"]},\"141\":{\"h\":\"TODO\",\"t\":[\"TODO\",\"开发中\"]},\"142\":{\"h\":\"overview\"},\"143\":{\"h\":\"配置项总览\",\"t\":[\"jt808: built-components: # ... features: # v2.1.1 # ... protocol: # ... server: # ... attachment-server: # ... msg-processor: # 2.3.0 新增 msg-handler: # ... request-sub-package-storage: # ... response-sub-package-storage: # ... \"]},\"144\":{\"h\":\"默认配置\",\"t\":[\"默认的配置可以在default-jt808-server-config.yml 中查看。 并且已经将默认的配置加入到了 Spring 的 PropertySources 中，并将其置于最后，名称为 default-jt808-server-config 。\"]},\"145\":{\"h\":\"苏标扩展(v2.1.4)\",\"t\":[\"jt808: ### ...(省略其他配置) ## 苏标附件服务器 attachment-server: ## 是否启用(默认: false) enabled: true # 附件服务器端口(TCP) port: 6809 # 优先使用 Epoll(v2.3.0-rc.5) prefer-epoll: true # this.bossGroup=new NioEventLoopGroup(bossThreadCount); boss-thread-count: 2 # this.workerGroup=new NioEventLoopGroup(workThreadCount); worker-thread-count: 4 ## 0x30316364附件上传报文的最大长度(66560 = 1024 * 65) max-frame-length: 66560 # 处理附件相关指令(0x1210,0x1211,0x1212,0x6364)的线程池线配置 msg-processor: ## 业务线程池配置 executor-group: max-pending-tasks: 64 pool-name: 808-attachment-processor thread-count: 16 \"]},\"146\":{\"h\":\"features(v2.1.1)\",\"t\":[\"提示\",\"该章节介绍的是 jt808.features.xxx 相关的配置。\"]},\"147\":{\"h\":\"配置项总览\",\"t\":[\"jt808: features: request-filter: enabled: false program-param-printer: enabled: false pretty: true \"]},\"148\":{\"h\":\"request-filter\",\"t\":[\"v2.1.1 中引入了 Jt808RequestFilter，但是默认是没有启用的。\",\"如果你要使用 Jt808RequestFilter，请打开 jt808.features.request-filter.enabled = true 这个配置。\"]},\"149\":{\"h\":\"program-param-printer\",\"t\":[\"以 JSON 格式打印 jt-808.xxx 开头的所有配置项在运行时读取到的最终值。\",\"注意\",\"jt808.features.program-param-printer.enabled 默认是 false。\",\"如果你要开启这个配置，请确保 直接或间接 引入了 com.fasterxml.jackson.core:jackson-databind 和 com.fasterxml.jackson.datatype:jackson-datatype-jsr310 依赖。\",\"jt808.features.program-param-printer.pretty 用来控制打印的 JSON 是否是格式化过的。\"]},\"150\":{\"h\":\"message-handler\",\"t\":[\"提示\",\"该章节介绍的是 jt808.msg-handler.xxx 消息处理线程池相关的配置。\",\"参见 java.util.concurrent.ThreadPoolExecutor 。\"]},\"151\":{\"h\":\"配置项总览\",\"t\":[\"jt808: msg-handler: enabled: true core-pool-size: 128 max-pool-size: 256 keep-alive: 1m max-pending-tasks: 256 daemon: true thread-name-prefix: 808-handler \"]},\"152\":{\"h\":\"core-pool-size\",\"t\":[\"参考 java.util.concurrent.ThreadPoolExecutor.corePoolSize。\",\"类型：int\",\"默认值：128\"]},\"153\":{\"h\":\"max-pool-size\",\"t\":[\"参考 java.util.concurrent.ThreadPoolExecutor.maximumPoolSize。\",\"类型：int\",\"默认值：256\"]},\"154\":{\"h\":\"keep-alive\",\"t\":[\"参考 java.util.concurrent.ThreadPoolExecutor.keepAliveTime。\",\"类型：java.time.Duration\",\"默认值：1m\"]},\"155\":{\"h\":\"max-pending-tasks\",\"t\":[\"参考java.util.concurrent.ThreadPoolExecutor.workQueue。\",\"类型：int\",\"默认值：256\"]},\"156\":{\"h\":\"daemon\",\"t\":[\"类型：boolean\",\"默认值：true\"]},\"157\":{\"h\":\"pool-name\",\"t\":[\"线程池的线程名前缀。\",\"类型：String\",\"默认值：808-handler\"]},\"158\":{\"h\":\"message-processor\",\"t\":[\"提示\",\"该章节介绍的是 jt808.msg-processor.executor-group.xxx 消息处理线程池相关的配置。\",\"参见 io.netty.util.concurrent.DefaultEventExecutorGroup 。\"]},\"159\":{\"h\":\"配置项总览\",\"t\":[\"jt808: msg-processor: executor-group: pool-name: 808-msg-processor thread-count: 128 max-pending-tasks: 128 \"]},\"160\":{\"h\":\"\",\"t\":[\"提示\",\"msg-processor.thread-pool.xxx 系列配置在 2.0.2 中已经废弃(存在跨线程资源回收问题)。\",\"使用 jt808.msg-handler 代替。\"]},\"161\":{\"h\":\"msg-processor.executor-group\"},\"162\":{\"h\":\"thread-count\",\"t\":[\"类型：int\",\"默认值： \",\"v2.2.1 之前: Runtime.getRuntime().availableProcessors() * 2\",\"v2.2.1 之后: 128\"]},\"163\":{\"h\":\"max-pending-tasks\",\"t\":[\"类型：int\",\"默认值：128\"]},\"164\":{\"h\":\"pool-name\",\"t\":[\"线程池的线程名前缀。\",\"类型：String\",\"默认值：808-msg-processer\",\"默认值： \",\"v2.2.1 之前: 808-msg-processer\",\"v2.2.1 之后: 808-msg-processor\"]},\"165\":{\"h\":\"others\",\"t\":[\"提示\",\"该章节介绍的是除前面章节内容之外的其他杂项配置。\"]},\"166\":{\"h\":\"配置项总览\",\"t\":[\"jt808: built-components: request-handlers: enabled: true component-statistics: enabled: true logging: level: root: info io.github.hylexus: info jt-808.request.decoder: info jt-808.response.encoder: info \"]},\"167\":{\"h\":\"built-components\"},\"168\":{\"h\":\"component-statistics.enabled\",\"t\":[\"类型：boolean\",\"默认值：true\",\"jt808.built-components.component-statistics.enabled 表示是否开启服务启动完成后显示组件统计信息。\",\"这些统计信息可以显示已经注册的 消息处理器 和其他 可配置的 组件。类似于下图所示：\"]},\"169\":{\"h\":\"request-handlers.enabled\",\"t\":[\"类型：boolean\",\"默认值：true\",\"jt808.built-components.request-handlers.enabled 表示是否启用内置的一些消息处理器。\",\"内置消息处理器都在 io.github.hylexus.jt.jt808.support.dispatcher.handler.builtin 包下。\",\"注意\",\"内置的处理器仅仅是示例性的，不要直接使用。\"]},\"170\":{\"h\":\"logging\",\"t\":[\"logging: level: root: info io.github.hylexus: info # 对应 io.github.hylexus.jt.jt808.support.codec.impl.DefaultJt808MsgDecoder 的日志 jt-808.request.decoder: info # 对应 io.github.hylexus.jt.jt808.support.codec.impl.DefaultJt808MsgEncoder 的日志 jt-808.response.encoder: info \"]},\"171\":{\"h\":\"protocol\",\"t\":[\"提示\",\"该章节介绍的是 jt808.protocol.xxx 相关的配置。\"]},\"172\":{\"h\":\"配置项总览\",\"t\":[\"jt808: protocol: max-frame-length: 1024 \"]},\"173\":{\"h\":\"max-frame-length\",\"t\":[\"对应 io.netty.handler.codec.DelimiterBasedFrameDecoder 的 maxFrameLength 属性。默认值：1024。\"]},\"174\":{\"h\":\"server\",\"t\":[\"提示\",\"该章节介绍的是 jt808.server.xxx 相关的配置。\"]},\"175\":{\"h\":\"配置项总览\",\"t\":[\"jt808: server: enabled: true port: 6808 boss-thread-count: 0 worker-thread-count: 0 # 优先使用 Epoll(v2.3.0-rc.5) prefer-epoll: true idle-state-handler: enabled: true reader-idle-time: 20m writer-idle-time: 0s # disabled all-idle-time: 0s # disabled \"]},\"176\":{\"h\":\"enabled\",\"t\":[\"类型：boolean\",\"默认值：true\",\"指令服务器是否开启。\"]},\"177\":{\"h\":\"port\",\"t\":[\"类型：int\",\"默认值：6808\",\"Netty 服务器的TCP端口。\"]},\"178\":{\"h\":\"boss-thread-count\",\"t\":[\"类型：int\",\"默认值：0\",\"默认值 0 表示交由 Netty 处理。\",\"this.bossGroup=new NioEventLoopGroup(bossThreadCount); \"]},\"179\":{\"h\":\"worker-thread-count\",\"t\":[\"类型：int\",\"默认值：0\",\"默认值 0 表示交由 Netty 处理。\",\"this.workerGroup=new NioEventLoopGroup(workThreadCount); \"]},\"180\":{\"h\":\"prefer-epoll\",\"t\":[\"从 v2.3.0-rc.5 开始，在 Linux 环境下，优先使用 Epoll。\"]},\"181\":{\"h\":\"idle-state-handler\",\"t\":[\"该配置项对应 io.netty.handler.timeout.IdleStateHandler 的 三个属性：readerIdleTime、 writerIdleTime 、allIdelTime。\",\"如果你的项目不需要 IdleStateHandler 的话，将 jt808.server.idle-state-handler.enabled 配置为 false 即可。\",\"警告\",\"在 2.0.3(不包括) 以下的版本中这三个配置项的默认值都是 20m\",\"同时其实现类 Jt808TerminalHeatBeatHandler 有 Bug，详情见: issues#66\",\"2.0.3 之后版本默认配置如下：\",\"jt808: server: idle-state-handler: enabled: true reader-idle-time: 20m # 20m内没有发送数据的客户端将被断开 writer-idle-time: 0s # disabled all-idle-time: 0s # disabled \"]},\"182\":{\"h\":\"sub-package\",\"t\":[\"提示\",\"该章节介绍的是 分包消息 相关的配置。\"]},\"183\":{\"h\":\"配置项总览\"},\"184\":{\"h\":\"request-sub-package-storage\",\"t\":[\"请求分包消息暂存器相关配置。\",\"jt808: request-sub-package-storage: type: caffeine # caffeine || none ## 当且仅当 jt808.request-sub-package-storage.type = caffeine 时生效 caffeine: # 最多缓存多少条消息 maximum-size: 1024 # 最大缓存时间 ttl: 45s \"]},\"185\":{\"h\":\"response-sub-package-storage\",\"t\":[\"响应分包消息暂存器相关配置。\",\"jt808: response-sub-package-storage: type: caffeine # caffeine || redis || none ## 当且仅当 jt808.response-sub-package-storage.type = caffeine 时生效 caffeine: # 最多缓存多少条消息 maximum-size: 1024 # 最大缓存时间 ttl: 45s ## 当且仅当 jt808.response-sub-package-storage.type = redis 时生效 redis: # 最大缓存时间 ttl: 1m \"]},\"186\":{\"h\":\"Extension\"},\"187\":{\"h\":\"指南\"},\"188\":{\"h\":\"提示\",\"t\":[\"注意\",\"你现在看的是 2.x 的文档。\",\"1.x 不再增加新特性，只修改严重 bug。 建议使用 2.x。\"]},\"189\":{\"h\":\"章节目录\",\"t\":[\"入门 \",\"基础 \",\"注解驱动开发 \",\"定制化 \",\"深入 \",\"TODO\"]},\"190\":{\"h\":\"808服务配置(v1)\",\"t\":[\"本小节会介绍808服务的配置选项。\",\"默认的配置可以在default-jt808-server-config.yml 中查看。 并且已经将默认的配置加入到了 Spring 的 PropertySources 中，并将其置于最后，名称为 default-jt808-server-config 。\"]},\"191\":{\"h\":\"配置项\",\"t\":[\"jt808: print-component-statistics: true server: # ... entity-scan: # ... handler-scan: # ... exception-handler-scan: # ... msg-processor: thread-pool: # ... \"]},\"192\":{\"h\":\"protocol\"},\"193\":{\"h\":\"version\",\"t\":[\"类型：enum\",\"默认值：auto_detection\",\"808协议版本，可选值位于：io.github.hylexus.jt.config.Jt808ProtocolVersion 。\"]},\"194\":{\"h\":\"max-frame-length\",\"t\":[\"对应 io.netty.handler.codec.DelimiterBasedFrameDecoder 的 maxFrameLength 属性。默认值：1024。\"]},\"195\":{\"h\":\"server\"},\"196\":{\"h\":\"port\",\"t\":[\"类型：int\",\"默认值：6808\",\"Netty 服务器的TCP端口。\"]},\"197\":{\"h\":\"boss-thread-count\",\"t\":[\"类型：int\",\"默认值：0\",\"默认值 0 表示交由 Netty 处理。\",\"this.bossGroup = new NioEventLoopGroup(bossThreadCount); \"]},\"198\":{\"h\":\"worker-thread-count\",\"t\":[\"类型：int\",\"默认值：0\",\"默认值 0 表示交由 Netty 处理。\",\"this.workerGroup = new NioEventLoopGroup(workThreadCount); \"]},\"199\":{\"h\":\"idle-state-handler\",\"t\":[\"该配置项对应 io.netty.handler.timeout.IdleStateHandler 的 三个属性：readerIdleTime、 writerIdleTime 、allIdelTime。 默认值都是 20m;\",\"如果你的项目不需要 IdleStateHandler 的话，将 jt808.server.idle-state-handler.enabled 配置为 false 即可。\"]},\"200\":{\"h\":\"entity-scan\"},\"201\":{\"h\":\"enabled\",\"t\":[\"类型：boolean\",\"默认值：true\",\"是否启用实体扫描功能。启用后，请求报文可以自动映射到使用 @Jt808ReqMsgBody 标记的 请求消息体实体类 。\",\"使用基于注解的 请求体消息实体类。\"]},\"202\":{\"h\":\"enable-builtin-entity\",\"t\":[\"类型：boolean\",\"默认值：true\",\"是否自动注册内置的 请求消息体实体类。 内置的 请求消息体实体类 包括：\",\"AuthRequestMsgBody : 鉴权消息 请求消息体实体类。\",\"EmptyRequestBody : 一个空的 请求消息体实体类。\"]},\"203\":{\"h\":\"base-packages\",\"t\":[\"类型：String\",\"默认值：\\\"\\\"\",\"请求消息体实体类 所在的包名，多个以逗号分隔。\"]},\"204\":{\"h\":\"register-builtin-request-msg-converters\",\"t\":[\"类型：boolean\",\"默认值：true\",\"是否自动注册内置的 RequestMsgBodyConverter。\"]},\"205\":{\"h\":\"handler-scan\"},\"206\":{\"h\":\"enabled\",\"t\":[\"类型：boolean\",\"默认值：true\",\"是否启用基于注解的MsgHandler功能。启用后，消息处理可以用 @Jt808RequestMsgHandlerMapping 来处理。\",\"使用基于注解的 MsgHandler。\"]},\"207\":{\"h\":\"base-packages\",\"t\":[\"类型：String\",\"默认值：\\\"\\\"\",\"基于注解的 MsgHandler 所在的包名，多个以逗号分隔。\"]},\"208\":{\"h\":\"register-builtin-msg-handlers\",\"t\":[\"类型：boolean\",\"默认值：true\",\"是否自动注册内置的 MsgHandler 。\"]},\"209\":{\"h\":\"exception-handler-scan\"},\"210\":{\"h\":\"enabled\",\"t\":[\"类型：boolean\",\"默认值：true\",\"是否启用全局异常处理机制。启用后，可以用类似于 Spring 的全局异常处理的方式来处理异常。\",\"使用基于注解的 ExceptionHandler。\"]},\"211\":{\"h\":\"base-packages\",\"t\":[\"类型：String\",\"默认值：\\\"\\\"\",\"基于注解的 ExceptionHandler 所在的包名，多个以逗号分隔。\"]},\"212\":{\"h\":\"register-builtin-exception-handlers\",\"t\":[\"类型：boolean\",\"默认值：true\",\"是否自动注册内置的 ExceptionHandler 。\"]},\"213\":{\"h\":\"msg-processor.thread-pool\",\"t\":[\"提示\",\"此处为 消息处理线程池 相关的配置。其实就是 Java线程池 几个关键参数的配置。\"]},\"214\":{\"h\":\"core-pool-size\",\"t\":[\"类型：int\",\"默认值：Runtime.getRuntime().availableProcessors() + 1\",\"消息处理线程池的核心线程数，即 java.util.concurrent.ThreadPoolExecutor.corePoolSize。\"]},\"215\":{\"h\":\"maximum-pool-size\",\"t\":[\"类型：int\",\"默认值：2 * corePoolSize\",\"同 java.util.concurrent.ThreadPoolExecutor.maximumPoolSize 。\"]},\"216\":{\"h\":\"keep-alive-time\",\"t\":[\"类型：Duration\",\"默认值：60s\",\"同 java.util.concurrent.ThreadPoolExecutor.keepAliveTime 。\"]},\"217\":{\"h\":\"blocking-queue-size\",\"t\":[\"类型：int\",\"默认值：20\",\"java.util.concurrent.ThreadPoolExecutor.workQueue 的 size() 。\"]},\"218\":{\"h\":\"thread-name-format\",\"t\":[\"类型：String\",\"默认值：808-msg-processor-%d\",\"线程池中线程的命名格式。\"]},\"219\":{\"h\":\"其他配置\"},\"220\":{\"h\":\"print-component-statistics\",\"t\":[\"类型：boolean\",\"默认值：true\",\"jt808.print-component-statistics 表示是否开启服务启动完成后显示组件统计信息。\",\"这些统计信息可以显示已经注册的 MsgConverter 、 MsgHandler 等组件。类似于下图所示：\"]},\"221\":{\"h\":\"指南(v1)\"},\"222\":{\"h\":\"注意\",\"t\":[\"提示\",\"1.x 不再增加新特性，只修改严重 bug。\",\"建议使用 2.x\",\"提示\",\"1.x 不再增加新特性，只修改严重 bug。\",\"建议使用 2.x\",\"提示\",\"1.x 不再增加新特性，只修改严重 bug。\",\"建议使用 2.x\"]},\"223\":{\"h\":\"章节目录\",\"t\":[\"提示\",\"本文档将介绍808协议处理方式，内容如下：\",\"808协议入门\",\"注解驱动开发\",\"深入\",\"FAQ\"]},\"224\":{\"h\":\"注解别名(v2.1.1)\",\"t\":[\"提示\",\"注解别名是 \"]},\"225\":{\"h\":\"为什么要引入别名机制?\",\"t\":[\"一句话概括就是: 简化代码，同时又能方便地扩展自定义注解。\",\"提示\",\"为 @RequestField 注解提供了别名 @RequestFieldAlias\",\"为 @ResponseField 注解提供了别名 @ResponseFieldAlias\",\"相当于 Spring 中 @RequestMapping 和 @GetMapping 的关系\",\"以 位置上报 报文为例，解析经纬度的实体类可能是下面这种写法：\",\" @Jt808RequestBody public class BuiltinMsg0200V2019 { // ... // (3). byte[8,12) DWORD 纬度 @RequestField(order = 3, startIndex = 8, dataType = DWORD) private long lat; // (4). byte[12,16) DWORD 经度 @RequestField(order = 4, startIndex = 12, dataType = DWORD) private long lng; // (8). byte[22,28) BCD[6] 时间 @RequestField(order = 8, startIndex = 22, dataType = BCD, length = 6) private String time; // ... } \",\"你可能会对于上面的代码片段有几个疑问：\",\"order 是必须要指定的吗？ \",\"这个问题暂且不讨论(暂且就认为是必须的吧)\",\"参考Stackoverflow\",\"startIndex 是必须要指定的吗？ \",\"其实这个属性是从 1.x 继承过来的\",\"1.x 的版本是必须的，因为 1.x 是通过 byte[] 来解析报文的，没有维护 readerIndex\",\"2.x 的版本通过 Netty 的 ByteBuf 来解析的。虽然有这个 startIndex 属性，但是 Jt808FieldDeserializer 的实现类中几乎没用到这个属性。也就是说 2.x 中可以不用指定这个属性了(实现类依赖于 Netty 的 ByteBuf 的 readerIndex)。\",\"dataType 是必须要指定的吗？ \",\"dataType 和 length 两个属性其实在一定角度来看可以看成一回事。\",\"dataType= DWOD 也就是间接指定了 length = 4\",\"dataType = BYTE 也就是间接指定了 length = 1\",\"但是 dataType = STRING 时, 就需要指定 length 了。\",\"所以 @RequestField 注解中包含了这么多属性。\",\"但是在使用时难免会疑惑: 到底该哪些属性是必须的???\",\"length 是必须要指定的吗？(和上一个问题类似)\",\"鉴于以上几个问题，2.1.1 开始引入了注解别名机制。\",\"说白了就是:\",\"为 @RequestField 注解提供了快捷方式 @RequestFieldAlias\",\"为 @ResponseField 注解提供了快捷方式 @ResponseFieldAlias\",\"下面是使用注解别名实现的同样效果的实体类映射(暂且先忽略 order 属性)：\",\" @Jt808RequestBody public class BuiltinMsg0200V2019Alias { // ... // (3). byte[8,12) DWORD 纬度 @RequestFieldAlias.Dword(order = 3) private long lat; // (4). byte[12,16) DWORD 经度 @RequestFieldAlias.Dword(order = 4) private long lng; // (8). byte[22,28) BCD[6] 时间 @RequestFieldAlias.Bcd(order = 8, length = 6) private String time; // ... } \",\"省去了 startIndex 和 部分 length 属性。 上面代码中的 @RequestFieldAlias 相比于 @RequestField 是不是简介多了？\"]},\"226\":{\"h\":\"@RequestFieldAlias\",\"t\":[\"RequestFieldAlias 是给 @RequestField 提供的别名(快捷方式)。\",\"public @interface RequestFieldAlias { @Target({ElementType.FIELD}) @Retention(RetentionPolicy.RUNTIME) @Documented @RequestField(dataType = MsgDataType.WORD, order = -1) @interface Word { @AliasFor(annotation = RequestField.class, attribute = \\\"order\\\") int order(); @AliasFor(annotation = RequestField.class, attribute = \\\"desc\\\") java.lang.String desc() default \\\"\\\"; } @Target({ElementType.FIELD}) @Retention(RetentionPolicy.RUNTIME) @Documented @RequestField(dataType = MsgDataType.DWORD, order = -1) @interface Dword { @AliasFor(annotation = RequestField.class, attribute = \\\"order\\\") int order(); @AliasFor(annotation = RequestField.class, attribute = \\\"desc\\\") java.lang.String desc() default \\\"\\\"; } @Target({ElementType.FIELD}) @Retention(RetentionPolicy.RUNTIME) @Documented @RequestField(dataType = MsgDataType.BCD, order = -1) @interface Bcd { @AliasFor(annotation = RequestField.class, attribute = \\\"order\\\") int order(); @AliasFor(annotation = RequestField.class, attribute = \\\"length\\\") int length() default -1; @AliasFor(annotation = RequestField.class, attribute = \\\"lengthExpression\\\") java.lang.String lengthExpression() default \\\"\\\"; @AliasFor(annotation = RequestField.class, attribute = \\\"lengthMethod\\\") java.lang.String lengthMethod() default \\\"\\\"; @AliasFor(annotation = RequestField.class, attribute = \\\"desc\\\") java.lang.String desc() default \\\"\\\"; } // ... // ... // ... // ... // ... // ... // ... } \"]},\"227\":{\"h\":\"@ResponseFieldAlias\",\"t\":[\"@ResponseFieldAlias 是给 @ResponseField 提供的别名(快捷方式)。\",\"public @interface ResponseFieldAlias { @Target({ElementType.FIELD}) @Retention(RetentionPolicy.RUNTIME) @Documented @ResponseField(dataType = MsgDataType.WORD, order = -1) @interface Word { @AliasFor(annotation = ResponseField.class, attribute = \\\"order\\\") int order(); @AliasFor(annotation = ResponseField.class, attribute = \\\"conditionalOn\\\") java.lang.String conditionalOn() default \\\"\\\"; @AliasFor(annotation = ResponseField.class, attribute = \\\"customerFieldSerializerClass\\\") Class<? extends Jt808FieldSerializer<?>> customerFieldSerializerClass() default Jt808FieldSerializer.PlaceholderFiledSerializer.class; @AliasFor(annotation = ResponseField.class, attribute = \\\"desc\\\") java.lang.String desc() default \\\"\\\"; } @Target({ElementType.FIELD}) @Retention(RetentionPolicy.RUNTIME) @Documented @ResponseField(dataType = MsgDataType.DWORD, order = -1) @interface Dword { @AliasFor(annotation = ResponseField.class, attribute = \\\"order\\\") int order(); @AliasFor(annotation = ResponseField.class, attribute = \\\"conditionalOn\\\") java.lang.String conditionalOn() default \\\"\\\"; @AliasFor(annotation = ResponseField.class, attribute = \\\"customerFieldSerializerClass\\\") Class<? extends Jt808FieldSerializer<?>> customerFieldSerializerClass() default Jt808FieldSerializer.PlaceholderFiledSerializer.class; @AliasFor(annotation = ResponseField.class, attribute = \\\"desc\\\") java.lang.String desc() default \\\"\\\"; } // ... // ... // ... // ... // ... // ... } \"]},\"228\":{\"h\":\"FAQ\"},\"229\":{\"h\":\"兼容性\",\"t\":[\"Question: 注解别名和原来的 @RequestField、 @ResponseField 兼容吗？\",\"Answer: 兼容\",\"注解别名就是对 @RequestField、 @ResponseField 的 {简化,扩展}\",\"底层的 Jt808FieldDeserializer 和 Jt808FieldSerializer 读取的依然是 @RequestField 和 @ResponseField\",\"实际上是借助于 Spring 提供的 @AliasFor 的强大功能实现的\"]},\"230\":{\"h\":\"混合使用\",\"t\":[\"Question: 混合使用问题？\",\"@RequestFieldAlias 和 @RequestField 能混合使用吗？\",\"@ResponseFieldAlias 是给 @ResponseField 能混合使用吗？\",\"Answer: 可以混合使用\",\"本质上和上一个问题是同一个问题。\",\"底层的 Jt808FieldDeserializer 和 Jt808FieldSerializer 读取的依然是 @RequestField 和 @ResponseField。\",\"别名(Alias)只是个快捷方式或者扩展。\"]},\"231\":{\"h\":\"自定义注解(v2.1.1)\"},\"232\":{\"h\":\"请先读我\",\"t\":[\"这里说的自定义注解是通过 v2.1.1 中引入的注解别名机制来扩展的自定义注解。\",\"下面就以位置上报报文中的经纬度字段和时间字段为例，演示如何扩展自己的注解。\"]},\"233\":{\"h\":\"示例1(GeoPoint)\"},\"234\":{\"h\":\"目的\",\"t\":[\"这里的经纬度其实就是将 4 字节的 DWORD 转为数字(Long)，然后再除以 106。\",\" @Data @Jt808RequestBody public class BuiltinMsg0200V2013Alias { // ... // (3). byte[8,12) DWORD 纬度 @RequestFieldAlias.Dword(order = 3) private long lat; // (4). byte[12,16) DWORD 经度 @RequestFieldAlias.Dword(order = 4) private long lng; // ... } \",\"但是内置的转换器实际上不支持从 DWORD 到 Double 的转换，只能写成 Long 然后再手动除以 106 转为浮点数。\",\"不过你可以扩展自定义注解实现这个转换。\"]},\"235\":{\"h\":\"定义自己的注解\",\"t\":[\" @Target({ElementType.FIELD}) @Retention(RetentionPolicy.RUNTIME) @Documented @RequestField(dataType = MsgDataType.DWORD, order = -1, customerFieldDeserializerClass = ExtendedJt808FieldDeserializerGeoPoint.class) public @interface GeoPoint { @AliasFor(annotation = RequestField.class, attribute = \\\"order\\\") int order(); @AliasFor(annotation = RequestField.class, attribute = \\\"desc\\\") java.lang.String desc() default \\\"\\\"; } \"]},\"236\":{\"h\":\"提供一个转换器\",\"t\":[\"// 自定义的转换器 [不需要] 手动实例化, [也不需要] 注册到 `Jt808FieldDeserializerRegistry` 中 public class ExtendedJt808FieldDeserializerGeoPoint extends AbstractExtendedJt808FieldDeserializer<Object> { private final LongFieldDeserializer delegate = new LongFieldDeserializer(); @Override public Object deserialize(ByteBuf byteBuf, MsgDataType msgDataType, int start, int length, Context context) { // 1. 先委托内置的 LongFieldDeserializer 解析为 LONG final Long dword = this.delegate.deserialize(byteBuf, msgDataType, start, length); final Class<?> targetClass = context.fieldMetadata().getFieldType(); // 2. 然后再根据自己的要求进一步转换 if (Long.class.isAssignableFrom(targetClass) || long.class.isAssignableFrom(targetClass)) { return dword; } else if (Double.class.isAssignableFrom(targetClass) || double.class.isAssignableFrom(targetClass)) { return dword * 1.0 / 1_000_000; } else if (BigDecimal.class.isAssignableFrom(targetClass)) { return new BigDecimal(String.valueOf(dword)).setScale(6, RoundingMode.UP).divide(new BigDecimal(\\\"1000000\\\"), RoundingMode.UP); } throw new Jt808AnnotationArgumentResolveException(\\\"Cannot convert DataType from \\\" + msgDataType + \\\" to \\\" + targetClass); } } \"]},\"237\":{\"h\":\"使用自定义注解\",\"t\":[\" @Data @Jt808RequestBody public class BuiltinMsg0200V2013Alias { // ... // (3). byte[8,12) DWORD 纬度 @GeoPoint(order = 3) // 支持 long, double, BigDecimal private double lat; // (4). byte[12,16) DWORD 经度 @GeoPoint(order = 4) // 支持 long, double, BigDecimal private BigDecimal lng; // ... } \",\"提示\",\"实际上这里演示的这个注解已经在 2.1.1 中内置了, 全类名是 @io.github.hylexus.jt.jt808.support.annotation.msg.req.RequestFieldAlias.GeoPoint。\"]},\"238\":{\"h\":\"示例2(BcdDateTime)\"},\"239\":{\"h\":\"目的\",\"t\":[\"位置上报报文中的时间字段是以 BCD 格式编码的字符串，格式为 yyMMddHHmmss。\",\" @Data @Accessors(chain = true) @Jt808RequestBody @BuiltinComponent public class BuiltinMsg0200V2013Alias { // ... // (8). byte[22,28) BCD[6] 时间 @RequestFieldAlias.Bcd(order = 8, length = 6) private String time; // ... } \",\"但是内置的反序列化器并不支持直接从 BCD 转为 Date 或 LocalDateTime，只能转为 String 或其他类型。\",\"从 2.1.1 开始，你可以定义自己的注解来完成这种特殊需求。\"]},\"240\":{\"h\":\"定义自己的注解\",\"t\":[\" @Target({ElementType.FIELD}) @Retention(RetentionPolicy.RUNTIME) @Documented @RequestField(dataType = MsgDataType.BCD, length = 6, customerFieldDeserializerClass = MyExtendedJt808FieldDeserializerBcdTime.class, order = -1) public @interface BcdDateTime { @AliasFor(annotation = RequestField.class, attribute = \\\"order\\\") int order(); @AliasFor(annotation = RequestField.class, attribute = \\\"desc\\\") java.lang.String desc() default \\\"\\\"; // 也可以自己扩展注解的属性 String pattern() default \\\"yyMMddHHmmss\\\"; } \"]},\"241\":{\"h\":\"提供一个转换器\",\"t\":[\"// 自定义的转换器 [不需要] 手动实例化, [也不需要] 注册到 `Jt808FieldDeserializerRegistry` 中 public class MyExtendedJt808FieldDeserializerBcdTime extends AbstractExtendedJt808FieldDeserializer<Object> { private final BcdFieldDeserializer delegate = new BcdFieldDeserializer(); @Override public Object deserialize(ByteBuf byteBuf, MsgDataType msgDataType, int start, int length, Context context) { final Class<?> targetClass = context.fieldMetadata().getFieldType(); final String bcd = this.delegate.deserialize(byteBuf, msgDataType, start, length); final BcdDateTime annotation = context.fieldMetadata().getAnnotation(BcdDateTime.class); final String pattern = annotation.pattern(); if (LocalDateTime.class.isAssignableFrom(targetClass)) { return LocalDateTime.parse(bcd, DateTimeFormatter.ofPattern(pattern)); } else if (Date.class.isAssignableFrom(targetClass)) { try { return new SimpleDateFormat(pattern).parse(bcd); } catch (ParseException e) { throw new Jt808FieldSerializerException(e); } } else if (String.class.isAssignableFrom(targetClass)) { return bcd; } throw new Jt808AnnotationArgumentResolveException(\\\"Cannot convert DataType from \\\" + msgDataType + \\\" to \\\" + targetClass); } } \"]},\"242\":{\"h\":\"使用自定义注解\",\"t\":[\"现在可以通过自定义注解将 BCD 转换为 LocalDateTime、 Date 或 String 了：\",\" @Data @Accessors(chain = true) @Jt808RequestBody @BuiltinComponent public class BuiltinMsg0200V2013Alias { // ... // (8). byte[22,28) BCD[6] 时间 @BcdDateTime(order = 7, pattern = \\\"yyMMddHHmmss\\\") private LocalDateTime time; // private Date time; // private String time; // ... } \",\"提示\",\"实际上这里演示的这个注解已经在 2.1.1 中内置了, 全类名是 @io.github.hylexus.jt.jt808.support.annotation.msg.req.RequestFieldAlias.BcdDateTime。\"]},\"243\":{\"h\":\"其他说明\",\"t\":[\"内置的给 @RequestField 提供的别名都在 @RequestFieldAlias 中\",\"要扩展 @ResponseField 也是同样的道理，可以参考 @ResponseFieldAlias 中内置的一堆别名\",\"要扩展一种不支持的数据类型, 比如 LWORD(Long Word, unsigned 64 bit), 也可以通过注解别名实现\"]},\"244\":{\"h\":\"数据类型转换(注解别名,v2.1.1)\"},\"245\":{\"h\":\"相关知识\"},\"246\":{\"h\":\"请先读我\",\"t\":[\"相比于上一个章节 来说，本章节介绍的通过 数据转换方式要更简单一些。\",\"同时提供了 @RequestFieldAlias.GeoPoint (经纬度) 和 @RequestFieldAlias.BcdDateTime (时间格式的 BCD) 注解。\",\" @Data @Accessors(chain = true) //@Jt808ReqMsgBody(msgType = 0x0200, version = Jt808ProtocolVersion.VERSION_2019) public class LocationUploadReqMsgV2019AliasTest { // ... @RequestFieldAlias.GeoPoint(order = 2) // 地理位置(经纬度)支持: long/Long, double/Double, BigDecimal private Double intLat; // (4). 经度(尚未除以 10^6) // @RequestField(order = 3, startIndex = 12, dataType = DWORD) @RequestFieldAlias.Dword(order = 3) private Long intLng; // ... // (8). 时间 // 1. 解析为 String // @RequestField(order = 7, startIndex = 22, dataType = BCD, length = 6) // @RequestFields.BCD(order = 7, startIndex = 22, length = 6) // private String time; // 2. 解析为 LocalDateTime @RequestFieldAlias.BcdDateTime(order = 7) private LocalDateTime time; // ... } \"]},\"247\":{\"h\":\"BYTE\"},\"248\":{\"h\":\"反序列化BYTE\",\"t\":[\"目标类型\",\"注解\",\"备注\",\"byte, Byte\",\"@RequestFieldAlias.Byte()\",\"有溢出的风险\",\"short, Short\",\"@RequestFieldAlias.Byte()\",\"int, Integer\",\"@RequestFieldAlias.Byte()\",\"long, Long\",\"@RequestFieldAlias.Byte()\",\"ByteArrayContainer\",\"@RequestFieldAlias.Byte()\",\"2.1.1 开始支持\",\"ByteBufContainer\",\"@RequestFieldAlias.Byte()\",\"2.1.1 开始支持\",\"BitOperator\",\"@RequestFieldAlias.Byte()\",\"2.1.1 开始支持\"]},\"249\":{\"h\":\"序列化BYTE\",\"t\":[\"源类型\",\"注解\",\"备注\",\"byte, Byte\",\"@ResponseFieldAlias.Byte()\",\"short, Short\",\"@ResponseFieldAlias.Byte()\",\"int, Integer\",\"@ResponseFieldAlias.Byte()\",\"long, Long\",\"@ResponseFieldAlias.Byte()\",\"ByteArrayContainer\",\"@ResponseFieldAlias.Byte()\",\"2.1.1 开始支持\",\"ByteBufContainer\",\"@ResponseFieldAlias.Byte()\",\"2.1.1 开始支持\",\"BitOperator\",\"@ResponseFieldAlias.Byte()\",\"2.1.1 开始支持\"]},\"250\":{\"h\":\"BYTES\"},\"251\":{\"h\":\"反序列化BYTES\",\"t\":[\"目标类型\",\"注解\",\"备注\",\"byte[]\",\"@RequestFieldAlias.Bytes(length = xxx)\",\"ByteBuf\",\"@RequestFieldAlias.Bytes(length = xxx)\",\"String\",\"@RequestFieldAlias.Bytes(length = xxx)\",\"ByteArrayContainer\",\"@RequestFieldAlias.Bytes(length = xxx)\",\"2.1.1 开始支持\",\"ByteBufContainer\",\"@RequestFieldAlias.Bytes(length = xxx)\",\"2.1.1 开始支持\"]},\"252\":{\"h\":\"序列化BYTES\",\"t\":[\"源类型\",\"注解\",\"备注\",\"byte[]\",\"@ResponseFieldAlias.Bytes()\",\"ByteBuf\",\"@ResponseFieldAlias.Bytes()\",\"String\",\"@ResponseFieldAlias.Bytes()\",\"ByteArrayContainer\",\"@ResponseFieldAlias.Bytes()\",\"2.1.1 开始支持\",\"ByteBufContainer\",\"@ResponseFieldAlias.Bytes()\",\"2.1.1 开始支持\"]},\"253\":{\"h\":\"WORD\"},\"254\":{\"h\":\"反序列化WORD\",\"t\":[\"目标类型\",\"注解\",\"备注\",\"short, Short\",\"@RequestFieldAlias.Word()\",\"有溢出的风险\",\"int, Integer\",\"@RequestFieldAlias.Word()\",\"long, Long\",\"@RequestFieldAlias.Word()\",\"ByteArrayContainer\",\"@RequestFieldAlias.Word()\",\"2.1.1 开始支持\",\"ByteBufContainer\",\"@RequestFieldAlias.Word()\",\"2.1.1 开始支持\",\"BitOperator\",\"@RequestFieldAlias.Word()\",\"2.1.1 开始支持\"]},\"255\":{\"h\":\"序列化WORD\",\"t\":[\"源类型\",\"注解\",\"备注\",\"short, Short\",\"@ResponseFieldAlias.Word()\",\"int, Integer\",\"@ResponseFieldAlias.Word()\",\"long, Long\",\"@ResponseFieldAlias.Word()\",\"ByteArrayContainer\",\"@ResponseFieldAlias.Word()\",\"2.1.1 开始支持\",\"ByteBufContainer\",\"@ResponseFieldAlias.Word()\",\"2.1.1 开始支持\",\"BitOperator\",\"@ResponseFieldAlias.Word()\",\"2.1.1 开始支持\"]},\"256\":{\"h\":\"DWORD\"},\"257\":{\"h\":\"反序列化DWORD\",\"t\":[\"目标类型\",\"注解\",\"备注\",\"int, Integer\",\"@RequestFieldAlias.Dword()\",\"有溢出的风险\",\"long, Long\",\"@RequestFieldAlias.Dword()\",\"ByteArrayContainer\",\"@RequestFieldAlias.Dword()\",\"2.1.1 开始支持\",\"ByteBufContainer\",\"@RequestFieldAlias.Dword()\",\"2.1.1 开始支持\",\"BitOperator\",\"@RequestFieldAlias.Dword()\",\"2.1.1 开始支持\"]},\"258\":{\"h\":\"序列化DWORD\",\"t\":[\"源类型\",\"注解\",\"备注\",\"int, Integer\",\"@ResponseFieldAlias.Dword()\",\"long, Long\",\"@ResponseFieldAlias.Dword()\",\"ByteArrayContainer\",\"@ResponseFieldAlias.Dword()\",\"2.1.1 开始支持\",\"ByteBufContainer\",\"@ResponseFieldAlias.Dword()\",\"2.1.1 开始支持\",\"BitOperator\",\"@ResponseFieldAlias.Dword()\",\"2.1.1 开始支持\"]},\"259\":{\"h\":\"BCD\"},\"260\":{\"h\":\"反序列化BCD\",\"t\":[\"目标类型\",\"注解\",\"备注\",\"String\",\"@RequestFieldAlias.Bcd(length = xxx)\",\"ByteArrayContainer\",\"@RequestFieldAlias.Bcd(length = xxx)\",\"2.1.1 开始支持\",\"ByteBufContainer\",\"@RequestFieldAlias.Bcd(length = xxx)\",\"2.1.1 开始支持\"]},\"261\":{\"h\":\"序列号BCD\",\"t\":[\"源类型\",\"注解\",\"备注\",\"String\",\"@ResponseFieldAlias.Bcd()\",\"ByteArrayContainer\",\"@ResponseFieldAlias.Bcd()\",\"2.1.1 开始支持\",\"ByteBufContainer\",\"@ResponseFieldAlias.Bcd()\",\"2.1.1 开始支持\"]},\"262\":{\"h\":\"STRING\"},\"263\":{\"h\":\"反序列化STRING\",\"t\":[\"目标类型\",\"注解\",\"备注\",\"String\",\"@RequestFieldAlias.String(length = xxx)\",\"ByteArrayContainer\",\"@RequestFieldAlias.String(length = xxx)\",\"2.1.1 开始支持\",\"ByteBufContainer\",\"@RequestFieldAlias.String(length = xxx)\",\"2.1.1 开始支持\"]},\"264\":{\"h\":\"序列化STRING\",\"t\":[\"源类型\",\"注解\",\"备注\",\"String\",\"@ResponseFieldAlias.String()\",\"ByteArrayContainer\",\"@ResponseFieldAlias.String()\",\"2.1.1 开始支持\",\"ByteBufContainer\",\"@ResponseFieldAlias.String()\",\"2.1.1 开始支持\"]},\"265\":{\"h\":\"数据类型转换(传统方式)\"},\"266\":{\"h\":\"BYTE\"},\"267\":{\"h\":\"反序列化BYTE\",\"t\":[\"目标类型\",\"注解\",\"备注\",\"byte, Byte\",\"@RequestField(dataType = BYTE)\",\"有溢出的风险\",\"short, Short\",\"@RequestField(dataType = BYTE)\",\"int, Integer\",\"@RequestField(dataType = BYTE)\",\"long, Long\",\"@RequestField(dataType = BYTE)\",\"ByteArrayContainer\",\"@RequestField(dataType = BYTE)\",\"2.1.1 开始支持\",\"ByteBufContainer\",\"@RequestField(dataType = BYTE)\",\"2.1.1 开始支持\",\"BitOperator\",\"@RequestField(dataType = BYTE)\",\"2.1.1 开始支持\"]},\"268\":{\"h\":\"序列化BYTE\",\"t\":[\"源类型\",\"注解\",\"备注\",\"byte, Byte\",\"@ResponseField(dataType = BYTE)\",\"short, Short\",\"@ResponseField(dataType = BYTE)\",\"int, Integer\",\"@ResponseField(dataType = BYTE)\",\"long, Long\",\"@ResponseField(dataType = BYTE)\",\"ByteArrayContainer\",\"@ResponseField(dataType = BYTE)\",\"2.1.1 开始支持\",\"ByteBufContainer\",\"@ResponseField(dataType = BYTE)\",\"2.1.1 开始支持\",\"BitOperator\",\"@ResponseField(dataType = BYTE)\",\"2.1.1 开始支持\"]},\"269\":{\"h\":\"BYTES\"},\"270\":{\"h\":\"反序列化BYTES\",\"t\":[\"目标类型\",\"注解\",\"备注\",\"byte[], Byte[]\",\"@RequestField(dataType = BYTES, length = xxx)\",\"ByteBuf\",\"@RequestField(dataType = BYTES, length = xxx)\",\"String\",\"@RequestField(dataType = BYTES, length = xxx)\",\"ByteArrayContainer\",\"@RequestField(dataType = BYTES, length = xxx)\",\"2.1.1 开始支持\",\"ByteBufContainer\",\"@RequestField(dataType = BYTES, length = xxx)\",\"2.1.1 开始支持\"]},\"271\":{\"h\":\"序列化BYTES\",\"t\":[\"源类型\",\"注解\",\"备注\",\"byte[], Byte[]\",\"@ResponseField(dataType = BYTES)\",\"ByteBuf\",\"@ResponseField(dataType = BYTES)\",\"String\",\"@ResponseField(dataType = BYTES)\",\"ByteArrayContainer\",\"@ResponseField(dataType = BYTES)\",\"2.1.1 开始支持\",\"ByteBufContainer\",\"@ResponseField(dataType = BYTES)\",\"2.1.1 开始支持\"]},\"272\":{\"h\":\"WORD\"},\"273\":{\"h\":\"反序列化WORD\",\"t\":[\"目标类型\",\"注解\",\"备注\",\"short, Short\",\"@RequestField(dataType = WORD)\",\"有溢出的风险\",\"int, Integer\",\"@RequestField(dataType = WORD)\",\"long, Long\",\"@RequestField(dataType = WORD)\",\"ByteArrayContainer\",\"@RequestField(dataType = WORD)\",\"2.1.1 开始支持\",\"ByteBufContainer\",\"@RequestField(dataType = WORD)\",\"2.1.1 开始支持\",\"BitOperator\",\"@RequestField(dataType = WORD)\",\"2.1.1 开始支持\"]},\"274\":{\"h\":\"序列化WORD\",\"t\":[\"源类型\",\"注解\",\"备注\",\"short, Short\",\"@ResponseField(dataType = WORD)\",\"int, Integer\",\"@ResponseField(dataType = WORD)\",\"long, Long\",\"@ResponseField(dataType = WORD)\",\"ByteArrayContainer\",\"@ResponseField(dataType = WORD)\",\"2.1.1 开始支持\",\"ByteBufContainer\",\"@ResponseField(dataType = WORD)\",\"2.1.1 开始支持\",\"BitOperator\",\"@ResponseField(dataType = WORD)\",\"2.1.1 开始支持\"]},\"275\":{\"h\":\"DWORD\"},\"276\":{\"h\":\"反序列化DWORD\",\"t\":[\"目标类型\",\"注解\",\"备注\",\"int, Integer\",\"@RequestField(dataType = DWORD)\",\"有溢出的风险\",\"long, Long\",\"@RequestField(dataType = DWORD)\",\"ByteArrayContainer\",\"@RequestField(dataType = DWORD)\",\"2.1.1 开始支持\",\"ByteBufContainer\",\"@RequestField(dataType = DWORD)\",\"2.1.1 开始支持\",\"BitOperator\",\"@RequestField(dataType = DWORD)\",\"2.1.1 开始支持\"]},\"277\":{\"h\":\"序列化DWORD\",\"t\":[\"源类型\",\"注解\",\"备注\",\"int, Integer\",\"@ResponseField(dataType = DWORD)\",\"long, Long\",\"@ResponseField(dataType = DWORD)\",\"ByteArrayContainer\",\"@ResponseField(dataType = DWORD)\",\"2.1.1 开始支持\",\"ByteBufContainer\",\"@ResponseField(dataType = DWORD)\",\"2.1.1 开始支持\",\"BitOperator\",\"@ResponseField(dataType = DWORD)\",\"2.1.1 开始支持\"]},\"278\":{\"h\":\"BCD\"},\"279\":{\"h\":\"反序列化BCD\",\"t\":[\"目标类型\",\"注解\",\"备注\",\"String\",\"@RequestField(dataType = BCD, length = xxx)\",\"ByteArrayContainer\",\"@RequestField(dataType = BCD, length = xxx)\",\"2.1.1 开始支持\",\"ByteBufContainer\",\"@RequestField(dataType = BCD, length = xxx)\",\"2.1.1 开始支持\"]},\"280\":{\"h\":\"序列号BCD\",\"t\":[\"源类型\",\"注解\",\"备注\",\"String\",\"@ResponseField(dataType = BCD)\",\"ByteArrayContainer\",\"@ResponseField(dataType = BCD)\",\"2.1.1 开始支持\",\"ByteBufContainer\",\"@ResponseField(dataType = BCD)\",\"2.1.1 开始支持\"]},\"281\":{\"h\":\"STRING\"},\"282\":{\"h\":\"反序列化STRING\",\"t\":[\"目标类型\",\"注解\",\"备注\",\"String\",\"@RequestField(dataType = STRING, length = xxx)\",\"ByteArrayContainer\",\"@RequestField(dataType = STRING, length = xxx)\",\"2.1.1 开始支持\",\"ByteBufContainer\",\"@RequestField(dataType = STRING, length = xxx)\",\"2.1.1 开始支持\"]},\"283\":{\"h\":\"序列化STRING\",\"t\":[\"源类型\",\"注解\",\"备注\",\"String\",\"@ResponseField(dataType = STRING)\",\"ByteArrayContainer\",\"@ResponseField(dataType = STRING)\",\"2.1.1 开始支持\",\"ByteBufContainer\",\"@ResponseField(dataType = STRING)\",\"2.1.1 开始支持\"]},\"284\":{\"h\":\"异常处理\",\"t\":[\"TODO\"]},\"285\":{\"h\":\"位置附加项列表解析(v2.1.4)\"},\"286\":{\"h\":\"2.1.4之前\",\"t\":[\"说明\",\"在 2.1.4之前，位置上报中的附加项列表只能定义为 List 类型，同时 List 中的元素的 content 类型只能是 byte[]、ByteArrayContainer、ByteBufContainer 类型。\",\"全都是 byte[] 类型，使用起来相当繁琐，比如下面的写法：\",\" @Data @Accessors(chain = true) @Jt808RequestBody public class LocationUploadMsgV2019 { // 省略其他属性... // (9). byte[28,n) 附加项列表 // @RequestField(order = 9, dataType = LIST, lengthExpression = \\\"#request.msgBodyLength() - 28\\\") @RequestField(order = 9, dataType = LIST, lengthExpression = \\\"#ctx.msgBodyLength() - 28\\\") // @RequestFieldAlias.List(order = 9, lengthExpression = \\\"#ctx.msgBodyLength() - 28\\\") private List<ExtraItem> extraItemList; @Data public static class ExtraItem { // 附加信息ID @RequestField(order = 0, dataType = BYTE) // @RequestFieldAlias.Byte(order = 0) private int id; // 附加信息长度 @RequestField(order = 1, dataType = BYTE) // @RequestFieldAlias.Byte(order = 1) private int contentLength; // 附加信息内容 @RequestField(order = 3, lengthExpression = \\\"#this.contentLength\\\", dataType = BYTES) // @RequestFieldAlias.Bytes(order = 3, lengthExpression = \\\"#this.contentLength\\\") // private byte[] content; // 2.0.0 开始支持 private ByteArrayContainer content; // 2.1.1 开始支持 // private ByteBufContainer content; // 2.1.1 开始支持 } } \"]},\"287\":{\"h\":\"2.1.4\",\"t\":[\"提示\",\"2.1.4 开始，通过注解别名的扩展提供了 @RequestFieldAlias.LocationMsgExtraItemMapping 注解以简化附加项的读取流程\",\"BuiltinMsg0200V2019AliasV2\",\"BuiltinMsg0200V2013AliasV2\",\"示例如下：\",\" @Data @Accessors(chain = true) @Jt808RequestBody @BuiltinComponent public class BuiltinMsg0200V2019AliasV2 { // 省略其他属性... // 省略其他属性... // 省略其他属性... // (9). byte[28,n) 附加项列表 // @RequestField(order = 9, startIndex = 28, dataType = LIST, lengthExpression = \\\"#request.msgBodyLength() - 28\\\") // @RequestFieldAlias.List(order = 9, lengthExpression = \\\"#ctx.msgBodyLength() - 28\\\") // private List<ExtraItem> extraItemList; // (9). byte[28,n) 附加项列表 @RequestFieldAlias.LocationMsgExtraItemMapping( order = 9, lengthExpression = \\\"#ctx.msgBodyLength() - 28\\\", keyValueMappings = { // 基础类型 @KeyValueMapping(key = 0x01, value = @ValueDescriptor(source = MsgDataType.DWORD, target = Long.class), desc = \\\"里程，DWORD，1/10km，对应车上里程表读数\\\"), @KeyValueMapping(key = 0x02, value = @ValueDescriptor(source = MsgDataType.WORD, target = Integer.class), desc = \\\"油量，WORD，1/10L，对应车上油量表读数\\\"), @KeyValueMapping(key = 0x03, value = @ValueDescriptor(source = MsgDataType.WORD, target = Integer.class), desc = \\\"行驶记录功能获取的速度，WORD，1/10km/h\\\"), @KeyValueMapping(key = 0x04, value = @ValueDescriptor(source = MsgDataType.WORD, target = Integer.class), desc = \\\"需要人工确认报警事件的 ID，WORD，从 1 开始计数\\\"), @KeyValueMapping(key = 0x11, value = @ValueDescriptor(source = MsgDataType.BYTES, target = byte[].class), desc = \\\"长度1或5；超速报警附加信息见 表 28\\\"), @KeyValueMapping(key = 0x25, value = @ValueDescriptor(source = MsgDataType.DWORD, target = Integer.class), desc = \\\"扩展车辆信号状态位，定义见 表 31\\\"), @KeyValueMapping(key = 0x2A, value = @ValueDescriptor(source = MsgDataType.WORD, target = Integer.class), desc = \\\"IO状态位，定义见 表 32\\\"), @KeyValueMapping(key = 0x2B, value = @ValueDescriptor(source = MsgDataType.DWORD, target = Long.class), desc = \\\"模拟量，bit0-15，AD0;bit16-31，AD1\\\"), @KeyValueMapping(key = 0x30, value = @ValueDescriptor(source = MsgDataType.BYTE, target = Short.class), desc = \\\"BYTE，无线通信网络信号强度\\\"), @KeyValueMapping(key = 0x31, value = @ValueDescriptor(source = MsgDataType.BYTE, target = Integer.class), desc = \\\"BYTE，GNSS 定位卫星数\\\"), // 嵌套类型 @KeyValueMapping(key = 0x64, value = @ValueDescriptor(source = MsgDataType.OBJECT, target = BuiltinMsg64Alias.class), desc = \\\"苏标: 高级驾驶辅助报警信息，定义见表 4-15\\\"), // 嵌套类型 @KeyValueMapping(key = 0x65, value = @ValueDescriptor(source = MsgDataType.OBJECT, target = BuiltinMsg65Alias.class), desc = \\\"苏标: 驾驶员状态监测系统报警信息，定义见表 4-17\\\"), // 嵌套类型 @KeyValueMapping(key = 0x66, value = @ValueDescriptor(source = MsgDataType.OBJECT, target = BuiltinMsg66Alias.class), desc = \\\"苏标: 胎压监测系统报警信息，定义见表 4-18\\\"), // 嵌套类型 @KeyValueMapping(key = 0x67, value = @ValueDescriptor(source = MsgDataType.OBJECT, target = BuiltinMsg67Alias.class), desc = \\\"苏标: 盲区监测系统报警信息，定义见表 4-20\\\"), }, // keyValueMappings 中没有指定的key, 都会以该属性描述符指定的格式解析 defaultKeyValueMapping = @ValueDescriptor(source = MsgDataType.BYTES, target = ByteArrayContainer.class) ) private Map<Integer, Object> extraItemMap; } \"]},\"288\":{\"h\":\"注解驱动开发\"},\"289\":{\"h\":\"批量位置上传报文解析示例\",\"t\":[\"警告\",\"808文档中定义的位置上传报文有很多字段，但是 许多厂商实现的 808协议 位置上传报文 只是原始808的一个子集 。\",\"本文举例用到的报文也 不是标准完整的位置上传报文，但是原理都一样。\",\"此处以 2019 版的位置批量上传报文为例，展示如何基于注解来解析报文。\"]},\"290\":{\"h\":\"解析报文到实体类\",\"t\":[\"实体类映射关系如下：\",\"@Data @Accessors(chain = true) @BuiltinComponent @Jt808RequestBody public class LocationBatchUploadMsgV2019 { // byte[0,2) WORD 数据项个数 // 从 2.1.1 开始可以不再指定 `startIndex` 属性 // 从 2.1.1 开始可以不再指定 `startIndex` 属性 // 从 2.1.1 开始可以不再指定 `startIndex` 属性 // @RequestField(order = 100, startIndex = 0, dataType = WORD) @RequestField(order = 100, dataType = WORD) // @RequestFieldAlias.Word(order = 100) // v2.1.1 private int count; // byte[2] WORD 位置数据类型 @RequestField(order = 200, dataType = BYTE) // @RequestFieldAlias.Byte(order = 200) private int type; @RequestField(order = 300, lengthExpression = \\\"#ctx.msgBodyLength() - 3\\\", dataType = LIST) // @RequestFieldAlias.List(order = 300, lengthExpression = \\\"#ctx.msgBodyLength() - 3\\\") private List<Msg0704Item> itemList; @Data @Accessors(chain = true) public static class Msg0704Item { // byte[0,2) WORD 位置汇报数据体长度 @RequestField(order = 100, dataType = WORD) // @RequestFieldAlias.Word(order = 100) private int msgLength; // byte[2,n) WORD 位置汇报数据体 @RequestField(order = 200, lengthExpression = \\\"msgLength\\\", dataType = OBJECT) // @RequestFieldAlias.Object(order = 200, lengthExpression = \\\"msgLength\\\") private LocationUploadMsgV2019 locationInfo; } } \",\"消息处理器如下：\",\"@Slf4j @Component @Jt808RequestHandler public class LocationMsgHandler { @Jt808RequestHandlerMapping(msgType = 0x0704) public BuiltinServerCommonReplyMsg processLocationBatchUploadMsgV2019(Jt808RequestEntity<LocationBatchUploadMsgV2019> request) { log.info(\\\"LocationBatchUpload -- V2019 -- {}\\\", request.body()); return BuiltinServerCommonReplyMsg.success(request.msgId(), request.flowId()); } } \"]},\"291\":{\"h\":\"测试\",\"t\":[\"测试报文如下\",\"7E070400E401583860765500040003010049000000000004000301D9F190073CA3C1000C00000000211204082941010400D728AD3001003101092504000000001404000000041504000000001604000000001702000118030000000049000000000004000301D9F190073CA3C1000C00000000211130171352010400D728AD3001003101092504000000001404000000041504000000001604000000001702000118030000000049000000000004000301D9F190073CA3C1000C00000000211130171357010400D728AD300115310109250400000000140400000004150400000000160400000000170200011803000000407E \",\"消息处理器截图如下：\"]},\"292\":{\"h\":\"位置上传报文解析示例\",\"t\":[\"警告\",\"808文档中定义的位置上传报文有很多字段，但是 许多厂商实现的 808协议 位置上传报文 只是原始808的一个子集 。\",\"本文举例用到的报文也 不是标准完整的位置上传报文，但是原理都一样。\",\"此处以 2019 版的位置上传报文为例，展示如何基于注解来解析报文。\"]},\"293\":{\"h\":\"解析报文到实体类\",\"t\":[\"实体类映射关系如下：\",\"@Data @Accessors(chain = true) @Jt808RequestBody public class LocationUploadMsgV2019 { // (1). byte[0,4) DWORD 报警标志 // @RequestField(order = 1, startIndex = 0, dataType = DWORD) // 从 2.1.1 开始可以不再指定 `startIndex` 属性 // 从 2.1.1 开始可以不再指定 `startIndex` 属性 // 从 2.1.1 开始可以不再指定 `startIndex` 属性 @RequestField(order = 1, dataType = DWORD) // @RequestFieldAlias.Dword(order = 1) // v2.1.1 private long alarmFlag; // (2). byte[4,8) DWORD 状态 @RequestField(order = 2, dataType = DWORD) // @RequestFieldAlias.Dword(order = 2) private int status; // 将上面的 status 字段的第0位取出转为 int 类型 @SlicedFrom(sourceFieldName = \\\"status\\\", bitIndex = 0) private int accIntStatus; // 将上面的 status 字段的第0位取出转为 boolean 类型 @SlicedFrom(sourceFieldName = \\\"status\\\", bitIndex = 0) private Boolean accBooleanStatus; // 0 北纬;1 南纬 // 将上面的 status 字段的第2位取出转为 int 类型 @SlicedFrom(sourceFieldName = \\\"status\\\", bitIndex = 2) private int latType; // (3). byte[8,12) DWORD 纬度 @RequestField(order = 3, dataType = DWORD) // @RequestFieldAlias.Dword(order = 3) private long lat; // (4). byte[12,16) DWORD 经度 @RequestField(order = 4, dataType = DWORD) // @RequestFieldAlias.Dword(order = 4) private long lng; // (5). byte[16,18) WORD 高度 @RequestField(order = 5, dataType = WORD) // @RequestFieldAlias.Word(order = 5) private Integer height; // (6). byte[18,20) WORD 速度 @RequestField(order = 6, dataType = WORD) // @RequestFieldAlias.Word(order = 6) private int speed; // (7). byte[20,22) WORD 方向 @RequestField(order = 7, dataType = WORD) // @RequestFieldAlias.Word(order = 6) private Integer direction; // (8). byte[22,28) BCD[6] 时间 @RequestField(order = 8, dataType = BCD, length = 6) // @RequestFieldAlias.Bcd(order = 8, length = 6) private String time; // @RequestFieldAlias.BcdDateTime(order = 8) // private LocalDateTime time; // (9). byte[28,n) 附加项列表 // @RequestField(order = 9, dataType = LIST, lengthExpression = \\\"#request.msgBodyLength() - 28\\\") @RequestField(order = 9, dataType = LIST, lengthExpression = \\\"#ctx.msgBodyLength() - 28\\\") // @RequestFieldAlias.List(order = 9, lengthExpression = \\\"#ctx.msgBodyLength() - 28\\\") private List<ExtraItem> extraItemList; @Data public static class ExtraItem { // 附加信息ID @RequestField(order = 0, dataType = BYTE) // @RequestFieldAlias.Byte(order = 0) private int id; // 附加信息长度 @RequestField(order = 1, dataType = BYTE) // @RequestFieldAlias.Byte(order = 1) private int contentLength; // 附加信息内容 @RequestField(order = 3, lengthExpression = \\\"#this.contentLength\\\", dataType = BYTES) // @RequestFieldAlias.Bytes(order = 3, lengthExpression = \\\"#this.contentLength\\\") // private byte[] content; // 2.0.0 开始支持 private ByteArrayContainer content; // 2.1.1 开始支持 // private ByteBufContainer content; // 2.1.1 开始支持 } } \",\"消息处理器如下：\",\"@Slf4j @Component @Jt808RequestHandler public class LocationMsgHandler { @Jt808RequestHandlerMapping(msgType = 0x0200, versions = VERSION_2019) public BuiltinServerCommonReplyMsg processLocationUploadMsgV2019(Jt808RequestEntity<LocationUploadMsgV2019> request) { log.info(\\\"LocationUpload -- V2019 -- {}\\\", request.body()); return BuiltinServerCommonReplyMsg.success(request.msgId(), request.flowId()); } } \"]},\"294\":{\"h\":\"测试\",\"t\":[\"测试报文如下\",\"7e02004086010000000001893094655200E4000000000000000101D907F2073D336C000000000000211124114808010400000026030200003001153101002504000000001404000000011504000000FA160400000000170200001803000000EA10FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF02020000EF0400000000F31B017118000000000000000000000000000000000000000000000000567e \",\"消息处理器截图如下：\"]},\"295\":{\"h\":\"内置消息说明\",\"t\":[\"内置消息说明\",\"io.github.hylexus.jt.jt808.spec.builtin.msg.req 包下内置了一些 请求消息 实体类映射示例\",\"io.github.hylexus.jt.jt808.spec.builtin.msg.resp 包下内置了一些 响应消息 实体类映射示例\",\"这些类命名格式都是 BuiltinMsgXxx 或 BuiltinMsgXxxAlias, 以 Alias 结尾的示例是 v2.1.1 开始加入的。\",\"这些类只是个示例，很可能不符合你的需求，你应该复制一份出来修改(不同版本可能有改动)。\"]},\"296\":{\"h\":\"请求消息映射\"},\"297\":{\"h\":\"@Jt808RequestHandler\",\"t\":[\"@Jt808RequestHandler 注解的作用类似于 WebFlux/WebMvc 中的 @Controller/@RestController。\",\"就是标记一下被该注解修饰的类中存在若干个能处理请求的处理器方法。没有其他任何属性。\",\"警告\",\"被该注解标记的类应该是被 Spring 管理的类。一般来说应该和 Spring 的 @Component 等注解同时出现。\",\"因为在 2.x 中去掉了配置包手动扫描的功能(配置繁琐，还不如直接交给 Spring 来处理)。\"]},\"298\":{\"h\":\"@Jt808RequestHandlerMapping\",\"t\":[\"该注解和 WebFlux/WebMvc 中 @RequestMapping 、@GetMapping 等注解功能类似。\",\"表明被该注解修饰的方法具有处理请求的能力。\"]},\"299\":{\"h\":\"属性\",\"t\":[\"属性\",\"说明\",\"默认值\",\"示例\",\"msgType\",\"消息类型\",\"--\",\"{0x0001}、{0x0102}\",\"versions\",\"协议版本\",\"AUTO_DETECTION\",\"VERSION_2013 、{VERSION_2019,VERSION_2013}\",\"desc\",\"描述信息\",\"\\\"\\\"\",\"\\\"Some description ...\\\"\"]},\"300\":{\"h\":\"示例\",\"t\":[\"@Component @Jt808RequestHandler public class CommonHandler { @Jt808RequestHandlerMapping(msgType = 0x0100, versions = VERSION_2019, desc = \\\"xxx\\\") public TerminalRegisterReplyMsg clientRegisterV2019(Jt808RequestEntity<BuiltinMsg0100V2019> request) { final BuiltinMsg0100V2019 body = request.body(); log.info(\\\"client register v2019 : {}\\\", body); return new TerminalRegisterReplyMsg().setFlowId(request.flowId()).setResult((byte) 0).setAuthCode(\\\"AuthCode2019----\\\"); } } \"]},\"301\":{\"h\":\"@Jt808RequestBody\",\"t\":[\"该注解和 WebFlux/WebMvc 中 @RequestBody 注解功能类似。 可以将 请求体 映射到被该注解修饰的类。\",\"和 @Jt808RequestHandler 注解一样，该注解仅仅起一个标记作用，暂时没有其他属性。\"]},\"302\":{\"h\":\"@RequestField\"},\"303\":{\"h\":\"属性\",\"t\":[\"属性\",\"说明\",\"默认值\",\"示例\",\"order\",\"字段解析顺序(不要求连续，只比较大小)\",\"--\",\"0、1、2\",\"startIndex\",\"起始字节索引(2.1.1开始不再需要指定)\",\"-1\",\"0、2、4、8\",\"startIndexExpression\",\"作用和 startIndex 相同,但是该属性是基于 SpEL 的(2.1.1开始不再需要指定)\",\"\\\"\\\"\",\"\\\"#ctx.msgBodyLength() - 27 + 1\\\"\",\"startIndexMethod\",\"作用和 startIndex 相同,但是该属性返回的是一个方法名(2.1.1开始不再需要指定)\",\"\\\"\\\"\",\"somMethodName\",\"length\",\"该字段所占的字节数、长度\",\"-1\",\"2、4\",\"lengthExpression\",\"作用和 length 相同,但是该属性是基于 SpEL 的\",\"\\\"\\\"\",\"#this.someFieldValue + 1 - 2 * 3\",\"lengthMethod\",\"作用和 length 相同, 但是该属性返回的是一个 方法名\",\"\\\"\\\"\",\"\\\"SomMethodName\\\"\",\"dataType\",\"数据类型\",\"--\",\"DWORD 、BYTES\",\"customerFieldDeserializerClass\",\"自定义的类型转换器\",\"--\",\"XxxDeserializer.class\"]},\"304\":{\"h\":\"SpEL\",\"t\":[\"该注解的 startIndexExpression 和 lengthExpression 两个属性支持 SpEL。可用的 SpEL元数据如下：\",\"属性\",\"说明\",\"this\",\"正在迭代的当前对象\",\"request\",\"本次请求对应的 Jt808Request 实例\",\"header\",\"本次请求对应的 Jt808Request#header() 实例\",\"ctx\",\"AnnotationDecoderContext 实例，代表正在迭代对象的上下文(msgBodyLength 属性代表当前正在迭代的数据大小(字节数))\",\"context\",\"同 ctx\",\"提示\",\"SpEL 绑定的 RootObject 就是当前正在迭代的对象。\",\"所以 #this.someField 等价于 someField、#this.someMethod() 等价于 someMethod() (#this 可以省略)。\"]},\"305\":{\"h\":\"示例\",\"t\":[\"提示\",\"从 2.1.1 开始 startIndex, startIndexExpression, startIndexMethod 可以省略。\",\"@Jt808RequestBody public class BuiltinMsg0100V2019 { // 1. [0-2) WORD 省域ID // WORD 类型固定长度就是2字节 所以无需指定length @RequestField(order = 1, dataType = WORD) private int provinceId; // 2. [2-4) WORD 省域ID @RequestField(order = 2, dataType = WORD) private int cityId; // 3. [4-15) BYTE[11] 制造商ID @RequestField(order = 3, dataType = STRING, length = 11) private String manufacturerId; // 4. [15-45) BYTE[30] 终端型号 @RequestField(order = 4, dataType = STRING, length = 30) private String terminalType; // 5. [45-75) BYTE[30] 终端ID @RequestField(order = 5, dataType = STRING, length = 30) private String terminalId; // 6. [75] BYTE 车牌颜色 @RequestField(order = 6, dataType = BYTE) private byte color; // 7. [76,n) String 车辆标识 // 使用 SpEL 计算消息长度(上下文中的消息体总长度减去前面消费掉的字节数) @RequestField(order = 7, dataType = STRING, lengthExpression = \\\"#ctx.msgBodyLength() - 76\\\") private String carIdentifier; } \"]},\"306\":{\"h\":\"@SlicedFrom\",\"t\":[\"警告\",\"该注解目前仅仅适用于 int 、 short 、 byte 类型的字段。\",\"2.1.1 开始支持 long 类型。\"]},\"307\":{\"h\":\"属性\",\"t\":[\"sourceFieldName\",\"源字段名\",\"bitIndex\",\"源字段中的第几个bit\",\"0\",\"startBitIndex\",\"源字段中的起始bit索引\",\"1\",\"endBitIndex\",\"源字段中的终止bit索引\",\"2\"]},\"308\":{\"h\":\"示例\",\"t\":[\"提示\",\"从 2.1.1 开始 startIndex, startIndexExpression, startIndexMethod 可以省略。\",\"@Jt808RequestBody public class BuiltinMsg0200V2013 { // (2). byte[4,8) DWORD 状态 @RequestField(order = 2, dataType = DWORD) private int status; // 将上面的 status 字段的第0位取出转为 int 类型 @SlicedFrom(sourceFieldName = \\\"status\\\", bitIndex = 0) private int accIntStatus; // 将上面的 status 字段的第0位取出转为 boolean 类型 @SlicedFrom(sourceFieldName = \\\"status\\\", bitIndex = 0) private Boolean accBooleanStatus; // 0 北纬;1 南纬 // 将上面的 status 字段的第2位取出转为 int 类型 @SlicedFrom(sourceFieldName = \\\"status\\\", bitIndex = 2) private int latType; } \"]},\"309\":{\"h\":\"响应消息映射\"},\"310\":{\"h\":\"@Jt808ResponseBody\",\"t\":[\"该注解的作用类似于 WebFlux/WebMvc 中的 @ResponseBody 。\",\"表明被该注解标记的类可以作为 响应体。\"]},\"311\":{\"h\":\"属性\",\"t\":[\"属性\",\"说明\",\"默认值\",\"示例\",\"msgId\",\"消息类型\",\"--\",\"{0x8103}、{0x8001}\",\"maxPackageSize\",\"单个数据包的最大大小(转义之前)\",\"1024\",\"1024 、 2048\",\"desc\",\"描述信息\",\"\\\"\\\"\",\"\\\"Some description ...\\\"\",\"reversedBit15InHeader\",\"消息体属性中保留的第15个 bit\",\"0\"]},\"312\":{\"h\":\"示例\",\"t\":[\"@Jt808ResponseBody(msgId = 0x8103, desc = \\\"设置终端参数\\\") public class RespTerminalSettings { @ResponseField(order = 2, dataType = MsgDataType.LIST) private List<ParamItem> paramList; // ... } \"]},\"313\":{\"h\":\"@ResponseField\"},\"314\":{\"h\":\"属性\",\"t\":[\"属性\",\"说明\",\"默认值\",\"示例\",\"order\",\"赋值顺序，值越小优先级越高(不要求连续，只比较大小)\",\"--\",\"0、1、2\",\"dataType\",\"数据类型\",\"--\",\"WORD、BYTE\",\"conditionalOn\",\"支持 SpEL , 当且仅当计算结果为 true 时才会序列化\",\"\\\"\\\"\",\"\\\"#this.result == 0\\\"\",\"customerFieldSerializerClass\",\"自定义反序列化器\",\"--\",\"\\\"XxxSerializer.class\\\"\"]},\"315\":{\"h\":\"SpEL\",\"t\":[\"属性\",\"说明\",\"this\",\"正在迭代的当前对象\",\"永不为空\",\"request\",\"本次请求对应的 Jt808Request 实例\",\"主动下发消息时为空(因为此时没有 Request 的概念)\",\"header\",\"本次请求对应的 Jt808Request#header() 实例\",\"主动下发消息时为空(因为此时没有 Request 的概念)\",\"session\",\"Jt808Session 实例\",\"手动编码消息时可能为空\",\"提示\",\"SpEL 绑定的 RootObject 就是当前正在迭代的对象。\",\"所以 #this.someField 等价于 someField、#this.someMethod() 等价于 someMethod() (#this 可以省略)。\"]},\"316\":{\"h\":\"示例\",\"t\":[\"@Data @Accessors(chain = true) @Jt808ResponseBody(msgId = 0x8100) public class TerminalRegisterReplyRespMsg { // 1. byte[0,2) WORD 对应的终端注册消息的流水号 @ResponseField(order = 0, dataType = MsgDataType.WORD) private int flowId; // 2. byte[2,3) BYTE 0:成功;1:车辆已被注册;2:数据库中无该车辆; 3:终端已被注册;4:数据库中无该终端 @ResponseField(order = 1, dataType = MsgDataType.BYTE) private byte result; // 3. byte[3,x) STRING 鉴权码(只有在成功后才有该字段) @ResponseField(order = 3, dataType = MsgDataType.STRING, conditionalOn = \\\"result == 0\\\") private String authCode; } \"]},\"317\":{\"h\":\"消息下发\"},\"318\":{\"h\":\"手动下发\",\"t\":[\"所谓手动下发就是指使用 io.github.hylexus.jt.jt808.spec.session.Jt808Session.sendMsgToClient(io.netty.buffer.ByteBuf) 方法来发送数据。\",\"@RestController @RequestMapping(\\\"/demo01\\\") public class DemoController { private final Jt808CommandSender commandSender; private final Jt808SessionManager sessionManager; public DemoController(Jt808CommandSender commandSender, Jt808SessionManager sessionManager) { this.commandSender = commandSender; this.sessionManager = sessionManager; } @RequestMapping(\\\"/send-some-msg\\\") public void sendMsgBySession(@RequestParam(name = \\\"terminalId\\\", required = false, defaultValue = \\\"013912344323\\\") String terminalId) { this.sessionManager.findByTerminalId(terminalId) .orElseThrow(() -> new IllegalArgumentException(\\\"No terminal found with terminalId \\\" + terminalId)) // 手动编码后通过 Session 下发消息 .sendMsgToClient(ByteBufAllocator.DEFAULT.buffer().writeBytes(\\\"data will be sent to client\\\".getBytes(Charset.forName(\\\"GBK\\\")))); } } \"]},\"319\":{\"h\":\"CommandSender 消息下发流程图\",\"t\":[\"通过 Jt808SessionManager 获取到 Jt808Session\",\"通过上一步中获取到的 Jt808Session 下发消息\",\"同时生成一个消息应答的 key 放入 CommandWaitingPool 中等待\",\"出站（服务端下发）\",\"入站（客户端上报）\",\"消息处理器处理 \",\"这里的消息处理器就是被 @Jt808RequestHandlerMapping 修饰的消息处理方法\",\"这一步应该将收到的客户端消息放入的 CommandWaitingPool 中 \",\"然后 步骤3 中处于等待状态的线程会拿到这个 key 对应的消息\",\"步骤3 和 步骤7 生成的 key 必须是一致的，否则 步骤3 中的线程取不到值\",\"同时应该注意：步骤3 中的线程应该和 步骤7 中的线程分开，不要使用同一个线程，否则会出现线程阻塞问题，取不到值\"]},\"320\":{\"h\":\"通过CommandSender下发\",\"t\":[\"下发消息，并等待。\",\"@RestController @RequestMapping(\\\"/demo01\\\") public class DemoController { private final Jt808CommandSender commandSender; private final Jt808SessionManager sessionManager; public DemoController(Jt808CommandSender commandSender, Jt808SessionManager sessionManager) { this.commandSender = commandSender; this.sessionManager = sessionManager; } // 7E00010005013912344323007B0001810300827E @RequestMapping(\\\"/set-terminal-params\\\") public Object sendMsg( @RequestParam(name = \\\"terminalId\\\", required = false, defaultValue = \\\"013912344323\\\") String terminalId) throws InterruptedException { final RespTerminalSettings param = new RespTerminalSettings(); final List<RespTerminalSettings.ParamItem> paramList = List.of( new RespTerminalSettings.ParamItem(0x0029, ByteBufAllocator.DEFAULT.buffer().writeInt(100)), new RespTerminalSettings.ParamItem(0x0030, ByteBufAllocator.DEFAULT.buffer().writeInt(211)) ); param.setParamList(paramList); param.setTotalParamCount(paramList.size()); final Jt808Session session = sessionManager.findByTerminalId(terminalId).orElseThrow(); final int nextFlowId = session.nextFlowId(); // 1. 生成Key(收到终端回复时会根据这个Key来匹配) final Jt808CommandKey commandKey = Jt808CommandKey.of(terminalId, BuiltinJt808MsgType.CLIENT_COMMON_REPLY, nextFlowId); final Object resp = commandSender.sendCommandAndWaitingForReply(commandKey, param, 20L, TimeUnit.SECONDS); log.info(\\\"RESP::::::: {}\\\", resp); return resp; } } \",\"收到结果后，放入 CommandWaitingPool。\",\"@Component @Jt808RequestHandler public class CommonHandler { @Jt808RequestHandlerMapping(msgType = 0x0001, versions = Jt808ProtocolVersion.AUTO_DETECTION) public void processMsg0001(Jt808RequestEntity<BuiltinTerminalCommonReplyMsg> request) { final BuiltinTerminalCommonReplyMsg body = request.body(); final String terminalId = request.header().terminalId(); // 2. 生成同样的Key final Jt808CommandKey commandKey = Jt808CommandKey.of(terminalId, BuiltinJt808MsgType.CLIENT_COMMON_REPLY, body.getServerFlowId()); // 将结果放入CommandWaitingPool CommandWaitingPool.getInstance().putIfNecessary(commandKey, body); } } \"]},\"321\":{\"h\":\"处理器拦截器\"},\"322\":{\"h\":\"介绍\",\"t\":[\"从 SpringMvc 借鉴(抄袭)了一个 Jt808HandlerInterceptor ,会在执行处理器方法之前、之后已经处理器方法出现异常时回调对应方法。\",\"这个接口的作用和 SpringMvc 的 HandlerInterceptor 一样。\",\"提示\",\"将 Jt808HandlerInterceptor 的实现类实例加入到 spring 容器中就可以生效了。\",\"接口定义如下：\",\"public interface Jt808HandlerInterceptor extends OrderedComponent { /** * 调用处理器方法之前回调 * * @param exchange 当前请求上下文 * @param handler 处理当前消息的处理器,内置处理器有两种: * <ol> * <li>{@link SimpleJt808RequestHandler SimpleJt808RequestHandler} 的实现类</li> * <li>被 {@link Jt808RequestHandlerMapping @Jt808RequestHandlerMapping} 标记的方法</li> * </ol> * @return true: 会正常调用处理器方法处理消息; false: 直接返回,不再调用处理器方法 */ default boolean preHandle(Jt808ServerExchange exchange, Object handler) throws Throwable { return true; } /** * 处理器执行结束之后回调 * * @param exchange 当前请求上下文 * @param handler 处理当前消息的处理器,内置处理器有两种: * <ol> * <li>{@link SimpleJt808RequestHandler SimpleJt808RequestHandler} 的实现类</li> * <li>被 {@link Jt808RequestHandlerMapping @Jt808RequestHandlerMapping} 标记的方法</li> * </ol> * @param handlerResult 处理器处理结果 */ default void postHandle(Jt808ServerExchange exchange, Object handler, @Nullable Jt808HandlerResult handlerResult) throws Throwable { } /** * @param exchange 当前请求上下文 * @param handler 处理当前消息的处理器,内置处理器有两种: * <ol> * <li>{@link SimpleJt808RequestHandler SimpleJt808RequestHandler} 的实现类</li> * <li>被 {@link Jt808RequestHandlerMapping @Jt808RequestHandlerMapping} 标记的方法</li> * </ol> * @param exception 处理器处理消息时候出现的异常(@Nullable) */ default void afterCompletion(Jt808ServerExchange exchange, Object handler, @Nullable Throwable exception) throws Throwable { } } \"]},\"323\":{\"h\":\"示例\",\"t\":[\"实现接口，并加入到 Spring 容器中即可。如果有多个拦截器，可以通过复写 getOrder() 方法来控制多个拦截器的执行顺序。\"]},\"324\":{\"h\":\"基础\"},\"325\":{\"h\":\"请求参数解析器\"},\"326\":{\"h\":\"介绍\",\"t\":[\"这部分也是借鉴(抄袭) Spring 的。\",\"上一小节介绍了怎么接收请求，但是接收到的都是 Jt808Request 类型。\",\"就类似于 JavaWeb 开发中的 Servlet 一样给你一个 HttpServletRequest : 后续所有解析操作都要手动进行，比较繁琐。\",\"所以本项目也提供了几个内置的 Jt808HandlerMethodArgumentResolver 来将原始的 Jt808Request 转换成可读性较强的自定义类型，这些转换功能都是依赖于参数解析器 Jt808HandlerMethodArgumentResolver：\",\"public interface Jt808HandlerMethodArgumentResolver { boolean supportsParameter(MethodParameter methodParameter); Object resolveArgument(MethodParameter methodParameter, ArgumentContext context) throws Jt808ArgumentResolveException; } \"]},\"327\":{\"h\":\"支持的参数类型\",\"t\":[\"内置的几种 参数解析器 如下：\",\"在默认配置的情况下，你可以按需在 请求处理器方法参数 中使用如下类型中的若干个：\",\"Jt808Request\",\"Jt808RequestHeader\",\"Jt808Response\",\"Jt808Session\",\"Jt808ServerExchange\",\"被@Jt808RequestBody标记的自定义类型\",\"Jt808RequestEntity\"]},\"328\":{\"h\":\"Jt808Request\",\"t\":[\"在处理器方法中注入 Jt808Request 类型参数：\",\"@Component @Jt808RequestHandler public class AnnotationHandler01 { @Jt808RequestHandlerMapping(msgType = 0x0001, versions = Jt808ProtocolVersion.AUTO_DETECTION) public void processMsg0001(Jt808Request request) { // ... } } \"]},\"329\":{\"h\":\"Jt808Response\",\"t\":[\"在处理器方法中注入 Jt808Response 类型参数：\",\"@Slf4j @Component @Jt808RequestHandler public class AnnotationHandler01 { @Jt808RequestHandlerMapping(msgType = 0x0100, versions = Jt808ProtocolVersion.VERSION_2013) public Jt808Response process(Jt808Request request, Jt808Response response) { // ... process(request) return response.msgId(BuiltinJt808MsgType.SERVER_COMMON_REPLY.getMsgId()) .writeWord(request.flowId()) .writeByte(0) .writeString(\\\"AuthCodeXxx\\\"); } } \"]},\"330\":{\"h\":\"Jt808Session\",\"t\":[\"在处理器方法中注入 Jt808Session 类型参数：\",\"@Slf4j @Component @Jt808RequestHandler public class AnnotationHandler01 { @Jt808RequestHandlerMapping(msgType = 0x0100, versions = Jt808ProtocolVersion.VERSION_2013) public Jt808Response process(Jt808Session session, Jt808Response response, ...) { // ... process(request) return ...; } } \"]},\"331\":{\"h\":\"Jt808ServerExchange\",\"t\":[\"在处理器方法中注入 Jt808ServerExchange 类型参数：\",\"@Component @Jt808RequestHandler public class AnnotationHandler01 { @Jt808RequestHandlerMapping(msgType = 0x0100, versions = Jt808ProtocolVersion.VERSION_2013) public Jt808Response process(Jt808ServerExchange exchange) { // ... process(exchange.request()) return exchange.response().msgId(BuiltinJt808MsgType.SERVER_COMMON_REPLY.getMsgId()) .writeWord(request.flowId()) .writeByte(0) .writeString(\\\"AuthCodeXxx\\\"); } } \"]},\"332\":{\"h\":\"Jt808RequestHeader\",\"t\":[\"在处理器方法中注入 Jt808ServerExchange 类型参数：\",\"@Component @Jt808RequestHandler public class AnnotationHandler01 { @Jt808RequestHandlerMapping(msgType = 0x0100, versions = Jt808ProtocolVersion.VERSION_2013) public Jt808Response process(Jt808RequestHeader header, Jt808Response response, ...) { // ... process(exchange.request()) return ...; } } \"]},\"333\":{\"h\":\"@Jt808RequestBody\",\"t\":[\"下面的 DebugTerminalRegisterMsgV2013 被 @Jt808RequestBody 注解标记了，表示给类用来接收请求体。\",\"@Component @Jt808RequestHandler public class AnnotationHandler01 { @Jt808RequestHandlerMapping(msgType = 0x0100, versions = Jt808ProtocolVersion.VERSION_2013) public Object processRegisterMsgV2013(DebugTerminalRegisterMsgV2013 authMsgV2013, Jt808Request request, Jt808Session session) { log.info(\\\"{}\\\", authMsgV2013); return new TerminalRegisterReplyRespMsg() .setFlowId(request.flowId()) .setResult((byte) 0) .setAuthCode(\\\"AuthCode2013DebugDemo\\\"); } @Data @Jt808RequestBody public static class DebugTerminalRegisterMsgV2013 { // 1. [0-2) WORD 省域ID @RequestField(order = 1, dataType = WORD) private int provinceId; // ... } } \"]},\"334\":{\"h\":\"Jt808RequestEntity\",\"t\":[\"该类和 Spring 的 org.springframework.http.RequestEntity 类似。包含了本次请求的所有信息。\",\"泛型 body 部分的处理逻辑和被 @Jt808RequestBody 标记的类的处理逻辑相同。该类定义如下：\",\"public class Jt808RequestEntity<T> { private final MsgType msgType; private final Jt808RequestHeader header; private final ByteBuf rawByteBuf; private final T body; private final byte originalCheckSum; private final byte calculatedCheckSum; private final Jt808Session session; // ... } \",\"示例如下：\",\"@Component @Jt808RequestHandler public class BuiltinCommonHandler { @Jt808RequestHandlerMapping(msgType = 0x0704) public BuiltinServerCommonReplyMsg processMsg0704(Jt808RequestEntity<BuiltinMsg0704V2013> requestEntity) { log.info(\\\"BuiltinMsg0704 : {}\\\", requestEntity.body()); return BuiltinServerCommonReplyMsg.success(requestEntity.msgType().getMsgId(), requestEntity.flowId()); } } \"]},\"335\":{\"h\":\"请求消息处理器\"},\"336\":{\"h\":\"介绍\",\"t\":[\"提示\",\"接收/处理 请求没有强制指定固定类型的处理器，由谁来处理消息取决于 Jt808HandlerMapping 配置。\",\"内置了两个 Jt808HandlerMapping:\",\"SimpleJt808RequestHandlerHandlerMapping 能将消息路由到 SimpleJt808RequestHandler 类型的 类级别 处理器。\",\"Jt808RequestHandlerMappingHandlerMapping 能将消息路由到 @Jt808RequestHandlerMapping 注解修饰的 方法级别 处理器。\"]},\"337\":{\"h\":\"@Jt808RequestHandlerMapping\"},\"338\":{\"h\":\"介绍\",\"t\":[\"被 @Jt808RequestHandlerMapping 标记的这种处理器也是从 Spring 借鉴(抄袭)的。和 Spring 的 @Controller、@RestController 用法类似。\",\"作用就是标记一下当前类是一个消息处理器类。被该注解标记的类中应该存在若干个能处理请求的方法。\"]},\"339\":{\"h\":\"示例\",\"t\":[\"@Slf4j @Component // @Jt808RequestHandler 标记该类 表示该类是一个消息处理器累(具体的处理器是该类中的部分方法) @Jt808RequestHandler public class SomeRequestHandler { @Jt808RequestHandlerMapping(msgType = 0x0100, versions = VERSION_2013) public TerminalRegisterReplyMsg processTerminalRegisterMsgV2011(Jt808Request request, TerminalRegisterMsgV2011 body) { processRequest(request, body); return ...; } @Jt808RequestHandlerMapping(msgType = 0x0100, versions = VERSION_2019) public TerminalRegisterReplyMsg processTerminalRegisterMsgV2019(Jt808RequestEntity<TerminalRegisterMsgV2019> request) { processRequest(request, body); return ...; } } \"]},\"340\":{\"h\":\"SimpleJt808RequestHandler\"},\"341\":{\"h\":\"介绍\",\"t\":[\"最直观的处理方式就是类似于 Spring 的 WebFlux 中的 org.springframework.web.reactive.function.server.HandlerFunction。\",\"但是 HandlerFunction 需要借助 RouterFunction 来将请求和 HandlerFunction 联系起来。\",\"本项目借鉴(抄袭) WebFlux，提供了一个 SimpleJt808RequestHandler(为了编码简单，直接省去了 RouterFunction) :\"]},\"342\":{\"h\":\"示例\",\"t\":[\"使用方式\",\"直接将实现了 SimpleJt808RequestHandler 接口的处理器类加入到 Spring 容器中就可以。\",\"@Slf4j @Component public class TerminalRegisterMsgHandlerV2011 implements SimpleJt808RequestHandler<BuiltinMsg8100> { /** * 处理 [终端注册] 消息 */ @Override public Set<MsgType> getSupportedMsgTypes() { return Set.of(BuiltinJt808MsgType.CLIENT_REGISTER); } /** * 处理 [V2011] 版的消息 */ @Override public Set<Jt808ProtocolVersion> getSupportedVersions() { return Jt808ProtocolVersion.unmodifiableSetVersion2011(); } // 7E01000023013912344321007B000B0002696431323361626364656667684944313233343501B8CA4A2D313233343531317E @Override public BuiltinMsg8100 handleMsg(Jt808ServerExchange exchange) { processRequest(exchange); return ... } } \"]},\"343\":{\"h\":\"请求处理流程\",\"t\":[\"在本项目中，所有请求的处理都是一个风格 ：\",\"接收 Jt808Request (或由 Jt808Request 转换出来的其他类型)\",\"处理业务逻辑\",\"返回 Jt808Response (或可以转换为 Jt808Response 的其他类型)\",\"具体流程可以结合  来了解。\"]},\"344\":{\"h\":\"请求消息分包\"},\"345\":{\"h\":\"分包合并\",\"t\":[\"收到终端上报的分包请求时，会先将分包消息 暂存 到 分包暂存器(Jt808RequestSubPackageStorage);等所有子包都到达后会自动合并消息，投递给消息处理器处理。\"]},\"346\":{\"h\":\"分包暂存器\",\"t\":[\"/** * 遇到分包请求时会回调 {@link #saveSubPackage(Jt808Request)} 将分包暂存起来。 * <p> * 实现类至少应该实现下面几个功能: * * <ol> * <li>当所有子包都到达后，实现类应该负责将消息合并 && 将合并后的完整消息使用 {@link Jt808RequestMsgDispatcher#doDispatch(Jt808Request)} 投递出去</li> * <li>某些子包丢失未到达时应该自动发送 `0x8003` 消息给终端，要求终端重传某些子包</li> * <li>长时间未到达服务端的子包应该及时回收掉, 最长暂存多久由具体实现类自行决定</li> * </ol> * * @author hylexus * @see Jt808RequestMsgDispatcher#doDispatch(Jt808Request) */ public interface Jt808RequestSubPackageStorage { /** * 分包请求到达时回调该方法，暂存分包请求。 * <p> * 如有必要，实现类应该自行回收掉 {@link Jt808Request#body()} 和 {@link Jt808Request#rawByteBuf()} * * @param subPackage 分包请求 */ void saveSubPackage(Jt808Request subPackage); } \"]},\"347\":{\"h\":\"内置分包暂存器\",\"t\":[\"警告\",\"如果配置了 jt808.request-sub-package-storage.type = none，也就意味着所有的分包请求都会被丢弃!!!\",\"警告\",\"如果配置了 jt808.request-sub-package-storage.type = none，也就意味着所有的分包请求都会被丢弃!!!\",\"警告\",\"如果配置了 jt808.request-sub-package-storage.type = none，也就意味着所有的分包请求都会被丢弃!!!\",\"CaffeineJt808RequestSubPackageStorage\",\"基于 caffeine 的请求消息分包暂存器\",\"当 jt808.request-sub-package-storage.type = caffeine 时启用\",\"Jt808RequestSubPackageStorage.NO_OPS\",\"空的实现(忽略所有分包请求)\",\"当 jt808.request-sub-package-storage.type = none 时启用\"]},\"348\":{\"h\":\"示例\",\"t\":[\"下面以终端注册消息(0x0001) 为例来观察一下分包的过程。\",\"暂时调整日志级别以便观察分包请求处理\",\"logging: level.root: info # 将默认解码器的日志级别调整到debug 来观察请求分包消息 level.jt-808.request.decoder: debug # 将请求分包暂存器(默认为基于Caffeine的实现)的日志级别调整的debug 来观察分包请求的处理过程 level.io.github.hylexus.jt.jt808.support.codec.impl.CaffeineJt808RequestSubPackageStorage: debug \",\"发送下面三条分包报文：\",\"7E010060240100000000013912344329000000030001000B00026964393837363534333231747970653030313233343536373831323334353637277E 7E010060240100000000013912344329000100030002383837363534333231494430303030313233343536373831323334353637383837363534357E 7E0100600E010000000001391234432900020003000333323101B8CA4A2D313233343539347E \",\"发送三条报文之后，可以观察到类似如下日志：\",\"上面日志解释如下：\",\"# 0x0001 的第1个子包(-: 转义之前; +: 转义之后) - >>>>>>>>>>>>>>> : 7E010060240100000000013912344329000000030001000B00026964393837363534333231747970653030313233343536373831323334353637277E + >>>>>>>>>>>>>>> : 7E010060240100000000013912344329000000030001000B00026964393837363534333231747970653030313233343536373831323334353637277E + >>>>>>>>>>>>>>> (0x0100--60) 1/3: 7E010060240100000000013912344329000000030001000B00026964393837363534333231747970653030313233343536373831323334353637277E # 0x0001 的第2个子包(-: 转义之前; +: 转义之后) - >>>>>>>>>>>>>>> : 7E010060240100000000013912344329000100030002383837363534333231494430303030313233343536373831323334353637383837363534357E + >>>>>>>>>>>>>>> : 7E010060240100000000013912344329000100030002383837363534333231494430303030313233343536373831323334353637383837363534357E + >>>>>>>>>>>>>>> (0x0100--60) 2/3: 7E010060240100000000013912344329000100030002383837363534333231494430303030313233343536373831323334353637383837363534357E # 0x0001 的第3个子包(-: 转义之前; +: 转义之后) - >>>>>>>>>>>>>>> : 7E0100600E010000000001391234432900020003000333323101B8CA4A2D313233343539347E - + >>>>>>>>>>>>>>> : 7E0100600E010000000001391234432900020003000333323101B8CA4A2D313233343539347E + >>>>>>>>>>>>>>> (0x0100--38) 3/3: 7E0100600E010000000001391234432900020003000333323101B8CA4A2D313233343539347E # 分包暂存器发现所有子包都到达了 --> 合并消息重新投递出去待处理器处理 DEBUG i.g.h.j.j.s.c.i.CaffeineJt808RequestSubPackageStorage - Redispatch mergedRequest : DefaultJt808Request{msgType=BuiltInMsgType{msgId=256(0x0100), desc='终端注册'}, header=HeaderSpec{version=VERSION_2019, terminalId='00000000013912344329', msgId=256, flowId=2, msgBodyProps=MsgBodyProps{intValue=16470, msgBodyLength=86, hasSubPackage=false, encryptionType=0}}, checkSum=0} \"]},\"349\":{\"h\":\"分包补传\",\"t\":[\"这里的分包补传指的是 0x8003 消息。\",\"内置的分包请求暂存器目前就只有一种基于 Caffeine 的实现 : CaffeineJt808RequestSubPackageStorage。\",\"提示\",\"暂时没想到一种比较优雅的、自动化的、可扩展的服务端分包补传处理流程。\",\"所以服务端分包补传消息暂时不支持，后续版本升级会实现。\",\"也就是说，2.0.0 版本不支持自动化的 0x8003 消息处理。\",\"你可以自定义 Jt808RequestSubPackageStorage 的实现类来实现这个功能。\"]},\"350\":{\"h\":\"响应消息处理器\"},\"351\":{\"h\":\"说明\",\"t\":[\"提示\",\"对响应给客户端的消息类型没有强制指定固定类型，任何类型的消息处理器返回的结果都被包装成了 Jt808HandlerResult。\",\"而 Jt808HandlerResult 是由 Jt808HandlerResultHandler 处理的。\",\"所以，支持哪些类型的响应消息取决于 Jt808HandlerResultHandler 的配置。\",\"内置了两个 Jt808HandlerResultHandler:\",\"Jt808ResponseHandlerResultHandler 能处理 Jt808Response 类型的响应数据。\",\"Jt808ResponseBodyHandlerResultHandler 能将处理被 @Jt808ResponseBody 注解修饰的返回类型。\",\"提示\",\"本小节主要介绍 Jt808ResponseHandlerResultHandler 类型的 类级别 处理器，毕竟当注解不方便处理请求时，这种类型的 HandlerResultHandler 是内置的 *HandlerResultHandler* 中唯一的选择。\"]},\"352\":{\"h\":\"@Jt808ResponseBody\"},\"353\":{\"h\":\"说明\",\"t\":[\"这个注解也是借鉴(抄袭)Spring 的 @ResponseBody 注解，表示被标记的类是响应体。\"]},\"354\":{\"h\":\"示例\",\"t\":[\"下面是被 @Jt808ResponseBody 标记的类，表示该类是给客户端回复数据的 body() 部分：\",\"@Data @Accessors(chain = true) @Jt808ResponseBody(msgId = 0x8100, maxPackageSize = 33) public class TerminalRegisterReplyMsg { // 1. byte[0,2) WORD 对应的终端注册消息的流水号 @ResponseField(order = 0, dataType = MsgDataType.WORD) private int flowId; // 2. byte[2,3) BYTE 0:成功;1:车辆已被注册;2:数据库中无该车辆; 3:终端已被注册;4:数据库中无该终端 @ResponseField(order = 1, dataType = MsgDataType.BYTE) private byte result; // 3. byte[3,x) STRING 鉴权码(只有在成功后才有该字段) @ResponseField(order = 3, dataType = MsgDataType.STRING, conditionalOn = \\\"result == 0\\\") private String authCode; } \",\"下面是回复客户端的部分伪代码：\",\"@Component @Jt808RequestHandler public class CommonHandler { @Jt808RequestHandlerMapping(msgType = 0x0100, versions = VERSION_2019) public TerminalRegisterReplyMsg processTerminalRegisterMsgV2019(Jt808RequestEntity<TerminalRegisterMsgV2019> request) { log.info(\\\"V2019--TerminalRegister : {}\\\", request); return new TerminalRegisterReplyMsg() .setFlowId(request.flowId()) .setResult((byte) 0) .setAuthCode(\\\"authCode2019-admin\\\") ; } } \"]},\"355\":{\"h\":\"Jt808Response\"},\"356\":{\"h\":\"说明\"},\"357\":{\"h\":\"示例\",\"t\":[\"@Slf4j @Component public class TerminalRegisterMsgHandlerV2013 implements SimpleJt808RequestHandler<Jt808Response> { /** * 处理 [终端注册] 消息 */ @Override public Set<MsgType> getSupportedMsgTypes() { return Set.of(BuiltinJt808MsgType.CLIENT_REGISTER); } /** * 处理 [V2013] 版的消息 */ @Override public Set<Jt808ProtocolVersion> getSupportedVersions() { return Jt808ProtocolVersion.unmodifiableSetVersion2013(); } // 7E0100002F013912344323007B000B0002696431323374797065313233343536373838373635343332314944313233343501B8CA4A2D3132333435332D7E @Override public Jt808Response handleMsg(Jt808ServerExchange exchange) { // ...忽略请求读取过程 // 手动创建一个新的Jt808Response返回 return Jt808Response.newBuilder() .msgId(BuiltinJt808MsgType.CLIENT_REGISTER_REPLY) .terminalId(exchange.request().terminalId()) .flowId(exchange.session().nextFlowId()) .version(exchange.request().version()) .body(writer -> writer // 1. byte[0,2) WORD 对应的终端注册消息的流水号 .writeWord(exchange.request().flowId()) // 2. byte[2,3) BYTE 0:成功;1:车辆已被注册;2:数据库中无该车辆; 3:终端已被注册;4:数据库中无该终端 .writeByte(0) // 3. byte[3,x) STRING 鉴权码(只有在成功后才有该字段) .writeString(\\\"AuthCode-123\\\") ) .build(); } } \"]},\"358\":{\"h\":\"响应消息分包\"},\"359\":{\"h\":\"分包方式\",\"t\":[\"Jt808MsgEncoder 的默认实现类 DefaultJt808MsgEncoder 会将较大的消息自动分包，分包的阈值可以手动指定。 默认值是 1024 字节。\",\"也就是说：DefaultJt808MsgEncoder 在编码消息时(转义之前)，发现消息包的大小超过了阈值，会自动将消息分包发送给客户端。\",\"内置的支持自动分包的返回类型有两种: Jt808Response 和被 @Jt808ResponseBody 标记的类型。\",\"提示\",\"可以将 jt-808.response.encoder 日志的级别调整为 debug 级别，这样就可以看到分包消息的详情了：\",\"logging: # 编码器日志 level.jt-808.response.encoder: debug \"]},\"360\":{\"h\":\"Jt808Response\",\"t\":[\"Jt808Response 有个属性 maxPackageSize 用来控制单个消息包的最大大小。默认 1024 字节。\",\"如果响应消息的大小(转义之前)超过 maxPackageSize() 的阈值，会自动将消息拆分为多个子包发送。\",\"public interface Jt808Response extends Jt808ByteWriter { int DEFAULT_MAX_PACKAGE_SIZE = 1024; /** * 响应消息大小超过该值(默认 {@value #DEFAULT_MAX_PACKAGE_SIZE})会自动分包发送(转义之前) * * @return 响应消息最大字节数 */ default int maxPackageSize() { return DEFAULT_MAX_PACKAGE_SIZE; } /** * 指定单个消息包的最大大小(转义之前) * * @param size 消息包最大大小 * @return 单个消息包的最大大小 */ Jt808Response maxPackageSize(int size); // ... } \"]},\"361\":{\"h\":\"@Jt808ResponseBody\",\"t\":[\"@Jt808ResponseBody 注解也有个 maxPackageSize 属性用来控制单个消息包的最大大小(转义之前)。\",\"public @interface Jt808ResponseBody { /** * @return 单个消息包的最大字节数, 超过该值会自动分包发送 * @see Jt808Response#DEFAULT_MAX_PACKAGE_SIZE * @see Jt808Response#maxPackageSize(int) */ int maxPackageSize() default Jt808Response.DEFAULT_MAX_PACKAGE_SIZE; // ... } \"]},\"362\":{\"h\":\"示例\",\"t\":[\"发送下面这条测试报文\",\"7E010040560100000000013912344329007B000B0002696439383736353433323174797065303031323334353637383132333435363738383736353433323149443030303031323334353637383132333435363738383736353433323101B8CA4A2D313233343539257E \",\"然后观察 debug 日志的输出:\",\"上面日志解释如下：\",\"# 0x8100 的第1个子包(-: 转义之前; +: 转义之后) - <<<<<<<<<<<<<<< (0x8100--33) 1/3: 7E810060090100000000013912344329000000030001007B0041757468436FE07E + <<<<<<<<<<<<<<< (0x8100--33) 1/3: 7E810060090100000000013912344329000000030001007B0041757468436FE07E # 0x8100 的第2个子包(-: 转义之前; +: 转义之后) - <<<<<<<<<<<<<<< (0x8100--33) 2/3: 7E8100600901000000000139123443290001000300026465323031392D2D2DBB7E + <<<<<<<<<<<<<<< (0x8100--33) 2/3: 7E8100600901000000000139123443290001000300026465323031392D2D2DBB7E # 0x8100 的第3个子包(-: 转义之前; +: 转义之后) - <<<<<<<<<<<<<<< (0x8100--25) 3/3: 7E8100600101000000000139123443290002000300032DBA7E + <<<<<<<<<<<<<<< (0x8100--25) 3/3: 7E8100600101000000000139123443290002000300032DBA7E \"]},\"363\":{\"h\":\"分包补传\",\"t\":[\"这里指的是 0x0005 的 终端补传分包请求。\",\"当服务端将消息分包发送给终端时，如果终端没有收到某些子包，会发送 0x0005 请求要求服务端重传指定的子包。\"]},\"364\":{\"h\":\"分包暂存器\",\"t\":[\"服务端将消息分包发送时，会将子包保存在 Jt808ResponseSubPackageStorage 中,该接口定义如下：\",\"public interface Jt808ResponseSubPackageStorage { /** * 保存某个子包(响应消息分包时会回调),子包保存多久看具体实现类的实现逻辑 * * @param subPackage 子包 */ void saveSubPackage(Jt808Response.Jt808ResponseSubPackage subPackage); /** * 分包补传(0x0005) 时可以通过这个方法获取之前发送过的子包 * * @param terminalId 终端手机号 * @param firstFlowIdOfSubPackage 分包消息中的第一个子包的流水号 * @param packageIds 要求重传的子包ID * @return 编码后子包消息字节流 */ Collection<ByteBuf> getSubPackageMsg(String terminalId, int firstFlowIdOfSubPackage, Collection<Integer> packageIds); } \",\"遇到分包补传请求 0x0005 时，可以从 Jt808ResponseSubPackageStorage 中获取子包信息。\"]},\"365\":{\"h\":\"内置分包暂存器\",\"t\":[\"Jt808ResponseSubPackageStorage 内置了三个实现类:\",\"CaffeineJt808ResponseSubPackageStorage\",\"基于 caffeine 的实现\",\"配置项 jt808.response-sub-package-storage.type=caffeine 时启用\",\"RedisJt808ResponseSubPackageStorage\",\"基于 redis 的实现\",\"配置项 jt808.response-sub-package-storage.type=redis 时启用\",\"Jt808ResponseSubPackageStorage.NO_OPS_STORAGE\",\"空的实现\",\"配置项 jt808.response-sub-package-storage.type=none 时启用\"]},\"366\":{\"h\":\"示例\",\"t\":[\"@Slf4j @Component @Jt808RequestHandler public class RetransmissionHandler { private final Jt808ResponseSubPackageStorage responseSubPackageStorage; private final Jt808SessionManager sessionManager; public RetransmissionHandler(Jt808ResponseSubPackageStorage responseSubPackageStorage, Jt808SessionManager sessionManager) { this.responseSubPackageStorage = responseSubPackageStorage; this.sessionManager = sessionManager; } // 7E00054008010000000001391234432900010000000200010002387E // 7E000540080100000000013912344329000100030002000100023B7E @Jt808RequestHandlerMapping(msgType = 0x0005, desc = \\\"终端补传分包请求\\\") public void processRetransmissionMsg(Jt808RequestEntity<BuiltinMsg0005> request) { final Jt808Session session = this.sessionManager.findByTerminalId(request.terminalId()).orElseThrow(); final BuiltinMsg0005 body = request.body(); // 分包消息中第一包的流水号 final int firstSubPackageFlowId = body.getFirstSubPackageFlowId(); // 需要重传的子包ID final List<Integer> packageIdList = body.getPackageIdList().stream().map(BuiltinMsg0005.PackageId::getValue).collect(Collectors.toList()); // 获取子包 final Collection<ByteBuf> subPackageMsgList = responseSubPackageStorage.getSubPackageMsg(request.terminalId(), firstSubPackageFlowId, packageIdList); subPackageMsgList .stream() .peek(subPackageMsg -> log.info(\\\"re-send msg to client {} : {}\\\", request.terminalId(), HexStringUtils.byteBufToString(subPackageMsg))) // 将子包发送给终端 .forEach(session::sendMsgToClient); } } \"]},\"367\":{\"h\":\"小节\"},\"368\":{\"h\":\"编码解码相关\"},\"369\":{\"h\":\"Jt808MsgBytesProcessor\",\"t\":[\"Jt808MsgBytesProcessor 负责 转义 请求消息/响应消息、计算校验码。\",\"要想替换该组件，只需要声明一个 Jt808MsgBytesProcessor 类型的 Bean 即可。\",\"public interface Jt808MsgBytesProcessor { /** * 转义请求消息 * * @param byteBuf 请求消息, 不包含分隔符 {@link io.github.hylexus.jt.jt808.JtProtocolConstant#PACKAGE_DELIMITER 0X7E} * @return 转义之后的消息 */ ByteBuf doEscapeForReceive(ByteBuf byteBuf) throws Jt808MsgEscapeException; /** * 转义响应消息 * * @param byteBuf 响应给客户端的消息, 不包含分隔符 {@link io.github.hylexus.jt.jt808.JtProtocolConstant#PACKAGE_DELIMITER 0X7E} * @return 转义之后的消息 */ ByteBuf doEscapeForSend(ByteBuf byteBuf) throws Jt808MsgEscapeException; /** * 就是校验码 * * @param byteBuf 请求消息/响应消息 * @return 检验码 */ byte calculateCheckSum(ByteBuf byteBuf); } \",\"示例：\",\"// 替换内置的转义等逻辑 @Configuration public class MyJt808Config { // [[ 非必须配置 ]] -- 替换内置的转义等逻辑 @Bean public Jt808MsgBytesProcessor jt808MsgBytesProcessor() { return new DefaultJt808MsgBytesProcessor(ByteBufAllocator.DEFAULT); } } \"]},\"370\":{\"h\":\"Jt808MsgDecoder\",\"t\":[\"Jt808MsgDecoder 负责将请求中的 字节流 初步解析为 Jt808Request 对象。\",\"如果内置的实现不符合要求 或者 内置实现返回的 Jt808Request 不符合要求，你可以自定义一个解码器。\",\"public interface Jt808MsgDecoder { /** * 解析请求，返回 {@link Jt808Request} 实例。 * <p> * 如果默认的 {@link io.github.hylexus.jt.jt808.spec.impl.request.DefaultJt808Request DefaultJt808Request} 不满足需求 或 * {@link io.github.hylexus.jt.jt808.support.codec.impl.DefaultJt808MsgDecoder DefaultJt808MsgDecoder} 不符合要求， * 可以提供自己的实现类在这里返回自己的 {@link Jt808Request} 实现 * * @param byteBuf 请求消息(不包含分隔符 {@link io.github.hylexus.jt.jt808.JtProtocolConstant#PACKAGE_DELIMITER 0X7E}) * @return 解析之后的 {@link Jt808Request} 实例. * @see Jt808MsgBytesProcessor#doEscapeForReceive(ByteBuf) * @see Jt808MsgBytesProcessor#calculateCheckSum(ByteBuf) */ Jt808Request decode(ByteBuf byteBuf); } \",\"示例:\",\"// 替换内置的 Jt808MsgDecoder @Configuration public class MyJt808Config { // [[ 非必须配置 ]] -- 替换内置的 Jt808MsgDecoder @Bean public Jt808MsgDecoder jt808MsgDecoder( Jt808MsgTypeParser jt808MsgTypeParser, Jt808MsgBytesProcessor bytesProcessor, Jt808ProtocolVersionDetectorRegistry registry) { return new DefaultJt808MsgDecoder(jt808MsgTypeParser, bytesProcessor, registry); } } \"]},\"371\":{\"h\":\"Jt808MsgEncoder\",\"t\":[\"Jt808MsgEncoder 负责将 Jt808Response 对象编码为 符合808标准 的字节流。\",\"public interface Jt808MsgEncoder { /** * 将 {@link Jt808Response} 编码为 {@code 符合808标准} 的字节流 * * @param response 响应消息 * @return 编码后的字节流 * @see Jt808MsgBytesProcessor#doEscapeForSend(ByteBuf) * @see Jt808MsgBytesProcessor#calculateCheckSum(ByteBuf) */ ByteBuf encode(Jt808Response response); } \",\"如果内置的实现不符合要求，可以声明一个 Jt808MsgEncoder 类型的 Bean，替换内置实现：\",\"// 替换内置的 Jt808MsgEncoder @Configuration public class MyJt808Config { // [[ 非必须配置 ]] -- 替换内置的 Jt808MsgEncoder @Bean public Jt808MsgEncoder jt808MsgEncoder(Jt808MsgBytesProcessor processor) { return new DefaultJt808MsgEncoder(processor, ByteBufAllocator.DEFAULT); } } \"]},\"372\":{\"h\":\"业务线程池(v2.3.0-rc.2)\",\"t\":[\"提示\",\"业务线程池是 \"]},\"373\":{\"h\":\"配置内置业务线程池\",\"t\":[\"jt808: # Netty 线程池 msg-processor: executor-group: thread-count: 2 pool-name: 808-msg-processer max-pending-tasks: 128 ## 业务线程池(指令服务器 和 附件服务器共用) msg-handler: enabled: true core-pool-size: 64 max-pool-size: 128 keep-alive: 1m max-pending-tasks: 256 daemon: true pool-name: 808-handler \"]},\"374\":{\"h\":\"替换内置业务线程池\",\"t\":[\"要替换内置的业务线程池，请提供一个 Jt808ServerSchedulerFactory 类型的 Bean。\",\" @Configuration public class SomeConfigurationClass { @Bean Jt808ServerSchedulerFactory jt808ServerSchedulerFactory() { return new Jt808ServerSchedulerFactory() { @Override public ExecutorService getMsgHandlerExecutor() { // 这里返回自定义线程池 return null; } }; } } \"]},\"375\":{\"h\":\"Epoll(v2.3.0-rc.5)\"},\"376\":{\"h\":\"说明\",\"t\":[\"提示\",\"从 v2.3.0-rc.5 开始，在 Linux 环境下默认启用 Epoll。\"]},\"377\":{\"h\":\"配置项\",\"t\":[\"指令服务器: jt808.server.prefer-epoll = true|false\",\"附件服务器: jt808.attachment-server.prefer-epoll = true|false\"]},\"378\":{\"h\":\"定制化\"},\"379\":{\"h\":\"Jt808RequestFilter(v2.1.1)\",\"t\":[\"这个接口也是从 org.springframework.web.server.WebFilter 借鉴(抄袭)的。\",\"提示\",\"该功能默认不开启，要使用 Jt808RequestFilter 需要配置 jt808.plugins.request-filter.enabled = true\",\"public interface Jt808RequestFilter { /** * <h3 color=\\\"red\\\">注意</h3> * 该功能默认不开启，要使用 filter 需要配置 {@code jt808.plugins.request-filter.enabled = true} * * <p> * <p> * 能执行到这里就意味着: 请求整体结构已经解析完毕(分包请求也已经自动合并)。 * <p> * <p> * {@code filter} 的逻辑执行完成之后才会执行消息体的解析。 * <p> * <p> * 多个 {@code filter} 实例的执行顺序和 Spring 的 {@link org.springframework.core.annotation.Order @Order} 和 {@link org.springframework.core.Ordered Ordered} 一致。 * * @param exchange 当前请求上下文 * @param chain 过滤器链 * @see org.springframework.core.annotation.Order * @see org.springframework.core.Ordered * @since 2.1.1 */ void filter(Jt808ServerExchange exchange, Jt808RequestFilterChain chain); } \"]},\"380\":{\"h\":\"消息加密(v2.1.4)\"},\"381\":{\"h\":\"相关资料\",\"t\":[\"#issues-82\"]},\"382\":{\"h\":\"加密方式的判断\",\"t\":[\"收到消息，解析之后，消息体可能是密文。具体通过消息头中的消息体属性字段判断。\",\"消息体属性格式如下：\",\"v2011/v2013\",\"消息体属性 word(16) bit[0-10) 消息体长度 bit[10-13) 数据加密方式 此三位都为 0,表示消息体不加密 第 10 位为 1,表示消息体经过 RSA 算法加密 其它保留 bit[13] 分包 1: 消息体卫长消息,进行分包发送处理,具体分包信息由消息包封装项决定 0: 则消息头中无消息包封装项字段 bit[14-15] 保留 \",\"v2019\",\"消息体属性 word(16) bit[0-10) 消息体长度 bit[10-13) 数据加密方式 此三位都为 0,表示消息体不加密 第 10 位为 1,表示消息体经过 RSA 算法加密 其它保留 bit[13] 分包 1: 消息体卫长消息,进行分包发送处理,具体分包信息由消息包封装项决定 0: 则消息头中无消息包封装项字段 bit[14] 版本标识 bit[15] 保留 \",\"尽管消息体属性有所不同，但是其中的 数据加密方式位 都是相同的：消息体属性中的 bit10, bit11 和 bit12 三个位。\",\"这三个二进制位具体含义，应该和具体的硬件实现相关。\"]},\"383\":{\"h\":\"加密/解密报文\",\"t\":[\"可以通过自定义 Jt808MsgEncryptionHandler 实现报文的加密/解密。也就是给 spring 容器中加入一个 Jt808MsgEncryptionHandler 实现类即可。\",\" @Component public class Jt808MsgEncryptionHandlerDemo01 implements Jt808MsgEncryptionHandler { @Override public ByteBuf decryptRequestBody(Jt808RequestHeader header, ByteBuf body) { final int encryptionType = header.msgBodyProps().encryptionType(); if (encryptionType == 0) { return body; } // @see https://github.com/hylexus/jt-framework/issues/82 // 消息属性中的 第10位，11位，12位 为 010 时，表示消息体经过SM4算法加密 if (encryptionType == 0b010) { try { return JtCryptoUtil.SM4.ecbDecrypt(getSecretKey(), body); } finally { JtProtocolUtils.release(body); } } throw new NotImplementedException(\\\"不支持的加密类型: 0b\\\" + FormatUtils.toBinaryString(encryptionType, 3)); } @Override public ByteBuf encryptResponseBody(Jt808Response response, ByteBuf plaintextBody) { // response.encryptionType(010); final int encryptionType = response.encryptionType(); if (encryptionType == 0) { return plaintextBody; } // @see https://github.com/hylexus/jt-framework/issues/82 // 消息属性中的 第10位，11位，12位 为 010 时，表示消息体经过SM4算法加密 if (encryptionType == 0b010) { try { return JtCryptoUtil.SM4.ecbEncrypt(getSecretKey(), plaintextBody); } finally { JtProtocolUtils.release(plaintextBody); } } throw new NotImplementedException(\\\"不支持的加密类型: 0b\\\" + FormatUtils.toBinaryString(encryptionType, 3)); } private byte[] getSecretKey() { // 从其他配置中获取密钥 return HexStringUtils.hexString2Bytes(\\\"8e47374be6b8d114cb47be6a9a128a37\\\"); } } \"]},\"384\":{\"h\":\"Netty相关\",\"t\":[\"要自定义 Netty 相关配置，只需声明一个 Jt808ServerNettyConfigure 类型的 Bean 即可。\"]},\"385\":{\"h\":\"2.3.0-rc.5以及之后版本\",\"t\":[\"public interface Jt808ServerNettyConfigure extends JtServerNettyConfigure { /** * @param configProvider 可以从中读取配置项(环境变量、系统属性、application.yaml、...) * @return 返回入参中的 {@code serverBootstrap} 或 返回一个新的 {@link ServerBootstrap ServerBootstrap} 实例 */ ServerBootstrap configureServerBootstrap(ConfigurationProvider configProvider, ServerBootstrap serverBootstrap); void configureSocketChannel(ConfigurationProvider configProvider, SocketChannel ch); } \"]},\"386\":{\"h\":\"示例\",\"t\":[\"推荐继承默认实现类来自定义组件:\",\"BuiltinJt808ServerNettyConfigure\",\"BuiltinJt808AttachmentServerNettyConfigure\",\"当然可以直接实现 Jt808ServerNettyConfigure 接口，下面是一个示例：\",\" @Component public class MyJt808ServerNettyConfigure implements Jt808ServerNettyConfigure { private static final Logger log = LoggerFactory.getLogger(MyJt808ServerNettyConfigure.class); protected final Jt808ServerProps serverProps; public MyJt808ServerNettyConfigure( Jt808ServerProps serverProps) { this.serverProps = serverProps; } @Override public ServerBootstrap configureServerBootstrap(ConfigurationProvider configProvider, ServerBootstrap serverBootstrap) { final Jt808NettyTcpServerProps nettyProps = serverProps.getServer(); final boolean preferEpoll = nettyProps.isPreferEpoll(); final Class<? extends ServerChannel> channelClass; if (preferEpoll && Epoll.isAvailable()) { channelClass = EpollServerSocketChannel.class; serverBootstrap.group(new EpollEventLoopGroup(nettyProps.getBossThreadCount()), new EpollEventLoopGroup(nettyProps.getWorkerThreadCount())) .channel(channelClass); } else { channelClass = NioServerSocketChannel.class; serverBootstrap.group(new NioEventLoopGroup(nettyProps.getBossThreadCount()), new NioEventLoopGroup(nettyProps.getWorkerThreadCount())) .channel(channelClass); } log.info(\\\"Epoll.isAvailable(): {}, jt808.server.prefer-epoll: {}, channelClass: {}\\\", Epoll.isAvailable(), preferEpoll, channelClass.getName()); return serverBootstrap .option(ChannelOption.SO_BACKLOG, 2048) .option(ChannelOption.SO_REUSEADDR, true) .childOption(ChannelOption.SO_KEEPALIVE, true); } @Override public void configureSocketChannel(ConfigurationProvider configProvider, SocketChannel ch) { ch.pipeline().addLast(\\\"\\\", someHandler1); ch.pipeline().addLast(\\\"\\\", someHandler2); ch.pipeline().addLast(\\\"\\\", someHandler3); //... } } \"]},\"387\":{\"h\":\"2.3.0-rc.5之前版本\",\"t\":[\"public interface Jt808ServerNettyConfigure { void configureServerBootstrap(ServerBootstrap serverBootstrap); void configureSocketChannel(SocketChannel ch); } \"]},\"388\":{\"h\":\"请求生命周期监听器\"},\"389\":{\"h\":\"介绍\",\"t\":[\"一个终端请求的处理，包含下面几个比较关键的步骤：\",\"decode: 将 ByteBuf 初步解码为 Jt808Request\",\"此时消息整体结构已经解码完成\",\"body (消息体)部分依旧是 ByteBuf\",\"dispatch1: 将上一步初步解码的 Jt808Request 对象 分发 出去 \",\"如果是分包请求 \",\"在 AbstractJt808RequestMsgQueueListener 里暂存分包\",\"直到所有子包都到达之后自动合并请求，再次 dispatch 合并后的请求\",\"否则，进行下一步\",\"dispatch2: 将请求(包括合并后的分包请求)分发给处理器链 Jt808DispatcherHandler\",\"调用处理器处理请求\",\"处理 处理器返回的结果\",\"回复终端\",\"对应上面描述的处理流程，提供了 Jt808RequestLifecycleListener 以便在消息处理流程的关键步骤:\",\"加入自己的逻辑\",\"拦截请求的处理流程\",\"点击展开 Jt808RequestLifecycleListener 接口声明\",\"public interface Jt808RequestLifecycleListener extends OrderedComponent { /** * @param request 尚未解码的原始报文 * @param channel 当前终端对应的 {@link Channel} * @see Jt808DispatchChannelHandlerAdapter#channelRead(ChannelHandlerContext, Object) */ default boolean beforeDecode(ByteBuf request, Channel channel) { return true; } /** * @param request 初步解码后的请求(请求体尚未解码) * @see Jt808RequestMsgDispatcher#doDispatch(Jt808Request) */ default boolean beforeDispatch(Jt808Request request) { return true; } /** * @param exchange 请求上下文 * @see Jt808DispatcherHandler#handleRequest(Jt808ServerExchange) */ default boolean beforeDispatch(Jt808ServerExchange exchange) { return true; } /** * @param exchange 请求上下文 * @param handler 处理当前请求的处理器。 * 目前内置的处理器有两种: * <ol> * <li>被 {@link io.github.hylexus.jt.jt808.support.annotation.handler.Jt808RequestHandler @Jt808RequestHandler}</li> 注解标记的处理器方法 * <li>{@link io.github.hylexus.jt.jt808.support.dispatcher.handler.SimpleJt808RequestHandler SimpleJt808RequestHandler}</li> 实例 * </ol> * @see Jt808DispatcherHandler#handleRequest(io.github.hylexus.jt.jt808.spec.Jt808ServerExchange) */ default boolean beforeHandle(Jt808ServerExchange exchange, Object handler) { return true; } /** * @param exchange 请求上下文 * @param handlerResult 请求处理器的处理结果 * @see Jt808HandlerResultHandler#handleResult(Jt808ServerExchange, Jt808HandlerResult) */ default boolean beforeEncode(Jt808ServerExchange exchange, Jt808HandlerResult handlerResult) { return true; } /** * @param exchange 请求上下文 * @param handlerResult 请求处理器的处理结果 * @param response 回复给客户端的报文 * @see Jt808HandlerResultHandler#handleResult(Jt808ServerExchange, Jt808HandlerResult) */ default boolean beforeResponse(Jt808ServerExchange exchange, Jt808HandlerResult handlerResult, ByteBuf response) { return true; } } \"]},\"390\":{\"h\":\"使用示例\",\"t\":[\"这里是一个使用 Prometheus 统计请求次数的示例：\",\"public class PrometheusMetricsExporter implements Jt808RequestLifecycleListener { private final MeterRegistry meterRegistry; public PrometheusMetricsExporter(MeterRegistry meterRegistry) { this.meterRegistry = meterRegistry; } @Override public boolean beforeDispatch(Jt808Request request) { Counter.builder(\\\"jt808_request_total_count\\\") .description(\\\"A counter for JT/T 808 request processed by current server\\\") .tags( \\\"terminal_id\\\", request.terminalId(), \\\"version\\\", request.version().name().toLowerCase() ) .register(this.meterRegistry) .increment(); return true; } } \"]},\"391\":{\"h\":\"Session相关\"},\"392\":{\"h\":\"Jt808Session\",\"t\":[\"Jt808Session 的默认实现为 io.github.hylexus.jt.jt808.spec.session.DefaultJt808Session。你也可以根据需求来实现自己的 Jt808Session。\",\"public class MySession extends DefaultJt808Session { private String someField; public String getSomeField() { return someField; } public void setSomeField(String someField) { this.someField = someField; } } \",\"然后在下面的自定义 Jt808SessionManager 中替换为自定义的 Jt808Session。\"]},\"393\":{\"h\":\"Jt808SessionManager\",\"t\":[\"该组件用来管理每个终端的 TCP 连接。\",\"要定制 Jt808SessionManager 只需自己声明一个 Jt808SessionManager 类型的 Bean 即可。\",\"public class MySessionManager implements Jt808SessionManager { private static final MySessionManager instance = new MySessionManager(); public static Jt808SessionManager getInstance() { return instance; } private MySessionManager() { } protected MySession buildSession(String terminalId, Jt808ProtocolVersion version, Channel channel) { MySession session = new MySession(); session.channel(channel); session.id(generateSessionId(channel)); session.terminalId(terminalId); session.lastCommunicateTimestamp(System.currentTimeMillis()); session.protocolVersion(version); Object key = channel.attr(AttributeKey.valueOf(\\\"key\\\")).get(); session.setSomeField(key == null ? \\\"\\\" : key.toString()); return session; } // 这里替换为自定义的Session @Override public Jt808Session generateSession(String terminalId, Jt808ProtocolVersion version, Channel channel) { return buildSession(terminalId, version, channel); } // ... } \",\"然后将自定义的 Jt808SessionManager 加入到 Spring 容器中就可以替换内置的 Jt808SessionManager 了。\",\"// 替换内置的 Jt808SessionManager @Configuration public class MyJt808Config { // [[ 非必须配置 ]] -- 替换内置的 Jt808SessionManager @Bean public Jt808SessionManager jt808SessionManager(ObjectProvider<Jt808SessionManagerEventListener> listeners) { final Jt808SessionManager sessionManager = MySessionManager.getInstance(); listeners.stream().sorted(Comparator.comparing(OrderedComponent::getOrder)) .forEach(sessionManager::addListener); return sessionManager; } } \"]},\"394\":{\"h\":\"Jt808SessionEventListener\",\"t\":[\"Jt808SessionEventListener 会在 Jt808SessionManager 中新增、删除 或 关闭 Jt808Session 时回调。\",\"public interface Jt808SessionEventListener extends OrderedComponent { /** * {@link Jt808Session} 新建事件 * <p> * 注意：该方法中不宜做耗时太长/阻塞的操作！！！ * * @param session 新建的 {@link Jt808Session} */ default void onSessionAdd(@Nullable Jt808Session session) { } /** * {@link Jt808Session} 移除事件 * <p> * 注意：该方法中不宜做耗时太长/阻塞的操作！！！ * * @param session 被移除的 {@link Jt808Session} */ default void onSessionRemove(@Nullable Jt808Session session) { } /** * {@link Jt808Session} 关闭事件 * <p> * 注意：该方法中不宜做耗时太长/阻塞的操作！！！ * * @param session 被关闭的 {@link Jt808Session} * @param closeReason 关闭原因 */ default void onSessionClose(@Nullable Jt808Session session, SessionCloseReason closeReason) { } } \",\"想要监听 Jt808Session 事件：\",\"声明若干个 Jt808SessionEventListener 类型的 Bean 即可\",\"或者可以直接调用 Jt808SessionManager.addListener(listener) 方法手动注册监听器\",\"// Session事件监听器 @Configuration public class MyJt808Config { // [[ 非必须配置 ]] -- Session事件监听器 (可以有多个) @Bean public Jt808SessionEventListener listener1() { return new MyJt808SessionEventListener01(); } // [[ 非必须配置 ]] -- Session事件监听器 (可以有多个) @Bean public Jt808SessionEventListener listener2() { return new MyJt808SessionEventListener02(); } } \"]},\"395\":{\"h\":\"Jt808FlowIdGenerator\",\"t\":[\"Jt808FlowIdGenerator 用来生成流水号。要自定义 流水号的生成策略，只需声明一个 Jt808FlowIdGeneratorFactory 类型的 Bean 即可。\",\"public interface Jt808FlowIdGenerator { int MAX_FLOW_ID = 0xffff; /** * @param increment 一次性(连续不间断)递增 {@code increment} 个序列号 * @return 当前流水号 */ int flowId(int increment); /** * @param count 流水号个数 * @return 一批连续递增的流水号 */ default int[] flowIds(int count) { int last = this.flowId(count) - 1; final int[] ids = new int[count]; for (int i = count - 1; i >= 0; i--) { ids[i] = last--; } return ids; } /** * @return 当前流水号(不会自增) */ default int currentFlowId() { return flowId(0); } /** * @return 下一个流水号 * @see #flowId(int) */ default int nextFlowId() { return flowId(1); } } \",\"替换 Jt808FlowIdGeneratorFactory 来控制流水号生成策略：\",\"// 替换流水号生成策略 @Configuration public class MyJt808Config { // [[ 非必须配置 ]] -- 替换流水号生成策略 @Bean public Jt808FlowIdGeneratorFactory jt808FlowIdGeneratorFactory() { return new Jt808FlowIdGeneratorFactory.DefaultJt808FlowIdGeneratorFactory(); } } \"]},\"396\":{\"h\":\"分包相关\",\"t\":[\"要替换内置的分包暂存器只需将对应类型的 Bean 加入到 Spring 容器即可。\",\"// Jt808ResponseSubPackageStorage + Jt808RequestSubPackageStorage @Configuration public class MyJt808Config { // [[ 非必须配置 ]] -- 替换内置响应消息分包暂存器 @Bean public Jt808ResponseSubPackageStorage myJt808ResponseSubPackageStorage() { return new MyResponseSubPackageStorage(new CaffeineJt808ResponseSubPackageStorage.StorageConfig()); } // [[ 非必须配置 ]] -- 替换内置请求消息分包暂存器 @Bean public Jt808RequestSubPackageStorage myJt808RequestSubPackageStorage(Jt808RequestMsgDispatcher dispatcher) { return new MyRequestSubPackageStorage(ByteBufAllocator.DEFAULT, dispatcher, new CaffeineJt808RequestSubPackageStorage.StorageConfig()); } } \"]},\"397\":{\"h\":\"Aware接口\",\"t\":[\"这种 Aware 接口是从 Spring 中借鉴(抄袭)的 😂😂😂😂😂😂。\",\"所以你要是知道 Spring 中的诸如 ApplicationContextAware、EnvironmentAware 等就几乎没必要看本小节了。\"]},\"398\":{\"h\":\"为什么会提供？\",\"t\":[\"在用注解解析映射请求报文到实体类的时候，字段长度等的计算可能会依赖于消息头中的一些属性。\",\"所以在基于注解的实体类映射时，你可以给实体类实现这些接口以自动注入一些其他信息。\",\"注意\",\"目前为止，这些Aware接口只能在 时用于 请求体消息实体类 中。\"]},\"399\":{\"h\":\"Jt808RequestHeaderAware\",\"t\":[\"每次消息处理时为实体类注入 Jt808RequestHeader 实例。\",\"public interface Jt808RequestHeaderAware { void setHeader(Jt808RequestHeader header); } \"]},\"400\":{\"h\":\"Jt808RequestAware\",\"t\":[\"每次消息处理时为实体类注入 Jt808Request 实例。\",\"public interface Jt808RequestAware { void setRequest(Jt808Request request); } \"]},\"401\":{\"h\":\"深入\"},\"402\":{\"h\":\"升级指南\"},\"403\":{\"h\":\"2.0.x升级到2.1.x\"},\"404\":{\"h\":\"请先读我\",\"t\":[\"两个 starter 的 JDK 版本、spring-boot 版本限制如下：\",\"Module\",\"JDK\",\"spring-boot\",\"Desc\",\"jt-808-server-spring-boot-starter-boot2\",\"11+\",\"[2.2.x, 2.6.x]\",\"为 spring-boot-2.x 提供的 starter\",\"jt-808-server-spring-boot-starter\",\"17+\",\"[3.0.0, ...]\",\"为 spring-boot-3.x 提供的 starter\",\"警告\",\"从 2.1.x 开始，同时支持 spring-boot-2.x 和 spring-boot-3.x。\",\"变更如下:\",\"1). 模块名称拼写错误修改 \",\"2.0.x 中的 jt-808-server-spring-boot-stater 有单词拼写错误(😂): starter 写成了 stater\",\"在 2.1.x 中改成了 jt-808-server-spring-boot-starter-boot2\",\"stater 修改为 starter\",\"添加了 -boot2 后缀，表示这个模块是给 spring-boot-2.x 提供的\",\"2). JDK版本 和 spring-boot版本 修改 \",\"jt-808-server-spring-boot-starter\",\"给 spring-boot-3.x 的项目提供的，是本次新增的模块\",\"JDK: 17\",\"编译之后的 .class 文件版本 : 61(JDK-17)\",\"spring-boot: 3.0.2\",\"单独依赖该模块时必须满足: jdk.version >=17 && spring-boot.version >= 3.0.0\",\"jt-808-server-spring-boot-starter-boot2\",\"给 spring-boot-2.x 的项目提供的，是从之前的 jt-808-server-spring-boot-stater 重命名过来的\",\"JDK: 17\",\"编译之后的 .class 文件版本 : 55(JDK-11)\",\"spring-boot: 2.6.14\",\"单独依赖该模块时必须满足: jdk.version >= 11 && spring-boot.version >= 2.2.x && spring-boot.version <= 2.6.x\",\"3). spring-boot版本 升级 \",\"从 2.5.12 升级到 2.6.24\",\"新增了 spring-boot-3.x 的支持\"]},\"405\":{\"h\":\"依赖升级\"},\"406\":{\"h\":\"spring-boot-2.x\",\"t\":[\"使用 spring-boot-2.x 的项目:\",\"将之前的 jt-808-server-spring-boot-stater 依赖改为 jt-808-server-spring-boot-starter-boot2\",\"stater --> starter\",\"添加了 -boot2 后缀\",\"版本改为 2.1.x 的最新版即可\",\"2.0.x 的依赖如下:\",\"修改为 2.1.x 的依赖坐标(stater --> starter, 新增 -boot2 后缀):\"]},\"407\":{\"h\":\"spring-boot-3.x\",\"t\":[\"使用 spring-boot-3.x 的项目:\",\"将之前的 jt-808-server-spring-boot-stater 依赖改为 jt-808-server-spring-boot-starter\",\"stater --> starter\",\"版本改为 2.1.x 的最新版即可\",\"2.0.x 的依赖如下:\",\"修改为 2.1.x 的依赖坐标(stater --> starter):\"]},\"408\":{\"h\":\"升级到2.3.0-rc.5\"},\"409\":{\"h\":\"请先读我\",\"t\":[\"提示\",\"如果你没有自定义过下面两种类型的组件，可以忽略这个升级提示。\",\"JtServerNettyConfigure 及其子接口和实现类 \",\"Jt808ServerNettyConfigure\",\"删除了 DefaultJt808ServerNettyConfigure\",\"新增 BuiltinJt808ServerNettyConfigure\",\"Jt808AttachmentServerNettyConfigure\",\"删除了 DefaultJt808AttachmentServerNettyConfigure\",\"新增 BuiltinJt808AttachmentServerNettyConfigure\",\"AbstractRunner 构造器参数变更\"]},\"410\":{\"h\":\"变更原因\",\"t\":[\"之前版本的 JtServerNettyConfigure 设计不太合理：\",\"// 之前版本的 Jt808ServerNettyConfigure(相关方法已经删除) public interface Jt808ServerNettyConfigure { void configureServerBootstrap(ServerBootstrap serverBootstrap); void configureSocketChannel(SocketChannel ch); } \",\"默认实现中在 configureServerBootstrap() 方法中调用了 configureSocketChannel()，这可能导致用户覆盖掉对 configureSocketChannel() 方法的调用。\",\"下面是新的 Jt808ServerNettyConfigure 接口方法:\",\"// 新的 Jt808ServerNettyConfigure public interface Jt808ServerNettyConfigure extends JtServerNettyConfigure { /** * @param configProvider 可以从中读取配置项(环境变量、系统属性、application.yaml、...) * @return 返回入参中的 {@code serverBootstrap} 或 返回一个新的 {@link ServerBootstrap ServerBootstrap} 实例 */ ServerBootstrap configureServerBootstrap(ConfigurationProvider configProvider, ServerBootstrap serverBootstrap); void configureSocketChannel(ConfigurationProvider configProvider, SocketChannel ch); } \",\"新版本的 configureServerBootstrap() 和 configureSocketChannel() 方法的调用移动到了 AbstractRunner 中，并且 AbstractRunner 的构造器参数也发生了变化。\"]},\"411\":{\"h\":\"升级参考\",\"t\":[\"如果你没有自定义 JtServerNettyConfigure 及其子接口和实现类，那么你不需要做任何改动。\",\"反之，请参考下面链接：\"]},\"412\":{\"h\":\"BitOperator(v2.1.1)\",\"t\":[\"提示\",\"BitOperator 是 2.1.1 中引入的辅助类。\"]},\"413\":{\"h\":\"作用\",\"t\":[\"BitOperator 是位操作的工具类，目前只支持 64 个 Bit(java.lang.Long) 的操作。\",\"当然 BitOperator 也可以用在被 @RequestField、@ResponseField、@RequestFieldAlias、@ResponseFieldAlias 修饰的实体类的成员变量上。\"]},\"414\":{\"h\":\"场景示例\",\"t\":[\"位操作的场景都可以用到，比如下面这个场景(需要对某个 bit 操作)：\",\"以下面这条位置上报报文(2019)为例，其中的报警标志字段中 第 21(进出路线)个 bit 和第 20(进出区域)个 bit 是 1。\",\"class BuiltinMsg0200Test extends BaseReqRespMsgTest { final String hex = \\\"7E0200402D01000000000139123443210000003000000040000101CD41C2072901B00929029A005A23042821314101040000029B0202004303020309300163897E\\\"; @Test void test2019Alias() { final BuiltinMsg0200V2019Alias msg = decode(hex, BuiltinMsg0200V2019Alias.class); assertMsg(msg); } private void assertMsg(BuiltinMsg0200V2019Alias msg) { final BitOperator alarmStatus = BitOperator.mutable(msg.getAlarmFlag()); // final BitOperator alarmStatus = msg.getBitOperator(); assertEquals(1, alarmStatus.get(20)); assertEquals(1, alarmStatus.get(21)); } // ... } \"]},\"415\":{\"h\":\"简单使用\",\"t\":[\"class BitOperatorTest { @Test void testBit() { // 64个bit: 全是0 final long x = 0; // 第 1、3、22 个 bit 被置为 1，其他位没变 final BitOperator operator = BitOperator.mutable(x).set(1).set(3).set(22); assertEquals(\\\"0000000000000000000000000000000000000000010000000000000000001010\\\", operator.binaryString(64)); assertEquals(\\\"00000000010000000000000000001010\\\", operator.binaryString(32)); assertEquals(\\\"010000000000000000001010\\\", operator.binaryString(24)); // 第 1 个 bit 被置为 0 final BitOperator operator1 = operator.reset(1); assertEquals(\\\"010000000000000000001000\\\", operator1.binaryString(24)); final int y = 0b11111111; // 第 3 个 bit 被置为 0 assertEquals(\\\"11110111\\\", BitOperator.mutable(y).reset(3).binaryString(8)); // 从第 3 个 bit 开始, 连续将 2 个 bit 置为 0 assertEquals(\\\"11100111\\\", BitOperator.mutable(y).resetRange(3, 2).binaryString(8)); final long z = 0b00001000; // z 的第 3 个 bit 是 1 assertEquals(1, BitOperator.mutable(z).get(3)); assertEquals(0b11, BitOperator.mutable(x).set(1).set(0).wordValue()); assertEquals(3, BitOperator.mutable(x).set(1).set(0).wordValue()); } } \"]},\"416\":{\"h\":\"ByteArrayContainer(v2.1.1)\",\"t\":[\"提示\",\"ByteArrayContainer 是 2.1.1 中引入的辅助类。\"]},\"417\":{\"h\":\"作用\",\"t\":[\"ByteArrayContainer 的作用和 是一样的。\",\"只不过 ByteArrayContainer 底层是个 byte[] 不需要手动 release()。\",\"而 底层是个 ByteBuf, 需要在恰当的时机释放掉。\"]},\"418\":{\"h\":\"场景示例\",\"t\":[\"此处还是以 0x8103 消息中的 参数项的值为例。\",\" @Data @Accessors(chain = true) @Jt808ResponseBody(msgId = 0x8103) public class BuiltinMsg8103 { @ResponseField(order = 100, dataType = MsgDataType.BYTE) private int paramCount; @ResponseField(order = 200, dataType = MsgDataType.LIST) private List<ParamItem> paramItemList; @Data @Accessors(chain = true) @NoArgsConstructor public static class ParamItem { @ResponseField(order = 100, dataType = MsgDataType.DWORD) private long msgId; @ResponseField(order = 200, dataType = MsgDataType.BYTE) private int msgLength; // 不同 id 的消息内容的数据类型也不同 // 除了可以使用 byte[], ByteBuf, ByteBufContainer 之外，也可以使用 ByteArrayContainer @ResponseField(order = 300, dataType = MsgDataType.BYTES) private ByteArrayContainer msgContent; // private ByteBufContainer msgContent; // private ByteBuf msgContent; // private byte[] msgContent; public ParamItem(long msgId, ByteArrayContainer msgContent) { this.msgId = msgId; this.msgContent = msgContent; this.msgLength = msgContent.length(); } } } \"]},\"419\":{\"h\":\"如何创建实例?\",\"t\":[\"推荐使用 ByteArrayContainer 提供的工厂方法来创建实例。\",\"class BuiltinMsg8103Test extends BaseReqRespMsgTest { @Test void test1() { final List<BuiltinMsg8103.ParamItem> paramItemList = List.of( // 手动构建一个 DWORD 类型的实例 new BuiltinMsg8103.ParamItem(0x0001, ByteArrayContainer.ofDword(66)), // 手动构建一个 STRING 类型的实例 new BuiltinMsg8103.ParamItem(0x0013, ByteArrayContainer.ofString(\\\"www.xxx.fff.zzz.com\\\")), // 手动构建一个 WORD 类型的实例 new BuiltinMsg8103.ParamItem(0x0081, ByteArrayContainer.ofWord(11)), // 手动构建一个 BYTE 类型的实例 new BuiltinMsg8103.ParamItem(0x0084, ByteArrayContainer.ofByte((byte) 1)), // 手动构建一个 BYTES 类型的实例 new BuiltinMsg8103.ParamItem(0x0032, ByteArrayContainer.ofBytes(new byte[]{0x16, 0x32, 0x0A, 0x1E})) ); final BuiltinMsg8103 msg = new BuiltinMsg8103() .setParamItemList(paramItemList) .setParamCount(paramItemList.size()); final String hexString = encode( msg, builder -> builder.version(Jt808ProtocolVersion.VERSION_2013) .terminalId(terminalId2013) .msgId(BuiltinJt808MsgType.SERVER_SET_TERMINAL_PARAM) ); assertEquals(\\\"7E8103003801391234432300000500000001040000004200000013137777772E7878782E6666662E7A7A7A2\\\" + \\\"E636F6D0000008102000B000000840101000000320416320A1EFE7E\\\", hexString); } } \"]},\"420\":{\"h\":\"ByteBufContainer(v2.1.1)\",\"t\":[\"提示\",\"ByteBufContainer 是 2.1.1 中引入的辅助类。\"]},\"421\":{\"h\":\"作用\",\"t\":[\"在某些特殊场景下，用来替代 byte[], ByteBuf。\",\"因为在特殊场景下 byte[] 和 ByteBuf 的内容不太方便构造。\",\"详情看下面 0x8103 消息中的用法：\"]},\"422\":{\"h\":\"场景示例\",\"t\":[\"在 0x8103 消息中, 参数项的值的类型不是固定的，可能是 DWORD, WORD, BYTE 等类型。\",\"在 v2.1.1 之前的版本中，对于这种情况，实体类中只能使用 byte[] 或 ByteBuf 来表示，但是 byte[] 或 ByteBuf 的内容构造起来有点麻烦。\",\"所以提供了 ByteBufContainer 和 ByteArrayContainer 来简化这种操作。\",\"下面简单演示 ByteBufContainer 在响应消息中的用法。\",\"tip\",\"下面示例中的 @ResponseFieldAlias 注解是 v2.1.1 中给 @ResponseField 引入的别名。类似于 spring 中 @RequestMapping 和 @GetMapping 的关系。\",\"详情见 。\",\" @Data @Accessors(chain = true) @Jt808ResponseBody(msgId = 0x8103) public class BuiltinMsg8103Alias { @ResponseFieldAlias.Byte(order = 100) private int paramCount; @ResponseFieldAlias.List(order = 200) private List<ParamItem> paramItemList; @Data @Accessors(chain = true) @NoArgsConstructor public static class ParamItem { @ResponseFieldAlias.Dword(order = 100) private long msgId; @ResponseFieldAlias.Byte(order = 200) private int msgLength; // 不同 id 的消息内容的数据类型也不同 // 除了可以使用 byte[], ByteBuf, ByteArrayContainer 之外，也可以使用 ByteBufContainer @ResponseFieldAlias.Bytes(order = 300) private ByteBufContainer msgContent; // private ByteArrayContainer msgContent; // private ByteBuf msgContent; // private byte[] msgContent; public ParamItem(long msgId, ByteBufContainer msgContent) { this.msgId = msgId; this.msgContent = msgContent; this.msgLength = msgContent.length(); } } } \"]},\"423\":{\"h\":\"如何创建实例?\",\"t\":[\"推荐使用 ByteBufContainer 中提供的一系列工厂方法来构建 ByteBufContainer 的实例。\",\"下面是 ByteBufContainer 的简单用法示例：\",\"class BuiltinMsg8103Test extends BaseReqRespMsgTest { @Test void test() { final List<BuiltinMsg8103Alias.ParamItem> paramItemList = List.of( // 手动构建一个 DWORD 类型的实例 new BuiltinMsg8103Alias.ParamItem(0x0001, ByteBufContainer.ofDword(66)), // 手动构建一个 STRING 类型的实例 new BuiltinMsg8103Alias.ParamItem(0x0013, ByteBufContainer.ofString(\\\"www.xxx.fff.zzz.com\\\")), // 手动构建一个 WORD 类型的实例 new BuiltinMsg8103Alias.ParamItem(0x0081, ByteBufContainer.ofWord(11)), // 手动构建一个 BYTE 类型的实例 new BuiltinMsg8103Alias.ParamItem(0x0084, ByteBufContainer.ofByte((byte) 1)), // 手动构建一个 BYTES 类型的实例 new BuiltinMsg8103Alias.ParamItem(0x0032, ByteBufContainer.ofBytes(new byte[]{0x16, 0x32, 0x0A, 0x1E})) ); final BuiltinMsg8103Alias msg = new BuiltinMsg8103Alias() .setParamItemList(paramItemList) .setParamCount(paramItemList.size()); final String hexString = encode( msg, builder -> builder.version(Jt808ProtocolVersion.VERSION_2013) .terminalId(terminalId2013) .msgId(BuiltinJt808MsgType.SERVER_SET_TERMINAL_PARAM) ); // ByteBufContainer 会被 `ByteBufContainerFieldSerializer` 自动释放掉 // ByteBufContainer 会被 `ByteBufContainerFieldSerializer` 自动释放掉 // ByteBufContainer 会被 `ByteBufContainerFieldSerializer` 自动释放掉 paramItemList.forEach(it -> assertEquals(0, it.getMsgContent().value().refCnt())); assertEquals(\\\"7E8103003801391234432300000500000001040000004200000013137777772E7878782E6666662E7A7A7A2\\\" + \\\"E636F6D0000008102000B000000840101000000320416320A1EFE7E\\\", hexString); } } \"]},\"424\":{\"h\":\"注意事项\",\"t\":[\"在使用方面，ByteBufContainer 和 ByteArrayContainer 的显著区别是：ByteBufContainer 需要 release()。\",\"提示\",\"请求消息实体类中出现的 ByteBufContainer 会随着 Jt808Request#release() 的一起被自动释放掉(前提是你没有做额外的 retain() 操作)\",\"响应消息实体类中出现的 ByteBufContainer 会在 ByteBufContainerFieldSerializer 中自动释放(前提是你没有做额外的 retain() 操作)\",\"除以上两种情况之外，在其他地方手动构建的 ByteBufContainer 需要你自己在恰当的时机释放掉\"]},\"425\":{\"h\":\"辅助工具\"},\"426\":{\"h\":\"808数据类型处理器\"},\"427\":{\"h\":\"Jt808ByteReader\",\"t\":[\"用来从 ByteBuf 中读取指定类型的 JT/T-808 数据类型。\",\"内置的支持 Jt808ByteReader 的类\",\"Jt808Request.bodyAsReader() 方法可以将消息体转换为 Jt808ByteReader 来手动读取数据。\"]},\"428\":{\"h\":\"简单示例\",\"t\":[\"class Jt808ByteReaderTest { @Test void read() { final ByteBuf originalByteBuf = ByteBufAllocator.DEFAULT.buffer(); try { // 下面两行代码给原始ByteBuf中加入一些测试数据 JtProtocolUtils.writeBcd(originalByteBuf, \\\"10203040\\\"); JtProtocolUtils.writeDword(originalByteBuf, 123); // 下面依次从 originalByteBuf 中读取 BCD、UnsignedDword final ByteBuf afterRead = Jt808ByteReader.of(originalByteBuf) .readBcd(4, bcdString -> assertEquals(\\\"10203040\\\", bcdString)) .readUnsignedDword(dword -> assertEquals(123, dword)) .readable(); // 读取完成之后，Jt808ByteReader 不会改变内部 originalByteBuf 的引用指向 assertSame(originalByteBuf, afterRead); } finally { // Jt808ByteReader 只是个辅助类，不会改变内部 readable() 指向的 ByteBuf 的 refCnt // 应该在恰当的时机释放被包装的 originalByteBuf originalByteBuf.release(); assertEquals(0, originalByteBuf.refCnt()); } } } \"]},\"429\":{\"h\":\"使用Jt808ByteReader来解析请求体\",\"t\":[\"除了使用 @Jt808RequestBody 标记的实体类来解析请求，也可以通过 Jt808ByteReader 来手动读取数据：\",\"public class TerminalRegisterMsgHandlerV2013 implements SimpleJt808RequestHandler<Jt808Response> { // ... // 除了使用注解，也可以通过 `Jt808ByteReader` 来手动读取数据 public Jt808Response handleMsg(Jt808ServerExchange exchange) { exchange.request() .bodyAsReader() // 1. [0-2) WORD 省域ID .readUnsignedWord(provinceId -> log.info(\\\"省域ID:{}\\\", provinceId)) // 2. [2-4) WORD 省域ID .readUnsignedWord(cityId -> log.info(\\\"省域ID:{}\\\", cityId)) // 3. [4-9) BYTE[5] 制造商ID .readString(5, manufacturerId -> log.info(\\\"制造商ID:{}\\\", manufacturerId)) // 4. [9-29) BYTE[20] 终端型号 .readString(20, terminalType -> log.info(\\\"终端型号:{}\\\", terminalType)) // 5. [29-36) BYTE[7] 终端ID .readString(7, terminalId -> log.info(\\\"终端ID:{}\\\", terminalId)) // 6. [36] BYTE 车牌颜色 .readByte(color -> log.info(\\\"车牌颜色:{}\\\", color)) // 7. [37,n) String 车辆标识 .readString(exchange.request().msgBodyLength() - 37, carIdentifier -> log.info(\\\"车辆标识:{}\\\", carIdentifier)); } } \"]},\"430\":{\"h\":\"Jt808ByteWriter\",\"t\":[\"用来像 ByteBuf 中写入指定类型的 JT/T-808 数据类型。\",\"内置的支持 Jt808ByteWriter 的类\",\"Jt808Response.Jt808ResponseBuilder.body(Consumer<Jt808ByteWriter>)\",\"ByteBufJt808MsgBuilder.body(Consumer<Jt808ByteWriter>)\"]},\"431\":{\"h\":\"简单示例\",\"t\":[\"class Jt808ByteWriterTest { @Test void write() { final ByteBuf originalByteBuf = ByteBufAllocator.DEFAULT.buffer(128); try { final Jt808ByteWriter writer = Jt808ByteWriter.of(originalByteBuf); final ByteBuf afterWrite = writer .writeBcd(\\\"10203040\\\") .writeString(\\\"STRING\\\") .writeDWord(100) // 这里返回的 ByteBuf 应该和初始化传入的是同一个对象 .writable(); assertSame(originalByteBuf, afterWrite); assertEquals(\\\"10203040535452494E4700000064\\\", HexStringUtils.byteBufToString(originalByteBuf)); assertEquals(\\\"10203040535452494E4700000064\\\", HexStringUtils.byteBufToString(afterWrite)); } finally { // Jt808ByteWriter 只是个辅助类，不会改变内部 writable() 指向的 ByteBuf 的 refCnt // 应该在恰当的时机释放被包装的 originalByteBuf originalByteBuf.release(); assertEquals(0, originalByteBuf.refCnt()); } } } \"]},\"432\":{\"h\":\"使用Jt808ByteWriter手动编码响应体\",\"t\":[\"除了使用 @Jt808ResponseBody 标记的实体类来编码请求，也可以通过 Jt808ByteWriter 来手动写入数据：\",\"public class TerminalRegisterMsgHandlerV2013 implements SimpleJt808RequestHandler<Jt808Response> { @Override public Jt808Response handleMsg(Jt808ServerExchange exchange) { // ... return Jt808Response.newBuilder() .msgId(BuiltinJt808MsgType.CLIENT_REGISTER_REPLY) .terminalId(exchange.request().terminalId()) .flowId(exchange.session().nextFlowId()) .version(exchange.request().version()) // 除了使用注解，也可以通过 `Jt808ByteWriter` 来手动写入数据 .body(writer -> writer // 1. byte[0,2) WORD 对应的终端注册消息的流水号 .writeWord(exchange.request().flowId()) // 2. byte[2,3) BYTE 0:成功;1:车辆已被注册;2:数据库中无该车辆; 3:终端已被注册;4:数据库中无该终端 .writeByte(0) // 3. byte[3,x) STRING 鉴权码(只有在成功后才有该字段) .writeString(\\\"AuthCode-123\\\") ) .build(); } } \"]},\"433\":{\"h\":\"报文构建器\",\"t\":[\"内置了两种 Jt808MsgBuilder 实现类用来构建报文：\",\"用来构建调试报文\",\"回复客户端的消息也可以使用 Jt808MsgBuilder 来构建\"]},\"434\":{\"h\":\"EntityJt808MsgBuilder\",\"t\":[\"该实现类通过被 @Jt808ResponseBody 标记的实体类来构建报文。\",\"注意\",\"该实现 支持 多次调用 builder.build() 方法\",\"该实现不需要显式调用 builder.release()；当然即便是显式调用 builder.release()，也不会有任何影响\",\"方法返回的构建结果需要调用方自己在恰当的时机释放\",\"public class Jt808MsgBuilderTest { // 这里使用-1，通过 Jt808MsgBuilder.msgId(int msgId) 来指定了消息ID // 也可以直接在这里指定具体的消息ID @Jt808ResponseBody(msgId = -1) @Data @Accessors(chain = true) static class TestEntity { // 1. 应答流水号 WORD 对应的平台消息的流水号 @ResponseField(order = 0, dataType = WORD) int serverFlowId; // 2. 应答id WORD 对应的平台消息的 ID @ResponseField(order = 1, dataType = WORD) int serverMsgId; // 3. 结果 byte 0:成功/确认;1:失败;2:消息有误;3:不支持 @ResponseField(order = 2, dataType = BYTE) int result; } // 流水号生成器(这里使用一个永远返回0的生成器用来调试) // 可以使用 Jt808Session(已经实现了Jt808FlowIdGenerator) 或者 Jt808FlowIdGenerator.DEFAULT(默认实现类) 来生成自增的流水号 private static final Jt808FlowIdGenerator ALWAYS_RETURN_0 = step -> 0; @Test void testEntityMsgBuilder() { // 通过实体类来转换消息体内容 final TestEntity entity = new TestEntity() .setServerFlowId(0) .setServerMsgId(0x8103) .setResult(0); final EntityJt808MsgBuilder builder = Jt808MsgBuilder.newEntityBuilder(ALWAYS_RETURN_0) .version(Jt808ProtocolVersion.VERSION_2013) .terminalId(\\\"013912344323\\\") .body(entity) .msgId(BuiltinJt808MsgType.CLIENT_COMMON_REPLY); final ByteBuf result = builder.build(); assertEquals(\\\"7E0001000501391234432300000000810300F87E\\\", HexStringUtils.byteBufToString(result)); assertEquals(\\\"7E0001000501391234432300000000810300F87E\\\", builder.toHexString()); assertEquals(1, result.refCnt()); result.release(); assertEquals(0, result.refCnt()); } } \"]},\"435\":{\"h\":\"ByteBufJt808MsgBuilder\",\"t\":[\"该实现类通过 Jt808ByteWriter (ByteBuf) 来构建报文。\",\"注意\",\"该实现 不支持 多次调用 builder.build() 方法\",\"该实现需要调用 builder.release() 方法来释放 builder 内部用到的临时 ByteBuf\",\"推荐在 try-with-resources 块中使用\",\"方法返回的构建结果需要调用方自己在恰当的时机释放\",\"public class Jt808MsgBuilderTest { // 流水号生成器(这里使用一个永远返回0的生成器用来调试) // 可以使用 Jt808Session(已经实现了Jt808FlowIdGenerator) 或者 Jt808FlowIdGenerator.DEFAULT(默认实现类) 来生成自增的流水号 private static final Jt808FlowIdGenerator ALWAYS_RETURN_0 = step -> 0; @Test public void testByteBufMsgBuilder() { // final ByteBuf originalBuf = ByteBufAllocator.DEFAULT.buffer(128); final ByteBuf originalBuf = Unpooled.buffer(128); try (ByteBufJt808MsgBuilder builder = Jt808MsgBuilder.newByteBufBuilder(ALWAYS_RETURN_0, originalBuf)) { builder.version(Jt808ProtocolVersion.VERSION_2013) .msgId(BuiltinJt808MsgType.CLIENT_COMMON_REPLY) .terminalId(\\\"013912344323\\\") // 消息体借助 Jt808ByteWriter 来写入内容 // 也可以直接提供一个已经写好内容的 ByteBuf 用来充当消息体 .body(writer -> writer // 1. 应答流水号 WORD 对应的平台消息的流水号 .writeWord(0) // 2. 应答id WORD 对应的平台消息的 ID .writeWord(0x8103) // 3. 结果 byte 0:成功/确认;1:失败;2:消息有误;3:不支持 .writeByte(0) ); final ByteBuf result = builder.build(); assertEquals(\\\"7E0001000501391234432300000000810300F87E\\\", HexStringUtils.byteBufToString(result)); assertEquals(1, result.refCnt()); assertEquals(1, originalBuf.refCnt()); // 在恰当的时机释放构建结果 result.release(); assertEquals(0, result.refCnt()); } // try-with-resource 释放了 originalBuf assertEquals(0, originalBuf.refCnt()); } } \"]},\"436\":{\"h\":\"RebuildableByteBufJt808MsgBuilder\",\"t\":[\"该实现类通过 Jt808ByteWriter (ByteBuf) 来构建报文。\",\"注意\",\"该实现 支持 多次调用 builder.build() 方法\",\"该实现需要调用 builder.release() 方法来释放 builder 内部用到的临时 ByteBuf\",\"推荐在 try-with-resources 块中使用\",\"方法返回的构建结果需要调用方自己在恰当的时机释放\",\"class RebuildableByteBufJt808MsgBuilderTest { Jt808FlowIdGenerator flowIdGenerator = step -> 0; @Test void test2() { final ByteBuf originalBuf = ByteBufAllocator.DEFAULT.buffer(); try (var builder = Jt808MsgBuilder.newRebuildableByteBufBuilder(flowIdGenerator, originalBuf)) { builder.version(Jt808ProtocolVersion.VERSION_2013) .msgId(BuiltinJt808MsgType.CLIENT_COMMON_REPLY) .terminalId(\\\"013912344323\\\") // 消息体借助 Jt808ByteWriter 来写入内容 // 也可以直接提供一个已经写好内容的 ByteBuf 用来充当消息体 .body(writer -> writer // 1. 应答流水号 WORD 对应的平台消息的流水号 .writeWord(0) // 2. 应答id WORD 对应的平台消息的 ID .writeWord(0x8103) // 3. 结果 byte 0:成功/确认;1:失败;2:消息有误;3:不支持 .writeByte(0) ); final ByteBuf result = builder.build(); Assertions.assertEquals(1, result.refCnt()); Assertions.assertEquals(\\\"7E0001000501391234432300000000810300F87E\\\", FormatUtils.toHexString(result)); doSomeProcess(result); result.release(); Assertions.assertEquals(0, result.refCnt()); final ByteBuf result2 = builder.build(); Assertions.assertEquals(1, result2.refCnt()); doSomeProcess(result2); result2.release(); Assertions.assertEquals(0, result2.refCnt()); } // try-with-resources 会自动释放 originalBuf Assertions.assertEquals(0, originalBuf.refCnt()); } } \"]},\"437\":{\"h\":\"编译源码\"},\"438\":{\"h\":\"请先读我\",\"t\":[\"提示\",\"一般情况下，你无需编译源码。直接引 为 spring-boot 提供的 starter 即可：\",\"spring-boot-3.x : 引入 jt-808-server-spring-boot-starter\",\"spring-boot-2.x : 引入 jt-808-server-spring-boot-starter-boot2\",\"如果你要体验最新版 或者 要基于源码二次开发，可以参考下文的说明来编译源码：\"]},\"439\":{\"h\":\"要求\"},\"440\":{\"h\":\"为什么编译源码一定要 JDK17？\",\"t\":[\"为什么编译源码一定要 JDK17？\",\"因为 jt-808-server-spring-boot-starter 模块是为 spring-boot-3.x 提供的，spring-boot-3.x 必须使用 JDK17+。\",\"其他模块虽然也用了 JDK17，但是编译级别是 JDK8。\"]},\"441\":{\"h\":\"JDK版本要求\",\"t\":[\"从 2.1.0 开始支持 spring-boot-3.x，所以编译源码的 JDK 版本必须在 JDK-17 (包括)以上。\",\"相关信息\",\"虽然源码要求的 JDK 版本必须在 17 以上，但是实际上：\",\"只有 jt-808-server-spring-boot-starter 模块必须使用 JDK-17，编译后的 .class 文件版本为 61 (JDK-17)\",\"其余模块编译后的 .class 文件版本依然是 52 (JDK-11)；也就是说使用 JDK17 编译输出了 JDK8 对应的 .class\",\"各个模块的 JDK版本 见下面表格：\",\"Module\",\"JDK\",\"CompileLevel\",\".class\",\"jt-808-server-spring-boot-starter\",\"17\",\"JDK-17\",\"61 (JDK-17)\",\"jt-808-server-spring-boot-starter-boot2\",\"17\",\"JDK-8\",\"52 (JDK-8)\",\"jt-808-server-spring-boot-autoconfigure\",\"17\",\"JDK-8\",\"52 (JDK-8)\",\"jt-808-server-support\",\"17\",\"JDK-8\",\"52 (JDK-8)\",\"jt-808-server-core\",\"17\",\"JDK-8\",\"52 (JDK-8)\",\"在 gradle.properties 配置文件里有两个 JDK 版本的配置:\",\"maximumJavaVersion 是 jt-808-server-spring-boot-starter 用到的 JDK版本\",\"defaultJavaVersion 是其余模块用到的\",\"# spring-boot-2.x defaultJavaVersion=8 # spring-boot-3.x maximumJavaVersion=17 \",\"注意\",\"如果没有特殊需求，不建议对 defaultJavaVersion 降级(改为比 8 更低的版本) \",\"因为当前源码的最低要求是 JDK8\",\"降级之后可能有一些 Java 语法不兼容\",\"maximumJavaVersion 这个配置项必须 >= 17, 因为这个是给 spring-boot-3.x 用的\",\"但是你可以将 defaultJavaVersion 或 / 和 maximumJavaVersion 升级(改为高版本)\"]},\"442\":{\"h\":\"spring-boot版本要求\",\"t\":[\"在 gradle.properties 配置文件里有两个 spring-boot 版本的配置:\",\"maximumSpringBootBomVersion 是 jt-808-server-spring-boot-starter 用到的 spring-boot 版本\",\"defaultSpringBootBomVersion 是其余模块用到的 spring-boot 版本\",\"# spring-boot-2.x defaultSpringBootBomVersion=2.7.18 # spring-boot-3.x maximumSpringBootBomVersion=3.3.0 \",\"相关信息\",\"如果没有特殊需求，也没必要修改源码中的 spring-boot 版本。\",\"defaultSpringBootBomVersion 可取值为 [2.2.x, 2.7.18]\",\"maximumSpringBootBomVersion 可取值为 [3.0.0, ...)\"]},\"443\":{\"h\":\"编译\",\"t\":[\"注意\",\"不建议自己单独安装 gradle。你应该直接使用项目中指定版本的 gradle-wrapper。\"]},\"444\":{\"h\":\"命令行编译\",\"t\":[\"编译命令：\",\"./gradlew clean build \",\"详情\",\"~ ls CHANGELOG.md gradle.properties jt-808-server-support README.md gradlew jt-core build-script gradlew.bat jt-spring build.gradle jt-808-server-spring-boot-autoconfigure samples docs jt-808-server-spring-boot-starter settings.gradle gradle jt-808-server-spring-boot-starter-boot2 # 使用 项目中自带的 gradlew 来编译 ~ ./gradlew clean build > Configure project : the maven repo credentials file <<repo-credentials.gradle>> will be load from : /xxx/xxx/.gradle/repo-credentials.gradle [[ MavenRepo ]] --> (aliyun)[release] <-- [jt-808-server-spring-boot-autoconfigure] [[ MavenRepo ]] --> (aliyun)[release] <-- [jt-808-server-spring-boot-starter] [[ MavenRepo ]] --> (aliyun)[release] <-- [jt-808-server-spring-boot-starter-boot2] [[ MavenRepo ]] --> (aliyun)[release] <-- [jt-808-server-support] [[ MavenRepo ]] --> (aliyun)[release] <-- [jt-core] [[ MavenRepo ]] --> (aliyun)[release] <-- [jt-spring] BUILD SUCCESSFUL in 7s 73 actionable tasks: 71 executed, 2 up-to-date \"]},\"445\":{\"h\":\"导入Idea\",\"t\":[\"注意\",\"请先给 Idea 装好 lombok 插件\",\"请确保 jdk.version >= 17\",\"1). 项目 JDK版本 配置：\",\"2). GradleJDK版本 配置:\",\"打开 idea 的 gradle 配置界面:\",\"修改 gradle 用到的 JDK版本 为 JDK17+\"]},\"446\":{\"h\":\"导入Eclipse\",\"t\":[\"注意\",\"请先给 Eclipse 装好 lombok 插件\",\"请确保 jdk.version >= 17\",\"第一次导入报错\",\"先执行 ./gradlew eclipse 命令，为 eclipse 生成配置。\",\"然后 refresh 所有模块\",\"导入后，效果如下：\"]},\"447\":{\"h\":\"兼容性\"},\"448\":{\"h\":\"请先读我\",\"t\":[\"警告\",\"2.1.x 以下的版本 \",\"只有一个为 spring-boot-2.x 提供的 jt-808-server-spring-boot-stater\",\"并且模块名中的 starter 单词拼写错误(写成了 stater)\",\"并没有为 spring-boot-3.x 提供 starter\",\"实际上，至少在 spring-boot-3.0.1 中还是能正常解析 spring-boot-2.x 的 starter 的\",\"2.1.x 开始，提供了两个 starter\",\"jt-808-server-spring-boot-starter 为 spring-boot-3.x 提供的 starter\",\"jt-808-server-spring-boot-starter-boot2 为 spring-boot-2.x 提供的 starter\",\"后续版本会以 spring-boot-3.x 为主，同时尽量兼容 spring-boot-2.x\",\"2.3.x 开始 \",\"jt-808-server-spring-boot-starter-boot2 支持 JDK-8+\",\"之前版本只支持 JDK-11+\"]},\"449\":{\"h\":\"项目模块介绍\",\"t\":[\"默认 JDK版本 和 spring-boot版本 见下表:\",\"Module\",\"JDK\",\"CompileLevel\",\".class\",\"spring-boot\",\"jt-808-server-spring-boot-starter\",\"17\",\"JDK-17\",\"61 (JDK-17)\",\"3.3.0\",\"jt-808-server-spring-boot-starter-boot2\",\"17\",\"JDK-8\",\"52 (JDK-8)\",\"2.7.18\",\"jt-808-server-spring-boot-autoconfigure\",\"17\",\"JDK-8\",\"52 (JDK-8)\",\"2.7.18\",\"jt-808-server-support\",\"17\",\"JDK-8\",\"52 (JDK-8)\",\"--\",\"jt-808-server-core\",\"17\",\"JDK-8\",\"52 (JDK-8)\",\"--\"]},\"450\":{\"h\":\"JDK\",\"t\":[\"项目源码要求的 JDK版本 为 JDK17+\",\"但是编译之后的 jar 包中 .class 文件最低要求为 JDK8+\",\"提示\",\"也就是说：\",\"如果你直接在 本项目源码 上进行业务开发(不推荐) \",\"必须满足 java.version >= 17\",\"如果你是将本项目发布的 jar文件 依赖到你的项目里 \",\"基于 spring-boot-2.x 的项目, 满足 java.version >= 8 即可\",\"基于 spring-boot-3.x 的项目, 必须满足 java.version >= 17\"]},\"451\":{\"h\":\"spring-boot\"},\"452\":{\"h\":\"请先读我\",\"t\":[\"警告\",\"注意区分 jt-808-server-spring-boot-starter 和 jt-808-server-spring-boot-starter-boot2 两个 starter, 从 2.1.x 开始:\",\"jt-808-server-spring-boot-starter 是给 spring-boot-3.x 提供的\",\"jt-808-server-spring-boot-starter-boot2 是给 spring-boot-2.x 提供的\"]},\"453\":{\"h\":\"内置版本\",\"t\":[\"除了 jt-808-server-spring-boot-starter 模块依赖的 spring-boot版本 是 3.3.0 外，其他模块依赖的 spring-boot版本 都是 2.7.18。\",\"这里只讨论 spring-boot版本，至于 spring-boot 依赖的 spring-framework 的版本以对应版本的 spring-boot-dependencies 依赖为准。\",\"提示\",\"你可以按你的需求调整 jt-framework 中默认的 spring-boot 版本。\"]},\"454\":{\"h\":\"spring-boot-2.x\",\"t\":[\"在 spring-boot-2.x 的项目中，你可以像下面这样修改 jt-framework 自带的 spring-boot 版本:\",\" <dependencies> <dependency> <groupId>io.github.hylexus.jt</groupId> <artifactId>jt-808-server-spring-boot-starter-boot2</artifactId> <version>2.3.0-rc.6</version> <!-- 1. 排除 jt-framework 自带的 spring-boot-starter(2.7.18) --> <exclusions> <exclusion> <artifactId>spring-boot-starter</artifactId> <groupId>org.springframework.boot</groupId> </exclusion> </exclusions> </dependency> <!-- 2. 按需求引入需要的 spring-boot 版本 --> <dependency> <artifactId>spring-boot-starter</artifactId> <groupId>org.springframework.boot</groupId> <!-- 使用2.5.12替换 jt-framework内置的 2.7.18 --> <!-- jt-808-server-spring-boot-starter-boot2(注意和 spring-boot-3.x项目的区别) 对应的 spring-boot.version ∈ [2.2.x, 2.6.x] --> <!-- jt-808-server-spring-boot-starter-boot2(注意和 spring-boot-3.x项目的区别) 对应的 spring-boot.version ∈ [2.2.x, 2.6.x] --> <!-- jt-808-server-spring-boot-starter-boot2(注意和 spring-boot-3.x项目的区别) 对应的 spring-boot.version ∈ [2.2.x, 2.6.x] --> <version>2.5.12</version> </dependency> </dependencies> \"]},\"455\":{\"h\":\"spring-boot-3.x\",\"t\":[\"在 spring-boot-3.x 的项目中，你可以像下面这样修改 jt-framework 自带的 spring-boot 版本:\",\" <dependencies> <dependency> <groupId>io.github.hylexus.jt</groupId> <artifactId>jt-808-server-spring-boot-starter</artifactId> <version>2.3.0-rc.6</version> <exclusions> <!-- 1. 排除 jt-framework 自带的 spring-boot-starter(3.3.0) --> <exclusion> <artifactId>spring-boot-starter</artifactId> <groupId>org.springframework.boot</groupId> </exclusion> </exclusions> </dependency> <!-- 2. 按需求引入需要的 spring-boot 版本 --> <dependency> <artifactId>spring-boot-starter</artifactId> <groupId>org.springframework.boot</groupId> <!-- 使用3.0.0替换 jt-framework内置的 3.3.0 --> <!-- jt-808-server-spring-boot-starter(注意和 spring-boot-2.x项目的区别) 对应的 spring-boot.version ∈ [3.0.x, ...] --> <!-- jt-808-server-spring-boot-starter(注意和 spring-boot-2.x项目的区别) 对应的 spring-boot.version ∈ [3.0.x, ...] --> <!-- jt-808-server-spring-boot-starter(注意和 spring-boot-2.x项目的区别) 对应的 spring-boot.version ∈ [3.0.x, ...] --> <version>3.0.0</version> </dependency> </dependencies> \"]},\"456\":{\"h\":\"入门\"},\"457\":{\"h\":\"消息类型\"},\"458\":{\"h\":\"MsgType\",\"t\":[\"提示\",\"各个厂商对 808协议 都是选择性的实现，同时还有自定义的消息类型。\",\"所以，并没有内置所有类型的消息，而是定义了一个 MsgType 接口以供用户自行扩展。\",\"建议实现接口的时候使用枚举\",\"点击查看 MsgType 接口定义\",\"public interface MsgType { /** * @return 消息ID(消息头中的前两个字节) */ int getMsgId(); /** * @param msgId 消息ID * @return 转换之后的 {@link MsgType} 实例 */ Optional<MsgType> parseFromInt(int msgId); String getDesc(); String toString(); } \",\"每个项目都应该提供一个自己的 MsgType 实现，参考下面的 MyMsgType 定义：\",\"public enum MyMsgType implements MsgType { CLIENT_REGISTER(0x0100, \\\"终端注册\\\"), CLIENT_AUTH(0x0102, \\\"终端鉴权\\\"), // ... // 在这里继续扩你的消息类型就行了(即便是和内置的重复了也会使用你自定义的) ; private final int msgId; private final String desc; MyMsgType(int msgId, String desc) { this.msgId = msgId; this.desc = desc; } private final static Map<Integer, MsgType> mappings = new HashMap<>(values().length); static { for (MyMsgType value : values()) { mappings.put(value.msgId, value); } } @Override public Optional<MsgType> parseFromInt(int msgId) { return Optional.ofNullable(mappings.get(msgId)); } @Override public int getMsgId() { return msgId; } @Override public String getDesc() { return desc; } } \"]},\"459\":{\"h\":\"Jt808MsgTypeParser\",\"t\":[\"Jt808MsgTypeParser 负责解析 MsgType。\",\"点击查看 Jt808MsgTypeParser 接口定义\",\"public interface Jt808MsgTypeParser { Optional<MsgType> parseMsgType(int msgId); } \",\"注意\",\"每个项目都应该提供一个自己的 Jt808MsgTypeParser 实现并加入到 Spring 容器中。参考下面的 MyJt808Config 定义：\",\" @Configuration public class MyJt808Config { @Bean public Jt808MsgTypeParser jt808MsgTypeParser() { // 下面代码中的 `MyMsgType` 指的就是你自定义的类型(你只需要在你自己的 `MyMsgType` 中扩展枚举就行了) // 优先使用自定义类型解析 return msgId -> MyMsgType.CLIENT_AUTH.parseFromInt(msgId) // 使用内置类型解析 .or(() -> BuiltinJt808MsgType.CLIENT_AUTH.parseFromInt(msgId)); } } \"]},\"460\":{\"h\":\"Maven版示例\",\"t\":[\"Maven版示例项目\",\"这里只是将源码中 samples 目录下的项目复制了一份改成了 Maven 项目。\",\"Github: https://github.com/hylexus/jt-framework-samples-maven\",\"Gitee: https://gitee.com/hylexus/jt-framework-samples-maven\"]},\"461\":{\"h\":\"快速开始\",\"t\":[\"此处将展示一个 最少配置 的 808协议 消息处理服务的搭建。\",\"传送门\",\"本小节的示例可以在 samples/jt-808-server-sample-bare 下找到对应代码。\"]},\"462\":{\"h\":\"创建工程\",\"t\":[\"创建一个空的 spring-boot 工程。\",\"传送门\",\"可以使用 Spring Initializer 快速初始化一个 Spring Boot 工程。\"]},\"463\":{\"h\":\"添加依赖\"},\"464\":{\"h\":\"spring-boot-2.x\",\"t\":[\"使用 spring-boot-2.x 的项目引入为 808协议 提供的 jt-808-server-spring-boot-starter-boot2\"]},\"465\":{\"h\":\"spring-boot-3.x\",\"t\":[\"使用 spring-boot-3.x 的项目引入为 808协议 提供的 jt-808-server-spring-boot-starter\"]},\"466\":{\"h\":\"配置\",\"t\":[\"application.yml\",\"jt808: built-components: component-statistics: enabled: true request-handlers: enabled: true logging: level.root: info level.io.github.hylexus: info level.jt-808.request.decoder: debug level.jt-808.response.encoder: debug \"]},\"467\":{\"h\":\"测试\"},\"468\":{\"h\":\"启动项目\",\"t\":[\"至此，对 808消息 的处理服务已经搭建完毕。启动 spring-boot 项目开始测试。\",\"可以从启动日志中的组件统计信息中看到内置了一些消息处理器：\",\"0x0100 终端注册\",\"0x0102 终端鉴权\",\"0x0200 定位数据上报\",\"0x0704 定位数据批量上报\",\"所以现在可以测试接收内置的这些类型的消息了。下面以 2019 版的 终端注册消息 为例进行测试：\",\"配置提示\",\"组件统计信息 的开关由配置项 jt808.print-component-statistics = true|false 来控制\",\"默认的 TCP 端口为 6808\"]},\"469\":{\"h\":\"发报文\",\"t\":[\"警告\",\"注意：\",\"无论以什么发包工具发包，都请记得以 十六进制格式 发送！可以参考 。\",\"报文\",\"[7E010040560100000000013912344321007B000B0000313233353931323335393131323334353637383930313233343536373839303132333435363738393069643132333435363738393031323334353637383930313233343536373801B8CA4A2D3635343332313C7E] \",\"客户端\"]},\"470\":{\"h\":\"服务端\",\"t\":[\"传送门\",\"本小节的示例可以在 samples/jt-808-server-sample-bare 下找到对应代码。\"]},\"471\":{\"h\":\"基本术语\",\"t\":[\"在 2.x 中，所有的核心 API 都重写了 (fluent 风格)。几个关键接口如下：\"]},\"472\":{\"h\":\"Jt808Request\",\"t\":[\"客户端请求消息中的字节流最终会解析到 Jt808Request 里。Jt808Request 接口内容如下：\",\"public interface Jt808Request { /** * @return 消息ID */ MsgType msgType(); /** * @return 请求头 */ Jt808RequestHeader header(); /** * @return 原始报文(转义之后) */ ByteBuf rawByteBuf(); /** * @return 消息体(转义之后) */ ByteBuf body(); /** * @return 校验码(原始报文) */ byte originalCheckSum(); /** * @return 校验码(计算后) * @see Jt808MsgBytesProcessor#calculateCheckSum(ByteBuf) */ byte calculatedCheckSum(); // ... } \"]},\"473\":{\"h\":\"Jt808Response\",\"t\":[\"与 Jt808Request 相对应，处理完消息之后回复给客户端的数据对应着 Jt808Response 接口：\",\"public interface Jt808Response extends Jt808ByteWriter { int DEFAULT_MAX_PACKAGE_SIZE = 1024; // ... /** * byte[0,2) -- {@link MsgDataType#WORD WORD} -- 消息ID */ int msgType(); Jt808ProtocolVersion version(); /** * {@link Jt808ProtocolVersion#VERSION_2011 VERSION_2011} -- byte[4,10) -- {@link MsgDataType#BCD BCD[6]} -- 终端手机号 * <p> * {@link Jt808ProtocolVersion#VERSION_2019 VERSION_2019} -- byte[5,15) -- {@link MsgDataType#BCD BCD[10]} -- 终端手机号 */ String terminalId(); /** * {@link Jt808ProtocolVersion#VERSION_2011 VERSION_2011} -- byte[10,11) -- {@link MsgDataType#WORD WORD} -- 流水号 * <p> * {@link Jt808ProtocolVersion#VERSION_2019 VERSION_2019} -- byte[15,16) -- {@link MsgDataType#WORD WORD} -- 流水号 */ int flowId(); ByteBuf body(); // ... } \"]},\"474\":{\"h\":\"Jt808Session\",\"t\":[\"和客户端对应的连接都用一个叫做 Jt808Session 类来表示：\",\"public interface Jt808Session extends Jt808FlowIdGenerator { // ... /** * @param byteBuf 待发送给客户端的数据 */ void sendMsgToClient(ByteBuf byteBuf) throws JtCommunicationException; /** * @return 当前流水号，并自增 * @see #currentFlowId(boolean) */ int currentFlowId(); default String sessionId() { return id(); } Channel channel(); Jt808Session channel(Channel channel); String terminalId(); /** * @return 当前终端的协议版本号 */ Jt808ProtocolVersion protocolVersion(); /** * @return 上次通信时间 */ long lastCommunicateTimestamp(); Jt808Session lastCommunicateTimestamp(long lastCommunicateTimestamp); } \"]},\"475\":{\"h\":\"Jt808ServerExchange\",\"t\":[\"在实际处理消息的过程中，将 Jt808Request、Jt808Response 和 Jt808Session 都封装在了一个叫 Jt808ServerExchange 的对象里。\",\"和 Spring 的 WebFlux 中的 org.springframework.web.server.ServerWebExchange 有类似的作用。\",\"public interface Jt808ServerExchange { Jt808Request request(); Jt808Response response(); Jt808Session session(); } \"]},\"476\":{\"h\":\"jt-808\",\"t\":[\"提示\",\"本小节将介绍 808协议 相关的接入步骤，主要内容如下：\"]},\"477\":{\"h\":\"协议扫盲\"},\"478\":{\"h\":\"数据类型\"},\"479\":{\"h\":\"808协议数据类型\",\"t\":[\"数据类型\",\"描述及要求\",\"BYTE\",\"无符号单字节整形（字节， 8 位）\",\"WORD\",\"无符号双字节整形（字， 16 位）\",\"DWORD\",\"无符号四字节整形（双字， 32 位）\",\"BYTE[n]\",\"n 字节\",\"BCD[n]\",\"8421 码， n 字节\",\"STRING\",\"GBK 编码，若无数据，置空\"]},\"480\":{\"h\":\"对应Java数据类型\",\"t\":[\"和文档中定义的数据类型都在枚举类 io.github.hylexus.jt.data.MsgDataType 中。\",\"@Getter public enum MsgDataType { BYTE(1, \\\"无符号单字节整型(字节，8 位)\\\", newHashSet(byte.class, Byte.class, int.class, Integer.class, Short.class, short.class)), BYTES(0, \\\"\\\", newHashSet(byte[].class)), WORD(2, \\\"无符号双字节整型(字，16 位)\\\", newHashSet(short.class, Short.class, int.class, Integer.class)), // https://github.com/hylexus/jt-framework/issues/34 DWORD(4, \\\"无符号四字节整型(双字，32 位)\\\", newHashSet(long.class, Long.class, int.class, Integer.class)), BCD(0, \\\"8421 码，n 字节\\\", newHashSet(String.class)), STRING(0, \\\"GBK 编码，若无数据，置空\\\", newHashSet(String.class)), UNKNOWN(0, \\\"未知类型，用于占位符或默认值\\\", newHashSet(String.class)), ; /** * 字节数 * 为零表示使用外部指定的长度 * * @see BasicField#length() */ private final int byteCount; private final String desc; private final Set<Class<?>> expectedTargetClassType; MsgDataType(int byteCount, String desc, Set<Class<?>> expectedTargetClassType) { this.byteCount = byteCount; this.desc = desc; this.expectedTargetClassType = expectedTargetClassType; } } \"]},\"481\":{\"h\":\"消息结构\",\"t\":[\"标识位\",\"消息头\",\"消息体\",\"校验码\",\"标识位\",\"1byte(0x7e)\",\"16byte\",\"1byte\",\"1byte(0x7e)\"]},\"482\":{\"h\":\"消息头\",\"t\":[\"整个报文中最复杂也就是消息头的处理了。\",\"分包消息 的消息头长度为 16字节\",\"非分包消息 的消息头长度为 12字节\",\"消息头的结构如下所示：\",\"消息ID(0-1) 消息体属性(2-3) 终端手机号(4-9) 消息流水号(10-11) 消息包封装项(12-15) byte[0-1] 消息ID word(16) byte[2-3] 消息体属性 word(16) bit[0-9] 消息体长度 bit[10-12] 数据加密方式 此三位都为 0，表示消息体不加密 第 10 位为 1，表示消息体经过 RSA 算法加密 其它保留 bit[13] 分包 1：消息体卫长消息，进行分包发送处理，具体分包信息由消息包封装项决定 0：则消息头中无消息包封装项字段 bit[14-15] 保留 byte[4-9] 终端手机号或设备ID bcd[6] 根据安装后终端自身的手机号转换 手机号不足12 位，则在前面补 0 byte[10-11] 消息流水号 word(16) 按发送顺序从 0 开始循环累加 byte[12-15] 消息包封装项 byte[0-1] 消息包总数(word(16)) 该消息分包后得总包数 byte[2-3] 包序号(word(16)) 从 1 开始 如果消息体属性中相关标识位确定消息分包处理,则该项有内容 否则无该项 \"]},\"483\":{\"h\":\"快速开始\",\"t\":[\"此处将展示一个 最少配置 的808协议消息处理服务的搭建。\",\"传送门\",\"本小节的示例可以在 samples/jt-808-server-sample-bare 下找到对应代码。\"]},\"484\":{\"h\":\"创建工程\",\"t\":[\"创建一个空的 spring-boot 工程。\",\"传送门\",\"可以使用 Spring Initializer 快速初始化一个 Spring Boot 工程。\"]},\"485\":{\"h\":\"添加依赖\",\"t\":[\"引入为 808协议 提供的 spring-boot-starter\",\"gradle\",\"dependencies { // ... implementation group: 'io.github.hylexus.jt', name: 'jt-808-server-spring-boot-stater', version: \\\"1.0.12-RELEASE\\\" // ... } \",\"maven\",\"<dependency> <groupId>io.github.hylexus.jt</groupId> <artifactId>jt-808-server-spring-boot-stater</artifactId> <version>1.0.12-RELEASE</version> </dependency> \"]},\"486\":{\"h\":\"配置\",\"t\":[\"application.yml\",\"jt808: print-component-statistics: true logging: level: info level.io.github.hylexus: debug \",\"@EnableJt808ServerAutoConfig 启用自动配置\",\"@SpringBootApplication // 启用自动配置 @EnableJt808ServerAutoConfig public class Jt808ServerSampleBareApplication { public static void main(String[] args) { SpringApplication.run(Jt808ServerSampleBareApplication.class, args); } } \"]},\"487\":{\"h\":\"测试\",\"t\":[\"至此，对808消息的处理流程已经搭建完毕。启动 spring-boot 项目开始测试。\",\"可以从启动日志中的组件统计信息中看到内置了一个对 0x0102 (终端鉴权) 消息的处理器。处理逻辑位于 io.github.hylexus.jt808.handler.impl.BuiltinAuthMsgHandler 。\",\"配置提示\",\"组件统计信息 的开关由配置项 jt808.print-component-statistics = true|false 来控制\",\"鉴权成功与否是由函数式接口 io.github.hylexus.jt808.ext.AuthCodeValidator 处理的。 并且内置了一个 永远返回true的仅仅用于调试 的实现类 BuiltinAuthCodeValidatorForDebugging 。\"]},\"488\":{\"h\":\"使用发包工具测试鉴权消息\",\"t\":[\"注意：\",\"无论以什么发包工具发包，都请记得以 十六进制格式 发送！可以参考 。\",\"注意：\",\"无论以什么发包工具发包，都请记得以 十六进制格式 发送！可以参考 。\",\"注意：\",\"无论以什么发包工具发包，都请记得以 十六进制格式 发送！可以参考 。\",\"用发包工具发送如下报文给服务器( 默认TCP端口:6808 )测试：\",\"7E0102000676890100562606E144454A544E506D7E \",\"此时可以从控制台看到，内置的鉴权消息处理器打印出的日志，解析出了鉴权码，并且已经回复客户端。\",\"传送门\",\"本小节的示例可以在 samples/jt-808-server-sample-bare 下找到对应代码。\"]},\"489\":{\"h\":\"异常处理\",\"t\":[\"直接实现 MsgHandler 等接口并 手动注册 的组件的异常处理可以在实现类中自己处理。\",\"基于注解的 MsgHandler 的异常处理可以直接由注解实现。\",\"具体配置请移步 \"]},\"490\":{\"h\":\"@Jt808RequestMsgHandlerAdvice\",\"t\":[\"类比于 Spring 的 @ControllerAdvice 注解。\",\"@Slf4j @Jt808RequestMsgHandlerAdvice public class BuiltinDefaultExceptionHandler { // ... } \"]},\"491\":{\"h\":\"@Jt808ExceptionHandler\",\"t\":[\"类比于 Spring 的 @ExceptionHandler 注解。\",\"@Slf4j @Jt808RequestMsgHandlerAdvice public class BuiltinDefaultExceptionHandler { @Jt808ExceptionHandler({Throwable.class}) public void processThrowable(Throwable throwable) { log.info(\\\"BuiltinDefaultExceptionHandler :\\\", throwable); } } \",\"传送门\",\"内置的异常处理器位于 BuiltinDefaultExceptionHandler 中。\"]},\"492\":{\"h\":\"注解驱动开发\",\"t\":[\"提示\",\"从客户端接收消息时，字节数组到消息实体类的映射，内部已经 提供并自动注册 了一个叫 ReflectionBasedRequestMsgBodyConverter 的转换器来完成。\",\"所以，对于 常见的报文 可以直接基于注解来完成自动映射，而没必要提供一个 RequestMsgBodyConverter 。\",\"注意：\",\"主动下发消息给客户端时的编码问题，目前只提供了一个最基本的内测版的注解。并且可能在后续版本删除。\",\"所以，本文档暂时不会介绍这部分内容。\",\"提示\",\"本小节主要内容如下：\"]},\"493\":{\"h\":\"位置上传报文解析示例\",\"t\":[\"传送门\",\"本小节的示例可以在 samples/jt-808-server-sample-annotation 下找到对应代码。\",\"提示\",\"本节将以位置上传报文为例，展示如何基于注解来解析报文。\",\"注意\",\"808文档中定义的位置上传报文有很多字段，但是 许多厂商实现的808协议位置上传报文 只是原始808的一个子集 。\",\"本文举例用到的报文也 不是标准完整的位置上传报文，但是原理都一样。\",\"请谅解本文用到的 被具体厂商精简过的文档 不便全部展示出来，但是关键部分会截图展示，不会影响到你阅读本示例。\"]},\"494\":{\"h\":\"十六进制报文\",\"t\":[\"注意\",\"这个报文格式可能和你使用的有所不同，请加以区分！！！\",\"如何以 十六进制格式 发包请移步 \",\"7E0200004A76890100562600AD000000000000000201DCF7F6074054C1000000000000200128080934300164310100E10400000030E2020000E306005E019A019AE40B01CC000018A20000480264E5045E04019AE601A2637E \"]},\"495\":{\"h\":\"解析位置基本信息\",\"t\":[\"@Data @Accessors(chain = true) @Jt808ReqMsgBody(msgType = 0x0200) public class LocationUploadMsgBody implements RequestMsgBody { // 报警标志 @BasicField(startIndex = 0, dataType = DWORD) private int alarmFlag; // 状态 @BasicField(startIndex = 4, dataType = DWORD) private int status; // 将上面的 status 字段的第0位取出转为 int 类型 @SlicedFrom(sourceFieldName = \\\"status\\\", bitIndex = 0) private int accIntStatus; // 将上面的 status 字段的第0位取出转为 boolean 类型 @SlicedFrom(sourceFieldName = \\\"status\\\", bitIndex = 0) private Boolean accBooleanStatus; // 0 北纬;1 南纬 // 将上面的 status 字段的第2位取出转为 int 类型 @SlicedFrom(sourceFieldName = \\\"status\\\", bitIndex = 2) private int latType; // 纬度(尚未除以 10^6) @BasicField(startIndex = 8, dataType = DWORD) private Integer intLat; // 纬度(使用转换器除以10^6转为Double类型) @BasicField(startIndex = 8, dataType = DWORD, customerDataTypeConverterClass = LngLatReqMsgFieldConverter.class) private Double lat; // 经度(尚未除以 10^6) @BasicField(startIndex = 12, dataType = DWORD) private Integer intLng; // 经度(使用转换器除以10^6转为Double类型) @BasicField(startIndex = 12, dataType = DWORD, customerDataTypeConverterClass = LngLatReqMsgFieldConverter.class) private Double lng; // 经度(startIndexMethod使用示例) @BasicField(startIndexMethod = \\\"getLngStartIndex\\\", dataType = DWORD, customerDataTypeConverterClass = LngLatReqMsgFieldConverter.class) private Double lngByStartIndexMethod; public int getLngStartIndex() { log.info(\\\"消息体总长度:{}\\\", this.requestMsgMetadata.getHeader().getMsgBodyLength()); return 12; } // 高度 @BasicField(startIndex = 16, dataType = WORD) private Integer height; // 速度 @BasicField(startIndex = 18, dataType = WORD) private int speed; // 方向 @BasicField(startIndex = 20, dataType = WORD) private Integer direction; // BCD 长度6字节 // 时间 yyMMddHHmmss // 200128080934 '2020-01-28 08:09:34' @BasicField(startIndex = 22, dataType = BCD, length = 6) private String time; } \",\"通过以下截图，可能会对映射关系更清晰一些：\"]},\"496\":{\"h\":\"关于status字段的解析\",\"t\":[\"status字段是由消息体中第4~7个字节表示的，类型为 DWORD。对应到Java中为 无符号四字节整型 。你可以将其映射为 int 或 Integer 。\",\"所以至少有以下几种解析方式：\"]},\"497\":{\"h\":\"1.手动解析\",\"t\":[\"@BasicField(startIndex = 4, dataType = BYTES, length = 4) private byte[] statusBytes; \",\"代码段中的 statusBytes 就是消息体中第4~7个字节，然后你可以将字节数组手动转换到 int 。\",\"int status = IntBitOps.intFrom4Bytes(statusBytes); \",\"之后，你可以根据文档中表17的定义将 int 中对应的 bit 提取出来。\",\"// status的第0位-->Acc开关 --> 0:关; 1:开 int accStatus = Numbers.getBitAt(status, 0); // status的第3位 --> 0:东经; 1:西经 int lngType = Numbers.getBitAt(status, 3); \"]},\"498\":{\"h\":\"2.使用@SlicedFrom解析\",\"t\":[\"// 消息体中第4~7个字节 --> int @BasicField(startIndex = 4, dataType = DWORD) private int status; // 将上面的 status 字段的第0位取出转为 int 类型 @SlicedFrom(sourceFieldName = \\\"status\\\", bitIndex = 0) private int accIntStatus; // 将上面的 status 字段的第0位取出转为 boolean 类型 @SlicedFrom(sourceFieldName = \\\"status\\\", bitIndex = 0) private Boolean accBooleanStatus; // 0 北纬;1 南纬 // 将上面的 status 字段的第2位取出转为 int 类型 @SlicedFrom(sourceFieldName = \\\"status\\\", bitIndex = 2) private int latType; \"]},\"499\":{\"h\":\"3.使用@SplittableField解析\",\"t\":[\"@Jt808ReqMsgBody(msgType = 0x0200) public class LocationUploadMsgBody implements RequestMsgBody { // 状态 @BasicField(startIndex = 4, dataType = DWORD) // 将status字段拆分之后放入statusInfo字段 // 该注解只能用户数字 @SplittableField(splitPropertyValueIntoNestedBeanField = \\\"statusInfo\\\") private int status; private LocationUploadStatus statusInfo; @Data public static class LocationUploadStatus { @SplittableField.BitAt(bitIndex = 0) private boolean accStatus; // acc开? @SplittableField.BitAt(bitIndex = 1) private int bit1; //1:定位, 0:未定义 @SplittableField.BitAt(bitIndex = 2) private Boolean isSouthLat;// 是否南纬? @SplittableField.BitAt(bitIndex = 3) private Integer lngType; // 将第0位和第1位同时取出并转为int // 在此处无实际意义,只是演示可以这么使用 @SplittableField.BitAtRange(startIndex = 0, endIndex = 1) private int bit0to1; } } \"]},\"500\":{\"h\":\"关于经纬度的解析\",\"t\":[\"808文档中的经纬度定义为 DWORD 类型，以度位单位的纬度值 乘以10的6次方 ，精确到百万分之一度\"]},\"501\":{\"h\":\"1. 解析为4字节的int\",\"t\":[\"// 纬度(尚未除以 10^6) @BasicField(startIndex = 8, dataType = DWORD) private Integer intLat; \",\"本示例中结果为 31258614。\",\"也就是说，接收到的字节数组中的表示经纬度的 4个字节 应该先转换为数字(int即可)，然后再 除以10^6 即为真实的经纬度，可以用 Double 表示。\"]},\"502\":{\"h\":\"2. 解析为double\",\"t\":[\"提示\",\"但是，本框架并不支持直接从 byte[] 到 double 的转换。此时可以使用自定义的类型转换器。\",\"自定义转换器\",\"public class LngLatReqMsgFieldConverter implements ReqMsgFieldConverter<Double> { @Override public Double convert(byte[] bytes, byte[] subSeq) { return IntBitOps.intFromBytes(subSeq, 0, subSeq.length) * 1.0 / 100_0000; } } \",\"然后指定 customerDataTypeConverterClass 即可\",\"// 纬度(使用转换器除以10^6转为Double类型) @BasicField(startIndex = 8, dataType = DWORD, customerDataTypeConverterClass = LngLatReqMsgFieldConverter.class) private Double lat; \"]},\"503\":{\"h\":\"关于位置附加项的解析\",\"t\":[\"根据文档，从消息体的 第28个字节开始 就是附加项列表了。\",\"还好附加项报文的格式也是有迹可循的：\",\"整体是一个 List 结构，暂且将 List 的每一个元素称之为 Item\",\"每个 Item 内部结构也是一致的 \",\"Id (byte)\",\"length (byte)\",\"content (类型不固定)\",\"但是如果将这个附加项解析为一个 List 的话 \",\"个人感觉取值不是很方便，另外如果附加项内部有嵌套的时候也不好处理\",\"所以额外提供了一个 @ExtraField 注解来映射为一个可嵌套的实体\",\"有得必有失，这样一来，有多少个附加项就要定义多少个字段，比较繁琐\"]},\"504\":{\"h\":\"使用@BasicField解析\",\"t\":[\"由于附加项的类型不固定，仅仅用一个类是无法定义确切类型。 所以，此处的内容自动定义成了byte[]。\",\"@Data public class ExtraInfoItem { @BasicField(startIndex = 0, dataType = BYTE) private Integer id; @BasicField(order = 1, startIndex = 1, dataType = BYTE) private Integer length; // 类型不固定 仅仅用一个类无法定义确切类型 @BasicField(order = 2, startIndex = 2, dataType = BYTES, byteCountMethod = \\\"getLength\\\") private byte[] rawBytes; } \",\"@BasicField(startIndex = 28,byteCountMethod = \\\"getExtraInfoLength\\\",dataType = LIST) private List<ExtraInfoItem> extraInfoItemList; \"]},\"505\":{\"h\":\"使用@ExtraField解析\",\"t\":[\"@Data // 切记@ExtraMsgBody注解不能丢 @ExtraMsgBody( byteCountOfMsgId = 1, // 消息Id用1个字节表示 byteCountOfContentLength = 1 // 附加项长度字段用1个字节表示 ) public class ExtraInfo { @ExtraField.NestedFieldMapping(msgId = 0x30, dataType = BYTE) private int field0x30; // 这里写成List仅仅为了示例，在msgId重复时可以使用List类型 @ExtraField.NestedFieldMapping(msgId = 0x0001, dataType = LIST, itemDataType = DWORD) private List<Integer> field0x0001; @ExtraField.NestedFieldMapping(msgId = 0x31, dataType = BYTE) private int field0x31; @ExtraField.NestedFieldMapping(msgId = 0xe1, dataType = DWORD) private int field0xe1; @ExtraField.NestedFieldMapping(msgId = 0xE4, dataType = BYTES) private byte[] field0xe4; @ExtraField.NestedFieldMapping(msgId = 0xE5, dataType = DWORD) private int field0xe5; @ExtraField.NestedFieldMapping(msgId = 0xE6, dataType = BYTE) private byte field0xe6; } \",\"0xE2 锁状态字段的说明\",\"提示\",\"示例文档中并没涉及到附加项嵌套的情况，但是这种情况在原始808文档中确实是存在的。\",\"如果有嵌套的附加项，可以用类似如下的方式去嵌套解析：\",\"@ExtraField.NestedFieldMapping(msgId = xx, isNestedExtraField = true) private SomeClass nestedField; \",\"传送门\",\"本小节的示例可以在 samples/jt-808-server-sample-annotation 下找到对应代码。\"]},\"506\":{\"h\":\"消息处理器注册\",\"t\":[\"传送门\",\"本小节的示例代码可以在 samples/jt-808-server-sample-annotation 下找到对应代码。\",\"。\"]},\"507\":{\"h\":\"@Jt808RequestMsgHandler\",\"t\":[\"该注解类似于 SpringMVC 的 @Controller。\",\"@Jt808RequestMsgHandler 只能标注于 类 上，表示该类中存在 MsgHandler 方法。\",\"@Jt808RequestMsgHandler public class CommonHandler { // ... } \"]},\"508\":{\"h\":\"@Jt808RequestMsgHandlerMapping\",\"t\":[\"该注解类似于 SpringMVC 的 @RequestMapping。\",\"@Jt808RequestMsgHandlerMapping 只能标注于 方法 上，表示被注解的方法是一个 MsgHandler 方法。\",\"从逻辑上来理解，被其注解的方法相当于一个实现了 MsgHandler 接口的处理器类。\",\"@Slf4j @Jt808RequestMsgHandler public class CommonHandler { // 处理MsgId为0x0200的消息 @Jt808RequestMsgHandlerMapping(msgType = 0x0200) public RespMsgBody processLocationMsg( Jt808Session session, RequestMsgMetadata metadata, RequestMsgHeader header, LocationUploadMsgBody msgBody) { assert header.getMsgId() == BuiltinJt808MsgType.CLIENT_LOCATION_INFO_UPLOAD.getMsgId(); assert session.getTerminalId().equals(header.getTerminalId()); assert session.getTerminalId().equals(metadata.getHeader().getTerminalId()); assert metadata.getHeader() == header; log.info(\\\"处理位置上报消息 terminalId = {}, msgBody = {}\\\", header.getTerminalId(), msgBody); return CommonReplyMsgBody.success(header.getFlowId(), BuiltinJt808MsgType.CLIENT_LOCATION_INFO_UPLOAD); } } \"]},\"509\":{\"h\":\"参数自动注入\",\"t\":[\"类似于 SpringMVC 的处理器参数注入，用 @Jt808RequestMsgHandlerMapping 注解的方法支持参数自动注入。\",\"目前支持自动注入的参数类型如下：\",\"RequestMsgBody\",\"RequestMsgHeader\",\"RequestMsgMetadata\",\"Jt808Session\",\"底层由 HandlerMethodArgumentResolver 来完成注入。 所有支持的参数解析器都委托给了 DelegateHandlerMethodArgumentResolvers。\",\"public class DelegateHandlerMethodArgumentResolvers implements HandlerMethodArgumentResolver { // ... static void addDefaultHandlerMethodArgumentResolver(DelegateHandlerMethodArgumentResolvers resolvers) { resolvers.addResolver(new RequestMsgBodyArgumentResolver()); resolvers.addResolver(new RequestMsgHeaderArgumentResolver()); resolvers.addResolver(new RequestMsgMetadataArgumentResolver()); resolvers.addResolver(new SessionArgumentResolver()); resolvers.addResolver(new ExceptionArgumentResolver()); } public DelegateHandlerMethodArgumentResolvers() { addDefaultHandlerMethodArgumentResolver(this); } // ... } \"]},\"510\":{\"h\":\"MsgHandler注入到Spring容器\",\"t\":[\"从 1.0.4-RELEASE 开始，支持将 MsgHandler 交给Spring来管理，以便于在 MsgHandler 中使用Spring容器的其他bean。\",\"使用方法也很简单，给你的 MsgHandler 加一个 @Component 注解即可。\",\"传送门\",\"本小节的示例代码可以在 samples/jt-808-server-sample-annotation 下找到对应代码。\",\"。\"]},\"511\":{\"h\":\"消息下发\",\"t\":[\"传送门\",\"本小节的示例可以在 samples/jt-808-server-sample-annotation 下找到对应代码。\",\"提示\",\"本小节将介绍如何主动下发消息给终端。\"]},\"512\":{\"h\":\"1. 手动下发\",\"t\":[\"@Component public class SomeController { @Autowired private Jt808SessionManager sessionManager; public void sendDataToClient(String terminalId) { // 通过终端id获取Session final Optional<Jt808Session> sessionInfo = sessionManager.findByTerminalId(terminalId); if (!sessionInfo.isPresent()) { throw new JtSessionNotFoundException(\\\"session not found with terminalId \\\" + terminalId); } try { // 通过Session发送数据 sessionInfo.get().sendMsgToClient(Unpooled.copiedBuffer(\\\"data will be sent to client\\\".getBytes())); } catch (InterruptedException e) { e.printStackTrace(); } } } \",\"警告\",\"手动发送的数据，需要手动拼装为符合808协议格式的报文，并手动转义。\",\"所以内置了一个CommandSender来自动转换为符合808协议格式的报文并发送给客户端。\"]},\"513\":{\"h\":\"2. 使用CommandSender下发\"},\"514\":{\"h\":\"实现原理\",\"t\":[\"TODO 这里缺一个图，暂时没时间画了…………\"]},\"515\":{\"h\":\"示例\",\"t\":[\"@Slf4j @RestController @RequestMapping(\\\"/demo\\\") public class SampleController { @Autowired private CommandSender commandSender; @GetMapping(\\\"/send-msg\\\") public Object sendMsg( @RequestParam(required = false, name = \\\"terminalId\\\", defaultValue = \\\"13717861955\\\") String terminalId, @RequestParam(required = false, name = \\\"timeout\\\", defaultValue = \\\"5\\\") Long timeout) throws Exception { RespTerminalSettings param = new RespTerminalSettings(); List<RespTerminalSettings.ParamItem> paramList = Lists.newArrayList( new RespTerminalSettings.ParamItem(0x0029, DwordBytesValueWrapper.of(100)) ); param.setParamList(paramList); param.setTotalParamCount(paramList.size()); // 【下发消息】的消息类型为: RESP_TERMINAL_PARAM_SETTINGS (0x8103) --> RespTerminalSettings的类注解上指定了下发类型 // 客户端对该【下发消息】的回复消息类型为: CLIENT_COMMON_REPLY (0x0001) CommandMsg commandMsg = CommandMsg.of(terminalId, CLIENT_COMMON_REPLY, param); final Object resp = commandSender.sendCommandAndWaitingForReply(commandMsg, timeout, TimeUnit.SECONDS); log.info(\\\"resp: {}\\\", resp); return resp; } } \",\"@Data @Accessors(chain = true) @Jt808RespMsgBody(respMsgId = 0x8103, desc = \\\"设置终端参数\\\") public class RespTerminalSettings { @CommandField(order = 2) private List<ParamItem> paramList; @CommandField(order = 1, targetMsgDataType = BYTE) private int totalParamCount; @Data @Accessors(chain = true) @SuppressWarnings(\\\"rawtypes\\\") public static class ParamItem { @CommandField(order = 1, targetMsgDataType = DWORD) private int msgId; @CommandField(order = 2, targetMsgDataType = BYTE) private int bytesCountOfContentLength; @CommandField(order = 3) private BytesValueWrapper msgContent; public ParamItem(int msgId, BytesValueWrapper msgContent) { this.msgId = msgId; this.msgContent = msgContent; this.bytesCountOfContentLength = msgContent.getAsBytes().length; } } } \",\"传送门\",\"本小节的示例可以在 samples/jt-808-server-sample-annotation 下找到对应代码。\"]},\"516\":{\"h\":\"请求消息映射\"},\"517\":{\"h\":\"@Jt808ReqMsgBody\",\"t\":[\"该注解只能标记于 请求消息体实体类 上。\",\"注意\",\"目前为止，请求消息体实体类 必须实现标记接口 RequestMsgBody 。\",\"类似于 Hibernate 和 MyBatis 中的 @Table 注解。\",\"属性\",\"解释\",\"取值示例\",\"msgType\",\"808报文类型，消息Id\",\"0x0200\",\"@Data @Accessors(chain = true) @Jt808ReqMsgBody(msgType = 0x0200) public class LocationUploadMsgBody implements RequestMsgBody { // ... } \"]},\"518\":{\"h\":\"@BasicField\",\"t\":[\"只能标记于字段上。类比于Hibernate 或 MyBatis 中的 @Column、@Basic。\",\"属性\",\"解释\",\"取值示例\",\"startIndex\",\"起始字节索引\",\"0、4、12\",\"startIndexMethod\",\"作用和startIndex相同，当startIndex无法直接指定时可根据该属性定义的方法名返回字节数\",\"\\\"getLength\\\"\",\"dataType\",\"数据类型\",\"WORD、DWORD\",\"length\",\"长度，字节数\",\"4、6\",\"byteCountMethod\",\"作用和length相同，当length无法直接指定时可根据该属性定义的方法名返回字节数\",\"\\\"getLength\\\"\",\"customerDataTypeConverterClass\",\"自定义的类型转换器\",\"@BasicField(startIndex = 4, dataType = BYTES, length = 4) private byte[] statusBytes; @BasicField(startIndex = 4, dataType = BYTES, byteCountMethod = 'getLength') private byte[] statusBytes1; public int getLength() { return 4; } \"]},\"519\":{\"h\":\"@SplittableField\",\"t\":[\"将被修饰的字段拆分之后赋值给另一个bean。\",\"注意\",\"该注解目前仅仅适用于 int 、 short 、 byte 类型的字段。\",\"属性\",\"解释\",\"取值示例\",\"splitPropertyValueIntoNestedBeanField\",\"目标属性\",\"用法请。\"]},\"520\":{\"h\":\"@SlicedFrom\",\"t\":[\"注意\",\"该注解目前仅仅适用于 int 、 short 、 byte 类型的字段。\",\"属性\",\"解释\",\"取值示例\",\"sourceFieldName\",\"源字段名\",\"bitIndex\",\"源字段中的第几个bit\",\"0\",\"startBitIndex\",\"源字段中的起始bit索引\",\"1\",\"endBitIndex\",\"源字段中的终止bit索引\",\"2\",\"用法请。\"]},\"521\":{\"h\":\"@ExtraField&@ExtraMsgBody\",\"t\":[\"@ExtraField\",\"适用于类似位置附加消息的结构。\",\"属性\",\"解释\",\"取值示例\",\"startIndex\",\"起始字节索引\",\"28\",\"length\",\"字节数\",\"20\",\"byteCountMethod\",\"作用和length相同，当length无法直接指定时可根据该属性定义的方法名返回字节数\",\"aFieldName\",\"byteCountOfMsgId\",\"消息ID占用几个字节\",\"1\",\"byteCountOfContentLength\",\"表示消息长度的字段占用几个字节\",\"1\",\"@ExtraMsgBody\",\"用于嵌套的附加信息实体类。\",\"属性\",\"解释\",\"取值示例\",\"byteCountOfMsgId\",\"消息ID占用几个字节\",\"1\",\"byteCountOfContentLength\",\"表示消息长度的字段占用几个字节\",\"1\",\"用法请。\"]},\"522\":{\"h\":\"响应消息映射\",\"t\":[\"本节内容是 的后续内容。\",\"所以本小节所说的 基于注解的响应消息映射 都是基于 而言的，像下面这种处理方式：\",\"@Slf4j @Jt808RequestMsgHandler public class CommonHandler { @Jt808RequestMsgHandlerMapping(msgType = 0x0102) public RespMsgBody processAuthMsg(AuthRequestMsgBody msgBody, RequestMsgHeader header) { log.info(\\\"处理鉴权消息 terminalId = {}, authCode = {}\\\", header.getTerminalId(), msgBody.getAuthCode()); return CommonReplyMsgBody.success(header.getFlowId(), BuiltinJt808MsgType.CLIENT_AUTH); } } \"]},\"523\":{\"h\":\"直接返回RespMsgBody\",\"t\":[\"对于这种直接返回 RespMsgBody 的 MsgHandler，其实转换逻辑已经在 RespMsgBody.toBytes() 里实现了。\",\"常用的 服务端通用应答消息，可以用内置的 CommonReplyMsgBody 来表示。此处不再赘述。\",\"@Data @Accessors(chain = true) public class CommonReplyMsgBody implements RespMsgBody { // 1. 应答流水号 WORD terminal flowId private int replyFlowId; // 2. 应答id WORD 0x0102 ... private int replyMsgId; // 3. 结果 byte 0:成功/确认;1:失败;2:消息有误;3:不支持 private final byte result = SUCCESS; private CommonReplyMsgBody() { } public static CommonReplyMsgBody success(int replyFlowId, MsgType replyFor) { return of(SUCCESS, replyFlowId, replyFor); } public static CommonReplyMsgBody of(byte result, int replyFlowId, MsgType replyFor) { return new CommonReplyMsgBody() .setResult(result) .setReplyFlowId(replyFlowId) .setReplyMsgId(replyFor.getMsgId()); } @Override public byte[] toBytes() { return Bytes.concatAll( IntBitOps.intTo2Bytes(this.getReplyFlowId()), IntBitOps.intTo2Bytes(this.getReplyMsgId()), new byte[]{this.getResult()} ); } @Override public MsgType replyMsgType() { return BuiltinJt808MsgType.SERVER_COMMON_REPLY; } } \"]},\"524\":{\"h\":\"不给客户端回复数据\",\"t\":[\"以下情况不会发送数据给客户端：\",\"手动实现的 MsgHandler\",\"返回 Optional.empty()\",\"基于 @Jt808RequestMsgHandlerMapping 实现的 MsgHandler\",\"方法返回类型为 void\",\"方法返回值为 VoidRespMsgBody.NO_DATA_WILL_BE_SENT_TO_CLIENT\"]},\"525\":{\"h\":\"@Jt808RespMsgBody\",\"t\":[\"MsgHandler 除了直接返回 RespMsgBody 外，还可以返回 被 @Jt808RespMsgBody 标记的实体类。\"]},\"526\":{\"h\":\"示例代码\",\"t\":[\"以下为终端通用应答的示例代码：\",\"@Value // MsgId 0x8001 @Jt808RespMsgBody(respMsgId = 0x8001) public class ServerCommonReplyMsgBody { // 1. [0-1] 应答流水号 WORD terminal flowId @CommandField(order = 0, targetMsgDataType = WORD) int replyFlowId; // 2. [2-3] 应答id WORD 0x0102 ... @CommandField(order = 1, targetMsgDataType = WORD) int replyMsgId; // 3. [4] 结果 byte 0:成功/确认;1:失败;2:消息有误;3:不支持 @CommandField(order = 2, targetMsgDataType = BYTE) byte result; } \",\"以下为对应的Handler返回\",\"@Slf4j @Jt808RequestMsgHandler public class CommonHandler { @Jt808RequestMsgHandlerMapping(msgType = 0x0200) public ServerCommonReplyMsgBody processLocationMsg( Session session, RequestMsgMetadata metadata, RequestMsgHeader header, LocationUploadRequestMsgBody msgBody) { assert header.getMsgId() == BuiltinJt808MsgType.CLIENT_LOCATION_INFO_UPLOAD.getMsgId(); assert session.getTerminalId().equals(header.getTerminalId()); assert session.getTerminalId().equals(metadata.getHeader().getTerminalId()); assert metadata.getHeader() == header; log.info(\\\"处理位置上报消息 terminalId = {}, msgBody = {}\\\", header.getTerminalId(), msgBody); // return CommonReplyMsgBody.success(header.getFlowId(), BuiltinJt808MsgType.CLIENT_LOCATION_INFO_UPLOAD); return new ServerCommonReplyMsgBody(header.getFlowId(), CLIENT_LOCATION_INFO_UPLOAD.getMsgId(), (byte) 0); } } \"]},\"527\":{\"h\":\"属性解释\",\"t\":[\"属性\",\"解释\",\"取值示例\",\"respMsgId\",\"服务端下发消息的 MsgId\",\"0x8001\",\"desc\",\"描述\"]},\"528\":{\"h\":\"@CommandField\",\"t\":[\"属性\",\"解释\",\"取值示例\",\"order\",\"字节顺序，值越小越先编码\",\"-1、0、2\",\"targetMsgDataType\",\"数据类型\",\"DWORD\",\"isNestedCommandField\",\"是否是嵌套类型，true 表示被修饰的字段类型是一个 @CommandField 嵌套的类型\",\"默认值: false\",\"customerDataTypeConverterClass\",\"客户自定义给字段的编码实现\"]},\"529\":{\"h\":\"AuthValidator\",\"t\":[\"注意\",\"该组件 当且仅当 你使用了内置的 AuthMsgHandler 来处理 鉴权消息 时才有效。\",\"如果你覆盖了/未启用内置的 AuthMsgHandler，那么你也 不用 提供 AuthCodeValidator。因为此时的鉴权逻辑已经完全交由你自定的 AuthMsgHandler 来处理了。\",\"比较鸡肋的一个内置组件，不过用来 Quick-Start 还是很方便的🤣。\",\"@Configuration public class Jt808Config extends Jt808ServerConfigurationSupport { @Override public AuthCodeValidator supplyAuthCodeValidator() { return (session, requestMsgMetadata, authRequestMsgBody) -> { final String terminalId = session.getTerminalId(); final String authCode = authRequestMsgBody.getAuthCode(); // 从其他服务验证鉴权码是否正确 boolean success = clientService.isAuthCodeValid(terminalId, authCode); log.info(\\\"AuthCode validate for terminal : {} with authCode : {}, result: {}\\\", terminalId, authCode, success); return success; }; } } \",\"传送门\",\"本小节的示例可以在 samples/jt-808-server-sample-customized 下找到对应代码。\"]},\"530\":{\"h\":\"转义相关\",\"t\":[\"提示\",\"每个硬件厂商实现808协议的时候对转义的处理可能略有不同。\",\"如果内置的转义逻辑不符合要求，可以自己实现 BytesEncoder 接口实现转义逻辑。\",\"之后覆盖内置的处理逻辑即可。\",\"@Configuration public class Jt808Config extends Jt808ServerConfigurationSupport { @Override public BytesEncoder supplyBytesEncoder() { return new BytesEncoder() { @Override public byte[] doEscapeForReceive(byte[] bytes, int start, int end) throws MsgEscapeException { return ...; } @Override public byte[] doEscapeForSend(byte[] bytes, int start, int end) throws MsgEscapeException { return ...; } }; } } \",\"传送门\",\"本小节示例可以在 samples/jt-808-server-sample-customized 找到相关代码。\"]},\"531\":{\"h\":\"定制化\",\"t\":[\"提示\",\"从 1.0.7-RELEASE 开始，几乎所有的自定义的配置都需要继承配置类 io.github.hylexus.jt808.boot.config.Jt808ServerConfigurationSupport\",\"并且不再支持使用 io.github.hylexus.jt808.support.netty.Jt808ServerConfigure 配置（容易导致Bean之间的循环依赖）\",\"可以通过如下代码片段的方式来自定义组件：\",\" @Configuration public class Jt808Config extends Jt808ServerConfigurationSupport { // TODO 重写配置方法或覆盖父类的Bean } \",\"提示\",\"本小节主要内容如下：\"]},\"532\":{\"h\":\"报文构建器\",\"t\":[\"import io.github.hylexus.jt.config.JtProtocolConstant; import io.github.hylexus.jt.data.msg.BuiltinJt808MsgType; import io.github.hylexus.jt.utils.HexStringUtils; import org.junit.Test; import java.nio.charset.Charset; public class Jt808MsgBuilderTest { private static final Charset CHARSET = JtProtocolConstant.JT_808_STRING_ENCODING; @Test public void builder() { final Jt808MsgBuilder builder = Jt808MsgBuilder.builder() // 消息头 .header(msgHeaderSpecBuilder -> msgHeaderSpecBuilder // 消息ID .withMsgId(BuiltinJt808MsgType.CLIENT_REGISTER) // 消息体属性(消息体长度自动计算) .withMsgBodyPropsSpec(msgBodyPropsSpecBuilder -> msgBodyPropsSpecBuilder .withEncryptionType(0b000) .withSubPackage(false) .withReversedBit14AndBit15(0) .build() ) // 终端ID .withTerminalId(\\\"13912344321\\\") // 流水号 .withFlowId(123) .build() ) // 消息体 .body(msgBodyBuilder -> msgBodyBuilder .appendWord(11) //省域 ID [WORD] .appendWord(0)// 市县域 ID [WORD] .appendBytes(\\\"12359\\\".getBytes(CHARSET)) // 制造商 ID [BYTE[5]] .appendBytes(\\\"12345678901234567890\\\".getBytes(CHARSET)) // 终端型号 [BYTE[20]] .appendBytes(\\\"id12345\\\".getBytes(CHARSET)) // 终端 ID [BYTE[7]] .appendByte(1) // 车牌颜色 [BYTE] .appendString(\\\"13160466666\\\") .build() ); System.out.println(HexStringUtils.bytes2HexString(builder.build(true))); System.out.println(HexStringUtils.bytes2HexString(builder.build(false))); } @Test public void testBuildQueryTerminalProperties() { final byte[] bytes = Jt808MsgBuilder.builder() .header(jt808MsgHeaderBuilder -> jt808MsgHeaderBuilder .withMsgId(0x0107) .withMsgBodyPropsSpec(msgBodyPropsSpecBuilder -> msgBodyPropsSpecBuilder .withEncryptionType(0b000) .withSubPackage(false) .withReversedBit14AndBit15(0) .build() ) .withTerminalId(\\\"13912344321\\\") .withFlowId(1) .build() ) .body(messageBuilder -> messageBuilder .appendWord(1) .appendBytes(\\\"12345\\\".getBytes(CHARSET)) .build() ) .build(); System.out.println(HexStringUtils.bytes2HexString(bytes)); } } \"]},\"533\":{\"h\":\"消息转换器\",\"t\":[\"RequestMsgBodyConverter 负责将客户端请求中的 byte[] 转换为 请求消息体实体类 以方便使用。\"]},\"534\":{\"h\":\"手动实现并注册\",\"t\":[\"RequestMsgBodyConverter\",\"自定义的消息体解析器 必须 实现 RequestMsgBodyConverter 这个泛型接口\",\"当然，这种实现接口并手动注册的方式显得非常繁琐，你完全可以 使用 基于注解 的方式来实现 RequestMsgBodyConverter 的功能。\",\"以下为示例性的解析位置消息的 RequestMsgBodyConverter\",\"public class LocationUploadMsgBodyConverter2 implements RequestMsgBodyConverter<LocationUploadMsgBody> { @Override public Optional<LocationUploadMsgBody> convert2Entity(RequestMsgMetadata metadata) { byte[] bytes = metadata.getBodyBytes(); LocationUploadMsgBody body = new LocationUploadMsgBody(); body.setWarningFlag(intFromBytes(bytes, 0, 4)); body.setStatus(intFromBytes(bytes, 4, 4)); body.setLat(intFromBytes(bytes, 8, 4) * 1.0 / 100_0000); body.setLng(intFromBytes(bytes, 12, 4) * 1.0 / 100_0000); body.setHeight((short) intFromBytes(bytes, 16, 2)); body.setSpeed((short) intFromBytes(bytes, 18, 2)); body.setDirection((short) intFromBytes(bytes, 20, 2)); body.setTime(BcdOps.bytes2BcdString(bytes, 22, 6)); return Optional.of(body); } } \",\"注册自定义 RequestMsgBodyConverter\",\"@Configuration public class Jt808Config extends Jt808ServerConfigurationSupport { @Override public void configureMsgConverterMapping(MsgConverterMapping mapping) { super.configureMsgConverterMapping(mapping); // 手动将自定义处理器注册到 MsgConverterMapping mapping.registerConverter(Jt808MsgType.CLIENT_LOCATION_INFO_UPLOAD, new LocationUploadMsgBodyConverter2()); } } \"]},\"535\":{\"h\":\"基于注解实现\",\"t\":[\"传送门\",\"基于注解来实现 RequestMsgBodyConverter 的功能 \",\"传送门\",\"本小节的示例可以在 samples/jt-808-server-sample-customized 下找到对应代码。\"]},\"536\":{\"h\":\"消息处理器\",\"t\":[\"MsgHandler 负责处理经过 RequestMsgBodyConverter 转换之后的 请求体消息实体类。\",\"对于请求消息的处理完全是由 MsgHandler 接口来实现的。\",\"public interface MsgHandler<T extends RequestMsgBody> extends OrderedComponent { default Set<MsgType> getSupportedMsgTypes() { return Sets.newHashSet(); } void handleMsg(RequestMsgMetadata metadata, T body, Session session) throws IOException, InterruptedException; } \",\"MsgHandler\",\"自定义的消息处理器 必须 实现 MsgHandler 这个泛型接口\",\"当然，这种实现接口并手动注册的方式显得非常繁琐，你完全可以 使用 基于注解 的方式来实现 MsgHandler 的功能。\",\"消息处理完成后对客户端的响应也是一个 byte[] ，可以通过 handleMsg() 方法的 Session 参数中拿到 Netty 的 Channel，然后通过 Channel 发送给客户端。\"]},\"537\":{\"h\":\"手动实现并注册\"},\"538\":{\"h\":\"实现\",\"t\":[\"所以一般的消息处理步骤应该像下面这样：\",\"@Slf4j public class SampleMsgHandler implements MsgHandler<AuthRequestMsgBody> { byte SUCCESS = 0; byte AUTH_CODE_ERROR = 2; @Override public Set<MsgType> getSupportedMsgTypes() { return Collections.singleton(BuiltinJt808MsgType.CLIENT_AUTH); } @Override public void handleMsg(RequestMsgMetadata metadata, AuthRequestMsgBody body, Session session) throws IOException, InterruptedException { final String authCode = body.getAuthCode(); // 鉴权逻辑 final byte result = isValidAuthCode(authCode, session.getTerminalId()) ? SUCCESS : AUTH_CODE_ERROR; // 组装响应消息的字节数组(别忘了转义) final byte[] respMsgBody = this.encodeMsgBody(result, metadata, session); // 发送给客户端 this.send2Client(session.getChannel(), respMsgBody); } private byte[] encodeMsgBody(byte result, RequestMsgMetadata metadata, Session session) { // ... // 按文档格式组装字节数组 return new byte[0]; } private boolean isValidAuthCode(String authCode, String terminalId) { // ... // 具体鉴权逻辑 return true; } protected void send2Client(Channel channel, byte[] bytes) throws InterruptedException { final ChannelFuture future = channel.writeAndFlush(Unpooled.copiedBuffer(bytes)).sync(); if (!future.isSuccess()) { log.error(\\\"ERROR : 'send data to client:'\\\", future.cause()); } } } \",\"又或者像这样 \",\"继承 AbstractMsgHandler\",\"这里的 RespMsgBody.toBytes() 不用转义\",\"@Slf4j @BuiltinComponent public class AuthMsgHandler extends AbstractMsgHandler<AuthRequestMsgBody> { @Override public Set<MsgType> getSupportedMsgTypes() { return newHashSet(BuiltinJt808MsgType.CLIENT_AUTH); } @Override protected Optional<RespMsgBody> doProcess(RequestMsgMetadata metadata, AuthRequestMsgBody body, Session session) { log.debug(\\\"receive AuthMsg : {}\\\", body); boolean valid = authCodeValidator.validateAuthCode(session, metadata, body); if (valid) { return of(commonSuccessReply(metadata, BuiltinJt808MsgType.CLIENT_AUTH)); } return of(CommonReplyMsgBody.of(AUTH_CODE_ERROR, metadata.getHeader().getFlowId(), BuiltinJt808MsgType.CLIENT_AUTH)); } } \",\"以下为示例性的处理位置消息的 MsgHandler\",\"@Slf4j public class LocationInfoUploadMsgHandler extends AbstractMsgHandler<LocationUploadMsgBody> { @Override protected Optional<RespMsgBody> doProcess(RequestMsgMetadata metadata, LocationUploadMsgBody body, Session session) { log.info(\\\"{}\\\", body); return Optional.of(commonSuccessReply(metadata, BuiltinJt808MsgType.CLIENT_LOCATION_INFO_UPLOAD)); } } \"]},\"539\":{\"h\":\"注册自定义MsgHandler\",\"t\":[\"public class Jt808Config extends Jt808ServerConfigurationSupport { @Override public void configureMsgHandlerMapping(MsgHandlerMapping mapping) { super.configureMsgHandlerMapping(mapping); // 如果你在这里注册了自定义的鉴权消息处理器，那么AuthCodeValidator也无需提供了 // 此处也可以从Spring容器中获取bean来注入，不一定要手动new一个Handler注册 mapping.registerConverter(Jt808MsgType.CLIENT_LOCATION_INFO_UPLOAD, new LocationInfoUploadMsgHandler()); } } \"]},\"540\":{\"h\":\"基于注解实现\",\"t\":[\"传送门\",\"基于注解来实现MsgHandler的功能 \",\"传送门\",\"本小节示例可以在 samples/jt-808-server-sample-customized 找到相关代码。\"]},\"541\":{\"h\":\"消息类型\",\"t\":[\"提示\",\"各个厂商对808协议都是选择性的实现，同时还有自定义的消息类型。\",\"所以，并没有内置所有类型的消息，而是定义了一个 MsgType 接口以供用户自行扩展。\",\"建议实现接口的时候使用枚举\"]},\"542\":{\"h\":\"扩展MsgType\",\"t\":[\"@Getter @ToString public enum Jt808MsgType implements MsgType { CLIENT_AUTH(0x0102, \\\"终端鉴权\\\"), CLIENT_LOCATION_INFO_UPLOAD(0x0200, \\\"位置上报\\\"), ; private final int msgId; private final String desc; Jt808MsgType(int msgId, String desc) { this.msgId = msgId; this.desc = desc; } private static final Map<Integer, Jt808MsgType> mapping = new HashMap<>(values().length); static { for (Jt808MsgType type : values()) { mapping.put(type.msgId, type); } } @Override public Optional<MsgType> parseFromInt(int msgId) { return Optional.ofNullable(mapping.get(msgId)); } } \"]},\"543\":{\"h\":\"定制MsgTypeParser\",\"t\":[\"注意\",\"MsgTypeParser 的返回类型为 java.util.Optional<MsgType> 。\",\"即便是无法处理的消息也不要返回 null 而应该以 Optional.empty() 代替。\",\"此时会跳过这种未知类型的消息处理，并会在日志里打印 warn 级别的日志。\",\"@Configuration public class Jt808Config extends Jt808ServerConfigurationSupport { @Override public MsgTypeParser supplyMsgTypeParser() { return msgType -> { // 先使用自定义解析器 Optional<MsgType> type = Jt808MsgType.CLIENT_AUTH.parseFromInt(msgType); return type.isPresent() ? type // 自定义解析器无法解析,使用内置解析器 : BuiltinJt808MsgType.CLIENT_AUTH.parseFromInt(msgType); }; } } \",\"传送门\",\"本小节示例可以在 samples/jt-808-server-sample-customized 找到相关代码。\"]},\"544\":{\"h\":\"Netty相关\",\"t\":[\"传送门\",\"本小节示例可以在 samples/jt-808-server-sample-customized 找到相关代码。\",\"Netty相关配置需要继承 Jt808ServerConfigurationSupport 来覆盖默认逻辑。\",\"@Configuration public class Jt808Config extends Jt808ServerConfigurationSupport { @Override public Jt808ServerNettyConfigure jt808ServerNettyConfigure(HeatBeatHandler heatBeatHandler, Jt808ChannelHandlerAdapter jt808ChannelHandlerAdapter) { return new DemoJt808ServerNettyConfigure(heatBeatHandler, jt808ChannelHandlerAdapter); } } \",\"传送门\",\"本小节示例可以在 samples/jt-808-server-sample-customized 找到相关代码。\"]},\"545\":{\"h\":\"Session相关\",\"t\":[\"传送门\",\"本小节示例可以在 samples/jt-808-server-sample-customized 找到相关代码。\"]},\"546\":{\"h\":\"Jt808SessionManager\",\"t\":[\"该组件用来管理每个终端的 TCP 连接。\",\"要定制 Jt808SessionManager 只需自己声明一个 Jt808SessionManager 类型的Bean即可。\",\"public class MySessionManager implements Jt808SessionManager { // ...... } \",\"@Configuration public class CustomizedDemoJt808Config extends Jt808ServerConfigurationSupport { @Override public Jt808SessionManager supplyJt808SessionManager() { return MySessionManager.getInstance(); } } \"]},\"547\":{\"h\":\"Jt808SessionManagerEventListener\",\"t\":[\"该组件可以监听 Jt808Session 的 添加、移除、关闭 事件。\",\"@Slf4j public class MyJt808SessionManagerEventListener implements Jt808SessionManagerEventListener { @Override public void onSessionAdd(@Nullable Jt808Session session) { if (session == null) { return; } log.info(\\\"[SessionAdd] terminalId = {}, sessionId = {}\\\", session.getTerminalId(), session.getId()); } } \",\"@Configuration public class CustomizedDemoJt808Config extends Jt808ServerConfigurationSupport { @Override public Jt808SessionManagerEventListener supplyJt808SessionManagerEventListener() { return new MyJt808SessionManagerEventListener(); } } \",\"传送门\",\"本小节示例可以在 samples/jt-808-server-sample-customized 找到相关代码。\"]},\"548\":{\"h\":\"TerminalValidator\",\"t\":[\"鸣谢\",\"该组件由 anotherMe17 贡献。\",\"非常感谢老哥 anotherMe17 的 Pull request#19 。\",\"@Configuration public class Jt808Configuration extends Jt808ServerConfigurationSupport { // [非必须配置] -- 可替换内置 TerminalValidator @Override public TerminalValidator terminalValidator() { return new TerminalValidator() { @Override public boolean validateTerminal(RequestMsgMetadata metadata) { return true; } @Override public boolean needValidate(RequestMsgMetadata metadata, Integer msgId) { return true; } }; } } \"]},\"549\":{\"h\":\"深入\",\"t\":[\"提示\",\"本小节内容如下：\",\"消息处理流程\",\"Aware接口\"]},\"550\":{\"h\":\"Aware接口\",\"t\":[\"首先声明这种 Aware 接口是从 Spring 中借鉴(抄袭)的 😂😂😂😂😂😂。\",\"所以你要是知道 Spring 中的诸如 ApplicationContextAware、EnvironmentAware 等就几乎没必要看本小节了。\"]},\"551\":{\"h\":\"为什么会提供？\",\"t\":[\"在用注解解析映射请求报文到实体类的时候，字段长度等的计算可能会依赖于消息头中的一些属性。\",\"所以在基于注解的实体类映射时，你可以给实体类实现这些接口以自动注入一些其他信息。\",\"注意\",\"目前为止，这些Aware接口只能在 时用于 请求体消息实体类 中。\"]},\"552\":{\"h\":\"RequestMsgHeaderAware\",\"t\":[\"每次消息处理时为实体类注入 RequestMsgHeader 实例。\",\"public interface RequestMsgHeaderAware { void setRequestMsgHeader(RequestMsgHeader header); } \"]},\"553\":{\"h\":\"RequestMsgMetadataAware\",\"t\":[\"每次消息处理时为实体类注入 RequestMsgMetadata 实例。\",\"public interface RequestMsgMetadataAware { void setRequestMsgMetadata(RequestMsgMetadata metadata); } \"]},\"554\":{\"h\":\"BytesEncoderAware\",\"t\":[\"提示\",\"有关 BytesEncoder 的内容，。\",\"MsgHandler 中可以实现该接口以注入 BytesEncoder 给处理器实例。\",\"当然如果是自定义的 MsgHandler（接口实现类），完全可以使用 Spring 的依赖注入的方式来使用 BytesEncoder 实例。\",\"内置的 MsgHandler 都实现了该接口。\",\"public interface BytesEncoderAware { void setBytesEncoder(BytesEncoder bytesEncoder); } \"]},\"555\":{\"h\":\"组件顺序\",\"t\":[\"从 协议入门 和 注解驱动开发 的文档不难看出以下问题：\"]},\"556\":{\"h\":\"请求消息映射的实现\",\"t\":[\"请求消息映射的实现方式：\",\"手动实现并注册 RequestMsgBodyConverter\",\"基于 @Jt808ReqMsgBody 注解方式处理\",\"内置了 AuthRequestMsgBodyConverter\"]},\"557\":{\"h\":\"请求消息的业务处理的实现\",\"t\":[\"请求消息的业务处理实现方式：\",\"手动实现并注册 MsgHandler 接口\",\"基于 @Jt808RequestMsgHandler 注解方式处理\",\"内置了 AuthMsgHandler\"]},\"558\":{\"h\":\"引出的问题\",\"t\":[\"以 将请求消息映射为实体类 的 RequestMsgBodyConverter 为例，假如：\",\"jt808.entity-scan.enable-builtin-entity = true\",\"至少内置了鉴权消息的实体类\",\"自定义并注册了 RequestMsgBodyConverter 的实现类\",\"同时扫描了 @Jt808ReqMsgBody 修饰的请求消息体实体类\",\"？？？\",\"那么此时到底由谁去处理 byte[] -> 请求消息体实体类 的映射功能呢？？？\",\"像处理器链一样逐个往下调用谁能处理就谁处理，否则直接抛到下游？ \",\"实现类多了有点头大，实现也有点麻烦。\",\"所以此处不按这种方式处理\",\"按优先级找一个组件来处理？ \",\"个人认为一种消息由一个组件来处理就够了\",\"如果处理逻辑太复杂，可以在单个组件内调用其他专门的复杂逻辑处理流程\",\"所以此处选择了这种优先级的处理方式，相同功能的组件只会按照优先级注册其仅注册一个\",\"所以提供了一个 io.github.hylexus.jt808.support.OrderedComponent 接口，来处理组件注册时的 优先级(相互覆盖) 问题。\"]},\"559\":{\"h\":\"OrderedComponent\",\"t\":[\"以下是 OrderedComponent 接口的声明：\",\"public interface OrderedComponent { int DEFAULT_ORDER = 0; int ANNOTATION_BASED_DEV_COMPONENT_ORDER = 100; int BUILTIN_COMPONENT_ORDER = 200; default int getOrder() { return DEFAULT_ORDER; } default boolean shouldBeReplacedBy(OrderedComponent other) { // 数字越小优先级越高 // 数字小的覆盖数字大的 return this.getOrder() > other.getOrder(); } } \",\"内置的 OrderedComponent 实现类至少有以下几个：\",\"由以上源码不难看出组件的优先级问题：\",\"相同功能的组件只会 按照优先级注册其仅注册一个 ：\",\"手动实现并注册的 MsgHandler 和 RequestMsgBodyConverter 优先级最高\",\"基于注解实现的 MsgHandler 和 RequestMsgBodyConverter 次之\",\"内置组件的优先级最低\"]},\"560\":{\"h\":\"消息处理流程\"},\"561\":{\"h\":\"组件关系图\",\"t\":[\"组件关系图源文件位于： jt-808.graffle\"]},\"562\":{\"h\":\"时序图\"},\"563\":{\"h\":\"MsgDispatcher\"},\"564\":{\"h\":\"MsgConsumer\"},\"565\":{\"h\":\"苏标扩展(v2.1.4)\",\"t\":[\"提示\",\"苏标扩展协议是 \"]},\"566\":{\"h\":\"配置项\",\"t\":[\"参考 。\"]},\"567\":{\"h\":\"附件服务器\",\"t\":[\"下面是对几个特殊扩展消息 0x1210、0x1211、0x1212、0x30316364 的示例性处理流程：\",\" @Slf4j @Component @Jt808RequestHandler public class AttachmentFileHandler { private final AttachmentFileService attachmentFileService; // <terminalId, <fileName, AttachmentItem>> // 只是个示例而已 看你需求自己改造 private final Cache<String, Map<String, BuiltinMsg1210Alias.AttachmentItem>> attachmentItemCache = Caffeine.newBuilder() .expireAfterWrite(Duration.ofMinutes(5)) .build(); public AttachmentFileHandler(AttachmentFileService attachmentFileService) { this.attachmentFileService = attachmentFileService; } @Jt808RequestHandlerMapping(msgType = 0x1210, versions = Jt808ProtocolVersion.AUTO_DETECTION) public BuiltinServerCommonReplyMsg processMsg0x1210(Jt808Request request, BuiltinMsg1210Alias body) { log.info(\\\"0x1210 ==> {} {}\\\", body.getAttachmentItemList().size(), body); warnLogIfNecessary(request, \\\"0x1210 不应该由指令服务器对应的端口处理\\\"); final Map<String, BuiltinMsg1210Alias.AttachmentItem> itemMap = this.attachmentItemCache.get(request.session().terminalId(), key -> new HashMap<>()); for (final BuiltinMsg1210Alias.AttachmentItem item : body.getAttachmentItemList()) { itemMap.put(item.getFileName().trim(), item.setGroup(body)); } return BuiltinServerCommonReplyMsg.success(request.header().msgId(), request.flowId()); } @Jt808RequestHandlerMapping(msgType = 0x1211, versions = Jt808ProtocolVersion.AUTO_DETECTION) public BuiltinServerCommonReplyMsg processMsg0x1211(Jt808Request request, BuiltinMsg1211Alias body) { log.info(\\\"0x1211 ==> {}\\\", body); warnLogIfNecessary(request, \\\"0x1211 不应该由指令服务器对应的端口处理\\\"); return BuiltinServerCommonReplyMsg.success(request.header().msgId(), request.flowId()); } @Jt808RequestHandlerMapping(msgType = 0x1212, versions = Jt808ProtocolVersion.AUTO_DETECTION) public BuiltinMsg9212Alias processMsg0x1212(Jt808Request request, BuiltinMsg1212Alias reqBody) { log.info(\\\"0x1211 ==> {}\\\", reqBody); warnLogIfNecessary(request, \\\"0x1212 不应该由指令服务器对应的端口处理\\\"); final BuiltinMsg9212Alias resp = new BuiltinMsg9212Alias(); resp.setFileNameLength(reqBody.getFileNameLength()); resp.setFileName(reqBody.getFileName()); resp.setFileType(reqBody.getFileType()); // 0x00：完成 // 0x01：需要补传 resp.setUploadResult((byte) 0x00); resp.setPackageCountToReTransmit((short) 0); resp.setRetransmitItemList(Collections.emptyList()); return resp; } /** * 这里对应的是苏标附件上传的码流: 0x31326364(并不是 1078 协议中的码流) * <p> * 在 {@link SimpleAttachmentJt808RequestProcessor#simulateJt808Request(ByteBuf, Jt808Session)} 中将苏标码流上传的报文模拟成了普通的 808 报文 * * @see SimpleAttachmentJt808RequestProcessor#simulateJt808Request(ByteBuf, Jt808Session) */ // 这里是对应的文件上传的码流 @Jt808RequestHandlerMapping(msgType = 0x30316364) public void processMsg30316364(Jt808Request request, BuiltinMsg30316364Alias body, @Nullable Jt808Session session) { // 这里的示例都是随便瞎写的 存储到本地磁盘了 // 实际场景中看你自己需求 比如存储到 OSS、AWS、Minio…… if (request.session() == null || session == null) { log.warn(\\\"session == null, 附件上传之前没有没有发送 0x1210,0x1211 消息???\\\"); return; } log.info(\\\"0x30316364 ==> {} -- {} -- {}\\\", body.getFileName().trim(), body.getDataOffset(), body.getDataLength()); // 这个 if 就是用来调试的 没啥其他作用 删掉就行 if (request.session() != session) { throw new IllegalStateException(\\\"代码不应该执行到这个分支\\\"); } Optional.ofNullable(attachmentItemCache.getIfPresent(session.terminalId())).ifPresent((Map<String, BuiltinMsg1210Alias.AttachmentItem> itemMap) -> { final BuiltinMsg1210Alias.AttachmentItem item = itemMap.get(body.getFileName().trim()); if (item == null) { log.error(\\\"收到未知附件上传消息: {}\\\", body); return; } this.attachmentFileService.writeDataFragment(session, body, item.getGroup()); }); } private void warnLogIfNecessary(Jt808Request request, String msg) { if (request.session() == null) { return; } if (request.session().role() == Jt808Session.Role.INSTRUCTION) { log.warn(msg); } } } \",\"下面是示例性的文件处理流程：\",\"提示\",\"这里只是示例性的将文件存储到了本地磁盘中。\",\"实际使用时你应该将文件存储到其他存储介质，比如 OSS、AWS、Minio 等。\",\" @Service public class AttachmentFileService { private final Jt808AppProps appProps; public AttachmentFileService(Jt808AppProps appProps) { this.appProps = appProps; } public void writeDataFragment(Jt808Session session, BuiltinMsg30316364Alias body, BuiltinMsg1210Alias group) { final AlarmIdentifierAlias alarmIdentifier = group.getAlarmIdentifier(); final LocalDateTime localDateTime = alarmIdentifier.getTime(); // 这里就瞎写了一个路径 看你需求随便改 final String filePath = appProps.getAttachment().getTemporaryPath() + File.separator + DateTimeFormatter.ofPattern(\\\"yyyyMMddHH\\\").format(localDateTime) + File.separator + session.terminalId() + File.separator + group.getMessageType() + File.separator // + group.getAlarmNo() + File.separator + DateTimeFormatter.ofPattern(\\\"yyyyMMddHHmmss\\\").format(localDateTime) + \\\"-\\\" + group.getAlarmNo() + File.separator + body.getFileName().trim(); final File tempFile = new File(filePath); if (!tempFile.exists() && !tempFile.getParentFile().exists()) { if (!tempFile.getParentFile().mkdirs()) { throw new RuntimeException(\\\"新建文件失败:\\\" + tempFile); } } try (final RandomAccessFile file = new RandomAccessFile(filePath, \\\"rws\\\")) { file.seek(body.getDataOffset()); file.write(body.getData(), 0, (int) body.getDataLength()); } catch (IOException e) { throw new RuntimeException(e); } } } \"]},\"568\":{\"h\":\"\",\"t\":[\"404 Not Found\"]},\"569\":{\"h\":\"Release Notes\"},\"570\":{\"h\":\"V2\"},\"571\":{\"h\":\"808\"},\"572\":{\"h\":\"V1\"},\"573\":{\"h\":\"Jt 808\"},\"574\":{\"h\":\"Jt 808\"},\"575\":{\"h\":\"Protocol Extension\"}},\"dirtCount\":0,\"index\":[[\"看你需求随便改\",{\"1\":{\"567\":1}}],[\"看你需求自己改造\",{\"1\":{\"567\":1}}],[\"删掉就行\",{\"1\":{\"567\":1}}],[\"删除\",{\"1\":{\"394\":1}}],[\"删除了\",{\"1\":{\"121\":2,\"409\":2}}],[\"存储到本地磁盘了\",{\"1\":{\"567\":1}}],[\"存在跨线程资源回收问题\",{\"1\":{\"160\":1}}],[\"次之\",{\"1\":{\"559\":1}}],[\"数字小的覆盖数字大的\",{\"1\":{\"559\":1}}],[\"数字越小优先级越高\",{\"1\":{\"559\":1}}],[\"数据库中无该终端\",{\"1\":{\"316\":1,\"354\":1,\"357\":1,\"432\":1}}],[\"数据库中无该车辆\",{\"1\":{\"316\":1,\"354\":1,\"357\":1,\"432\":1}}],[\"数据项个数\",{\"1\":{\"290\":1}}],[\"数据转换方式要更简单一些\",{\"1\":{\"246\":1}}],[\"数据类型\",{\"0\":{\"478\":1},\"1\":{\"303\":1,\"314\":1,\"427\":1,\"430\":1,\"479\":1,\"518\":1,\"528\":1}}],[\"数据类型转换\",{\"0\":{\"244\":1,\"265\":1}}],[\"数据类型的映射关系\",{\"1\":{\"133\":1}}],[\"数据加密方式位\",{\"1\":{\"382\":1}}],[\"数据加密方式\",{\"1\":{\"136\":1,\"140\":1,\"382\":2,\"482\":1}}],[\"问题\",{\"1\":{\"558\":1}}],[\"像处理器链一样逐个往下调用谁能处理就谁处理\",{\"1\":{\"558\":1}}],[\"像下面这种处理方式\",{\"1\":{\"522\":1}}],[\"假如\",{\"1\":{\"558\":1}}],[\"引出的问题\",{\"0\":{\"558\":1}}],[\"引入为\",{\"1\":{\"485\":1}}],[\"引入\",{\"1\":{\"438\":2}}],[\"引入的别名\",{\"1\":{\"422\":1}}],[\"引入了\",{\"1\":{\"149\":1}}],[\"完成\",{\"1\":{\"567\":1}}],[\"完全可以使用\",{\"1\":{\"554\":1}}],[\"完善\",{\"1\":{\"84\":1,\"103\":1}}],[\"首先声明这种\",{\"1\":{\"550\":1}}],[\"贡献\",{\"1\":{\"548\":1}}],[\"鸣谢\",{\"1\":{\"548\":1}}],[\"移除\",{\"1\":{\"547\":1}}],[\"移除事件\",{\"1\":{\"394\":1}}],[\"那么此时到底由谁去处理\",{\"1\":{\"558\":1}}],[\"那么authcodevalidator也无需提供了\",{\"1\":{\"539\":1}}],[\"那么你也\",{\"1\":{\"529\":1}}],[\"那么你不需要做任何改动\",{\"1\":{\"411\":1}}],[\"继承\",{\"1\":{\"538\":1}}],[\"继承过来的\",{\"1\":{\"225\":1}}],[\"又或者像这样\",{\"1\":{\"538\":1}}],[\"别忘了转义\",{\"1\":{\"538\":1}}],[\"别名\",{\"1\":{\"107\":1,\"230\":1}}],[\"组装响应消息的字节数组\",{\"1\":{\"538\":1}}],[\"组件关系图源文件位于\",{\"1\":{\"561\":1}}],[\"组件关系图\",{\"0\":{\"561\":1}}],[\"组件顺序\",{\"0\":{\"555\":1}}],[\"组件统计信息\",{\"1\":{\"468\":1,\"487\":1}}],[\"组件\",{\"1\":{\"168\":1}}],[\"制造商\",{\"1\":{\"532\":1}}],[\"制造商id\",{\"1\":{\"305\":1,\"429\":2}}],[\"市县域\",{\"1\":{\"532\":1}}],[\"找到相关代码\",{\"1\":{\"530\":1,\"540\":1,\"543\":1,\"544\":2,\"545\":1,\"547\":1}}],[\"客户自定义给字段的编码实现\",{\"1\":{\"528\":1}}],[\"客户端对该\",{\"1\":{\"515\":1}}],[\"客户端请求消息中的字节流最终会解析到\",{\"1\":{\"472\":1}}],[\"客户端上报\",{\"1\":{\"319\":1}}],[\"客户端\",{\"1\":{\"13\":1,\"469\":1}}],[\"嵌套的类型\",{\"1\":{\"528\":1}}],[\"嵌套类型\",{\"1\":{\"287\":4}}],[\"嵌套类型丢失数据\",{\"1\":{\"51\":1}}],[\"值越小越先编码\",{\"1\":{\"528\":1}}],[\"值越小优先级越高\",{\"1\":{\"314\":1}}],[\"常用的\",{\"1\":{\"523\":1}}],[\"常见的报文\",{\"1\":{\"492\":1}}],[\"适用于类似位置附加消息的结构\",{\"1\":{\"521\":1}}],[\"取值示例\",{\"1\":{\"517\":1,\"518\":1,\"519\":1,\"520\":1,\"521\":2,\"527\":1,\"528\":1}}],[\"取不到值\",{\"1\":{\"319\":1}}],[\"交给spring来管理\",{\"1\":{\"510\":1}}],[\"锁状态字段的说明\",{\"1\":{\"505\":1}}],[\"切记\",{\"1\":{\"505\":1}}],[\"仅仅用一个类无法定义确切类型\",{\"1\":{\"504\":1}}],[\"仅仅用一个类是无法定义确切类型\",{\"1\":{\"504\":1}}],[\"仅仅是消息体的区别\",{\"1\":{\"18\":1}}],[\"另外如果附加项内部有嵌套的时候也不好处理\",{\"1\":{\"503\":1}}],[\"另外拜托群里的各位大佬能解答一下新人的疑问\",{\"1\":{\"4\":1}}],[\"还是很方便的🤣\",{\"1\":{\"529\":1}}],[\"还可以返回\",{\"1\":{\"525\":1}}],[\"还好附加项报文的格式也是有迹可循的\",{\"1\":{\"503\":1}}],[\"还不如直接交给\",{\"1\":{\"297\":1}}],[\"根据文档\",{\"1\":{\"503\":1}}],[\"根据安装后终端自身的手机号转换\",{\"1\":{\"136\":1,\"140\":1,\"482\":1}}],[\"精确到百万分之一度\",{\"1\":{\"500\":1}}],[\"乘以10的6次方\",{\"1\":{\"500\":1}}],[\"西经\",{\"1\":{\"497\":1}}],[\"东经\",{\"1\":{\"497\":1}}],[\"永远返回true的仅仅用于调试\",{\"1\":{\"487\":1}}],[\"永不为空\",{\"1\":{\"315\":1}}],[\"整体是一个\",{\"1\":{\"503\":1}}],[\"整体消息结构和\",{\"1\":{\"137\":1}}],[\"整个报文中最复杂也就是消息头的处理了\",{\"1\":{\"482\":1}}],[\"未启用内置的\",{\"1\":{\"529\":1}}],[\"未定义\",{\"1\":{\"499\":1}}],[\"未知类型\",{\"1\":{\"480\":1}}],[\"未释放空消息的问题\",{\"1\":{\"125\":1}}],[\"置空\",{\"1\":{\"479\":1,\"480\":1}}],[\"置为\",{\"1\":{\"415\":1}}],[\"若无数据\",{\"1\":{\"479\":1,\"480\":1}}],[\"码\",{\"1\":{\"479\":1,\"480\":1}}],[\"双字\",{\"1\":{\"479\":1,\"480\":1}}],[\"描述\",{\"1\":{\"527\":1}}],[\"描述及要求\",{\"1\":{\"479\":1}}],[\"描述信息\",{\"1\":{\"299\":1,\"311\":1}}],[\"待发送给客户端的数据\",{\"1\":{\"474\":1}}],[\"与\",{\"1\":{\"473\":1}}],[\"原始报文\",{\"1\":{\"472\":2}}],[\"端口为\",{\"1\":{\"468\":1}}],[\"启用自动配置\",{\"1\":{\"486\":2}}],[\"启用后\",{\"1\":{\"201\":1,\"206\":1,\"210\":1}}],[\"启动\",{\"1\":{\"468\":1,\"487\":1}}],[\"启动项目\",{\"0\":{\"468\":1}}],[\"添加\",{\"1\":{\"547\":1}}],[\"添加依赖\",{\"0\":{\"463\":1,\"485\":1}}],[\"添加了\",{\"1\":{\"115\":1,\"404\":1,\"406\":1}}],[\"工程\",{\"1\":{\"462\":2,\"484\":2}}],[\"工具发送\",{\"1\":{\"7\":1}}],[\"创建一个空的\",{\"1\":{\"462\":1,\"484\":1}}],[\"创建工程\",{\"0\":{\"462\":1,\"484\":1}}],[\"传送门\",{\"1\":{\"461\":1,\"462\":1,\"470\":1,\"483\":1,\"484\":1,\"488\":1,\"491\":1,\"493\":1,\"505\":1,\"506\":1,\"510\":1,\"511\":1,\"515\":1,\"529\":1,\"530\":1,\"535\":2,\"540\":2,\"543\":1,\"544\":2,\"545\":1,\"547\":1}}],[\"传统方式\",{\"0\":{\"265\":1}}],[\"快速初始化一个\",{\"1\":{\"462\":1,\"484\":1}}],[\"快速开始\",{\"0\":{\"461\":1,\"483\":1}}],[\"快捷方式\",{\"1\":{\"226\":1,\"227\":1}}],[\"每个硬件厂商实现808协议的时候对转义的处理可能略有不同\",{\"1\":{\"530\":1}}],[\"每个\",{\"1\":{\"503\":1}}],[\"每个项目都应该提供一个自己的\",{\"1\":{\"458\":1,\"459\":1}}],[\"每次消息处理时为实体类注入\",{\"1\":{\"399\":1,\"400\":1,\"552\":1,\"553\":1}}],[\"点击查看\",{\"1\":{\"458\":1,\"459\":1}}],[\"点击展开\",{\"1\":{\"389\":1}}],[\"建议实现接口的时候使用枚举\",{\"1\":{\"458\":1,\"541\":1}}],[\"建议使用\",{\"1\":{\"188\":1,\"222\":3}}],[\"各个厂商对808协议都是选择性的实现\",{\"1\":{\"541\":1}}],[\"各个厂商对\",{\"1\":{\"458\":1}}],[\"各个模块的\",{\"1\":{\"441\":1}}],[\"∈\",{\"1\":{\"454\":3,\"455\":3}}],[\"至少内置了鉴权消息的实体类\",{\"1\":{\"558\":1}}],[\"至少在\",{\"1\":{\"448\":1}}],[\"至此\",{\"1\":{\"468\":1,\"487\":1}}],[\"至于\",{\"1\":{\"453\":1}}],[\"外\",{\"1\":{\"453\":1,\"525\":1}}],[\"满足\",{\"1\":{\"450\":1}}],[\"见下表\",{\"1\":{\"449\":1}}],[\"见下面表格\",{\"1\":{\"441\":1}}],[\"效果如下\",{\"1\":{\"446\":1}}],[\"命令\",{\"1\":{\"446\":1}}],[\"命令行编译\",{\"0\":{\"444\":1}}],[\"先使用自定义解析器\",{\"1\":{\"543\":1}}],[\"先执行\",{\"1\":{\"446\":1}}],[\"先委托内置的\",{\"1\":{\"236\":1}}],[\"导入后\",{\"1\":{\"446\":1}}],[\"导入eclipse\",{\"0\":{\"446\":1}}],[\"导入idea\",{\"0\":{\"445\":1}}],[\"打开\",{\"1\":{\"445\":1}}],[\"插件\",{\"1\":{\"445\":1,\"446\":1}}],[\"装好\",{\"1\":{\"445\":1,\"446\":1}}],[\"~\",{\"1\":{\"444\":2}}],[\"语法不兼容\",{\"1\":{\"441\":1}}],[\"更低的版本\",{\"1\":{\"441\":1}}],[\"降级之后可能有一些\",{\"1\":{\"441\":1}}],[\"降级\",{\"1\":{\"441\":1}}],[\"虽然源码要求的\",{\"1\":{\"441\":1}}],[\"虽然有这个\",{\"1\":{\"225\":1}}],[\"必须\",{\"1\":{\"534\":1,\"536\":1}}],[\"必须实现标记接口\",{\"1\":{\"517\":1}}],[\"必须满足\",{\"1\":{\"450\":2}}],[\"必须使用\",{\"1\":{\"440\":1}}],[\"必须是一致的\",{\"1\":{\"319\":1}}],[\"释放了\",{\"1\":{\"435\":1}}],[\"块中使用\",{\"1\":{\"435\":1,\"436\":1}}],[\"已经实现了jt808flowidgenerator\",{\"1\":{\"434\":1,\"435\":1}}],[\"失败\",{\"1\":{\"434\":1,\"435\":1,\"436\":1,\"523\":1,\"526\":1}}],[\"确认\",{\"1\":{\"434\":1,\"435\":1,\"436\":1,\"523\":1,\"526\":1}}],[\"结构\",{\"1\":{\"503\":1}}],[\"结果\",{\"1\":{\"434\":1,\"435\":1,\"436\":1,\"523\":1,\"526\":1}}],[\"结尾的示例是\",{\"1\":{\"133\":1,\"295\":1}}],[\"应答id\",{\"1\":{\"434\":1,\"435\":1,\"436\":1,\"523\":1,\"526\":1}}],[\"应答流水号\",{\"1\":{\"434\":1,\"435\":1,\"436\":1,\"523\":1,\"526\":1}}],[\"应该先转换为数字\",{\"1\":{\"501\":1}}],[\"应该和初始化传入的是同一个对象\",{\"1\":{\"431\":1}}],[\"应该和具体的硬件实现相关\",{\"1\":{\"382\":1}}],[\"应该在恰当的时机释放被包装的\",{\"1\":{\"428\":1,\"431\":1}}],[\"应该回复\",{\"1\":{\"96\":1}}],[\"多次调用\",{\"1\":{\"434\":1,\"435\":1,\"436\":1}}],[\"多个\",{\"1\":{\"379\":1}}],[\"多个以逗号分隔\",{\"1\":{\"203\":1,\"207\":1,\"211\":1}}],[\"读取完成之后\",{\"1\":{\"428\":1}}],[\"读取的依然是\",{\"1\":{\"229\":1,\"230\":1}}],[\"除以10^6\",{\"1\":{\"501\":1}}],[\"除以上两种情况之外\",{\"1\":{\"424\":1}}],[\"除了直接返回\",{\"1\":{\"525\":1}}],[\"除了\",{\"1\":{\"453\":1}}],[\"除了使用注解\",{\"1\":{\"429\":1,\"432\":1}}],[\"除了使用\",{\"1\":{\"429\":1,\"432\":1}}],[\"除了可以使用\",{\"1\":{\"418\":1,\"422\":1}}],[\"前提是你没有做额外的\",{\"1\":{\"424\":2}}],[\"底层由\",{\"1\":{\"509\":1}}],[\"底层是个\",{\"1\":{\"417\":2}}],[\"底层的\",{\"1\":{\"229\":1,\"230\":1}}],[\"zzz\",{\"1\":{\"419\":1,\"423\":1}}],[\"z\",{\"1\":{\"415\":3}}],[\"简单示例\",{\"0\":{\"428\":1,\"431\":1}}],[\"简单使用\",{\"0\":{\"415\":1}}],[\"简化\",{\"1\":{\"229\":1}}],[\"简化代码\",{\"1\":{\"225\":1}}],[\"进出区域\",{\"1\":{\"414\":1}}],[\"进出路线\",{\"1\":{\"414\":1}}],[\"进行下一步\",{\"1\":{\"389\":1}}],[\"进行分包发送处理\",{\"1\":{\"136\":1,\"140\":1,\"382\":2,\"482\":1}}],[\"场景示例\",{\"0\":{\"414\":1,\"418\":1,\"422\":1}}],[\"个人认为一种消息由一个组件来处理就够了\",{\"1\":{\"558\":1}}],[\"个人感觉取值不是很方便\",{\"1\":{\"503\":1}}],[\"个\",{\"1\":{\"413\":1,\"414\":2,\"415\":6}}],[\"个序列号\",{\"1\":{\"395\":1}}],[\"反之\",{\"1\":{\"411\":1}}],[\"反序列化string\",{\"0\":{\"263\":1,\"282\":1}}],[\"反序列化bcd\",{\"0\":{\"260\":1,\"279\":1}}],[\"反序列化bytes\",{\"0\":{\"251\":1,\"270\":1}}],[\"反序列化byte\",{\"0\":{\"248\":1,\"267\":1}}],[\"反序列化dword\",{\"0\":{\"257\":1,\"276\":1}}],[\"反序列化word\",{\"0\":{\"254\":1,\"273\":1}}],[\"反序列化为\",{\"1\":{\"107\":1}}],[\"设计不太合理\",{\"1\":{\"410\":1}}],[\"设置终端参数\",{\"1\":{\"312\":1,\"515\":1}}],[\"变更原因\",{\"0\":{\"410\":1}}],[\"变更如下\",{\"1\":{\"115\":1,\"404\":1}}],[\"两个\",{\"1\":{\"404\":1,\"452\":1}}],[\"两个属性支持\",{\"1\":{\"304\":1}}],[\"两个属性其实在一定角度来看可以看成一回事\",{\"1\":{\"225\":1}}],[\"替换流水号生成策略\",{\"1\":{\"395\":2}}],[\"替换\",{\"1\":{\"395\":1}}],[\"替换内置请求消息分包暂存器\",{\"1\":{\"396\":1}}],[\"替换内置响应消息分包暂存器\",{\"1\":{\"396\":1}}],[\"替换内置业务线程池\",{\"0\":{\"374\":1}}],[\"替换内置实现\",{\"1\":{\"371\":1}}],[\"替换内置的\",{\"1\":{\"370\":2,\"371\":2,\"393\":2}}],[\"替换内置的转义等逻辑\",{\"1\":{\"369\":2}}],[\"替换内置组件不再需要继承指定的类\",{\"1\":{\"16\":1}}],[\"流水号\",{\"1\":{\"473\":2,\"532\":1}}],[\"流水号生成器\",{\"1\":{\"434\":1,\"435\":1}}],[\"流水号个数\",{\"1\":{\"395\":1}}],[\"流水号的生成策略\",{\"1\":{\"395\":1}}],[\"递增\",{\"1\":{\"395\":1}}],[\"连续将\",{\"1\":{\"415\":1}}],[\"连续不间断\",{\"1\":{\"395\":1}}],[\"连接\",{\"1\":{\"393\":1,\"546\":1}}],[\"声明若干个\",{\"1\":{\"394\":1}}],[\"事件\",{\"1\":{\"394\":1,\"547\":1}}],[\"想要监听\",{\"1\":{\"394\":1}}],[\"阻塞的操作\",{\"1\":{\"394\":3}}],[\"关\",{\"1\":{\"497\":1}}],[\"关于位置附加项的解析\",{\"0\":{\"503\":1}}],[\"关于经纬度的解析\",{\"0\":{\"500\":1}}],[\"关于status字段的解析\",{\"0\":{\"496\":1}}],[\"关于我们\",{\"0\":{\"3\":1}}],[\"关闭原因\",{\"1\":{\"394\":1}}],[\"关闭事件\",{\"1\":{\"394\":1}}],[\"关闭\",{\"1\":{\"394\":1,\"547\":1}}],[\"统计请求次数的示例\",{\"1\":{\"390\":1}}],[\"回复客户端的消息也可以使用\",{\"1\":{\"433\":1}}],[\"回复给客户端的报文\",{\"1\":{\"389\":1}}],[\"回复终端\",{\"1\":{\"389\":1}}],[\"尚未解码的原始报文\",{\"1\":{\"389\":1}}],[\"尚未除以\",{\"1\":{\"246\":1,\"495\":2,\"501\":1}}],[\"拦截请求的处理流程\",{\"1\":{\"389\":1}}],[\"加一个\",{\"1\":{\"510\":1}}],[\"加入到\",{\"1\":{\"393\":1,\"396\":1}}],[\"加入自己的逻辑\",{\"1\":{\"389\":1}}],[\"加密\",{\"0\":{\"383\":1}}],[\"加密方式的判断\",{\"0\":{\"382\":1}}],[\"合并后的请求\",{\"1\":{\"389\":1}}],[\"合并消息重新投递出去待处理器处理\",{\"1\":{\"348\":1}}],[\"再次\",{\"1\":{\"389\":1}}],[\"直到所有子包都到达之后自动合并请求\",{\"1\":{\"389\":1}}],[\"直接实现\",{\"1\":{\"489\":1}}],[\"直接引\",{\"1\":{\"438\":1}}],[\"直接将实现了\",{\"1\":{\"342\":1}}],[\"直接省去了\",{\"1\":{\"341\":1}}],[\"直接返回respmsgbody\",{\"0\":{\"523\":1}}],[\"直接返回\",{\"1\":{\"322\":1}}],[\"直接或间接\",{\"1\":{\"149\":1}}],[\"里实现了\",{\"1\":{\"523\":1}}],[\"里\",{\"1\":{\"472\":1}}],[\"里暂存分包\",{\"1\":{\"389\":1}}],[\"里程\",{\"1\":{\"287\":1}}],[\"出去\",{\"1\":{\"389\":1}}],[\"出站\",{\"1\":{\"319\":1}}],[\"分发给处理器链\",{\"1\":{\"389\":1}}],[\"分发\",{\"1\":{\"389\":1}}],[\"分包相关\",{\"0\":{\"396\":1}}],[\"分包的阈值可以手动指定\",{\"1\":{\"359\":1}}],[\"分包方式\",{\"0\":{\"359\":1}}],[\"分包补传\",{\"0\":{\"349\":1,\"363\":1},\"1\":{\"364\":1}}],[\"分包请求也已经自动合并\",{\"1\":{\"379\":1}}],[\"分包请求\",{\"1\":{\"346\":1}}],[\"分包请求到达时回调该方法\",{\"1\":{\"346\":1}}],[\"分包暂存器发现所有子包都到达了\",{\"1\":{\"348\":1}}],[\"分包暂存器\",{\"0\":{\"346\":1,\"364\":1},\"1\":{\"345\":1}}],[\"分包合并\",{\"0\":{\"345\":1}}],[\"分包\",{\"1\":{\"136\":1,\"140\":1,\"382\":2,\"482\":1}}],[\"分包消息中第一包的流水号\",{\"1\":{\"366\":1}}],[\"分包消息中的第一个子包的流水号\",{\"1\":{\"364\":1}}],[\"分包消息\",{\"1\":{\"136\":1,\"140\":1,\"182\":1,\"482\":1}}],[\"分包报文的处理\",{\"0\":{\"14\":1}}],[\"系统属性\",{\"1\":{\"385\":1,\"410\":1}}],[\"系列配置在\",{\"1\":{\"160\":1}}],[\"环境变量\",{\"1\":{\"385\":1,\"410\":1}}],[\"环境下默认启用\",{\"1\":{\"376\":1}}],[\"环境下\",{\"1\":{\"180\":1}}],[\"环境下启动异常的问题\",{\"1\":{\"127\":1}}],[\"尽管消息体属性有所不同\",{\"1\":{\"382\":1}}],[\"过滤器链\",{\"1\":{\"379\":1}}],[\"符合808标准\",{\"1\":{\"371\":2}}],[\"初步解码后的请求\",{\"1\":{\"389\":1}}],[\"初步解码为\",{\"1\":{\"389\":1}}],[\"初步解析为\",{\"1\":{\"370\":1}}],[\"初步支持消息加解密\",{\"1\":{\"88\":1}}],[\"非常感谢老哥\",{\"1\":{\"548\":1}}],[\"非必须配置\",{\"1\":{\"369\":1,\"370\":1,\"371\":1,\"393\":1,\"394\":2,\"395\":1,\"396\":2,\"548\":1}}],[\"非分包消息\",{\"1\":{\"136\":1,\"140\":1,\"482\":1}}],[\"检验码\",{\"1\":{\"369\":1}}],[\"计算后\",{\"1\":{\"472\":1}}],[\"计算校验码\",{\"1\":{\"369\":1}}],[\"计算消息长度\",{\"1\":{\"305\":1}}],[\"负责处理经过\",{\"1\":{\"536\":1}}],[\"负责解析\",{\"1\":{\"459\":1}}],[\"负责将客户端请求中的\",{\"1\":{\"533\":1}}],[\"负责将\",{\"1\":{\"371\":1}}],[\"负责将请求中的\",{\"1\":{\"370\":1}}],[\"负责\",{\"1\":{\"369\":1}}],[\"小节\",{\"0\":{\"367\":1}}],[\"获取子包\",{\"1\":{\"366\":1}}],[\"获取到\",{\"1\":{\"319\":1}}],[\"遇到分包补传请求\",{\"1\":{\"364\":1}}],[\"遇到分包请求时会回调\",{\"1\":{\"346\":1}}],[\"子包\",{\"1\":{\"364\":1}}],[\"子包保存多久看具体实现类的实现逻辑\",{\"1\":{\"364\":1}}],[\"子模块\",{\"1\":{\"111\":1}}],[\"保存某个子包\",{\"1\":{\"364\":1}}],[\"保留\",{\"1\":{\"136\":1,\"140\":1,\"382\":2,\"482\":1}}],[\"日志的输出\",{\"1\":{\"362\":1}}],[\"日志的级别调整为\",{\"1\":{\"359\":1}}],[\"超过该值会自动分包发送\",{\"1\":{\"361\":1}}],[\"超过\",{\"1\":{\"360\":1}}],[\"超速报警附加信息见\",{\"1\":{\"287\":1}}],[\"编译命令\",{\"1\":{\"444\":1}}],[\"编译\",{\"0\":{\"443\":1}}],[\"编译输出了\",{\"1\":{\"441\":1}}],[\"编译后的\",{\"1\":{\"441\":1}}],[\"编译源码\",{\"0\":{\"437\":1}}],[\"编译之后的\",{\"1\":{\"115\":2,\"404\":2}}],[\"编码\",{\"1\":{\"479\":1,\"480\":1}}],[\"编码后的字节流\",{\"1\":{\"371\":1}}],[\"编码后子包消息字节流\",{\"1\":{\"364\":1}}],[\"编码为\",{\"1\":{\"371\":1}}],[\"编码解码相关\",{\"0\":{\"368\":1}}],[\"编码器日志\",{\"1\":{\"359\":1}}],[\"级别的日志\",{\"1\":{\"543\":1}}],[\"级别\",{\"1\":{\"359\":1}}],[\"忽略请求读取过程\",{\"1\":{\"357\":1}}],[\"忽略所有分包请求\",{\"1\":{\"347\":1}}],[\"毕竟当注解不方便处理请求时\",{\"1\":{\"351\":1}}],[\"而应该以\",{\"1\":{\"543\":1}}],[\"而言的\",{\"1\":{\"522\":1}}],[\"而没必要提供一个\",{\"1\":{\"492\":1}}],[\"而是定义了一个\",{\"1\":{\"458\":1,\"541\":1}}],[\"而\",{\"1\":{\"351\":1,\"417\":1}}],[\"而不是不回复消息\",{\"1\":{\"96\":1}}],[\"任何类型的消息处理器返回的结果都被包装成了\",{\"1\":{\"351\":1}}],[\"发包请移步\",{\"1\":{\"494\":1}}],[\"发包工具\",{\"1\":{\"7\":1}}],[\"发报文\",{\"0\":{\"469\":1}}],[\"发现消息包的大小超过了阈值\",{\"1\":{\"359\":1}}],[\"发送给客户端\",{\"1\":{\"536\":1,\"538\":1}}],[\"发送\",{\"1\":{\"469\":1,\"488\":3}}],[\"发送下面这条测试报文\",{\"1\":{\"362\":1}}],[\"发送下面三条分包报文\",{\"1\":{\"348\":1}}],[\"发送三条报文之后\",{\"1\":{\"348\":1}}],[\"空的实现\",{\"1\":{\"347\":1,\"365\":1}}],[\"要基于源码二次开发\",{\"1\":{\"438\":1}}],[\"要替换内置的分包暂存器只需将对应类型的\",{\"1\":{\"396\":1}}],[\"要替换内置的业务线程池\",{\"1\":{\"374\":1}}],[\"要定制\",{\"1\":{\"393\":1,\"546\":1}}],[\"要自定义\",{\"1\":{\"384\":1,\"395\":1}}],[\"要使用\",{\"1\":{\"379\":2}}],[\"要想替换该组件\",{\"1\":{\"369\":1}}],[\"要求\",{\"0\":{\"439\":1}}],[\"要求重传的子包id\",{\"1\":{\"364\":1}}],[\"要求终端重传某些子包<\",{\"1\":{\"346\":1}}],[\"要扩展一种不支持的数据类型\",{\"1\":{\"243\":1}}],[\"要扩展\",{\"1\":{\"243\":1}}],[\"投递出去<\",{\"1\":{\"346\":1}}],[\"投递给消息处理器处理\",{\"1\":{\"345\":1}}],[\"返回一个新的\",{\"1\":{\"385\":1,\"410\":1}}],[\"返回入参中的\",{\"1\":{\"385\":1,\"410\":1}}],[\"返回\",{\"1\":{\"343\":1,\"370\":1,\"524\":1}}],[\"联系起来\",{\"1\":{\"341\":1}}],[\"联系我们\",{\"0\":{\"4\":1}}],[\"具体鉴权逻辑\",{\"1\":{\"538\":1}}],[\"具体配置请移步\",{\"1\":{\"489\":1}}],[\"具体通过消息头中的消息体属性字段判断\",{\"1\":{\"382\":1}}],[\"具体流程可以结合\",{\"1\":{\"343\":1}}],[\"具体的处理器是该类中的部分方法\",{\"1\":{\"339\":1}}],[\"具体分包信息由消息包封装项决定\",{\"1\":{\"136\":1,\"140\":1,\"382\":2,\"482\":1}}],[\"作用\",{\"0\":{\"413\":1,\"417\":1,\"421\":1}}],[\"作用就是标记一下当前类是一个消息处理器类\",{\"1\":{\"338\":1}}],[\"作用和length相同\",{\"1\":{\"518\":1,\"521\":1}}],[\"作用和startindex相同\",{\"1\":{\"518\":1}}],[\"作用和\",{\"1\":{\"303\":4}}],[\"用于嵌套的附加信息实体类\",{\"1\":{\"521\":1}}],[\"用于占位符或默认值\",{\"1\":{\"480\":1}}],[\"用法请\",{\"1\":{\"519\":1,\"520\":1,\"521\":1}}],[\"用法类似\",{\"1\":{\"338\":1}}],[\"用\",{\"1\":{\"509\":1}}],[\"用发包工具发送如下报文给服务器\",{\"1\":{\"488\":1}}],[\"用的\",{\"1\":{\"441\":1}}],[\"用到的\",{\"1\":{\"441\":1,\"442\":1,\"445\":1}}],[\"用来充当消息体\",{\"1\":{\"435\":1,\"436\":1}}],[\"用来构建调试报文\",{\"1\":{\"433\":1}}],[\"用来像\",{\"1\":{\"430\":1}}],[\"用来从\",{\"1\":{\"427\":1}}],[\"用来替代\",{\"1\":{\"421\":1}}],[\"用来生成流水号\",{\"1\":{\"395\":1}}],[\"用来控制单个消息包的最大大小\",{\"1\":{\"360\":1}}],[\"用来控制打印的\",{\"1\":{\"149\":1}}],[\"能执行到这里就意味着\",{\"1\":{\"379\":1}}],[\"能将处理被\",{\"1\":{\"351\":1}}],[\"能将消息路由到\",{\"1\":{\"336\":2}}],[\"能处理\",{\"1\":{\"351\":1}}],[\"能混合使用吗\",{\"1\":{\"230\":2}}],[\"接收到的字节数组中的表示经纬度的\",{\"1\":{\"501\":1}}],[\"接收\",{\"1\":{\"336\":1,\"343\":1}}],[\"接口的声明\",{\"1\":{\"559\":1}}],[\"接口的处理器类\",{\"1\":{\"508\":1}}],[\"接口的处理器类加入到\",{\"1\":{\"342\":1}}],[\"接口实现类\",{\"1\":{\"554\":1}}],[\"接口实现转义逻辑\",{\"1\":{\"530\":1}}],[\"接口来实现的\",{\"1\":{\"536\":1}}],[\"接口内容如下\",{\"1\":{\"472\":1}}],[\"接口定义\",{\"1\":{\"458\":1,\"459\":1}}],[\"接口定义如下\",{\"1\":{\"322\":1}}],[\"接口以供用户自行扩展\",{\"1\":{\"458\":1,\"541\":1}}],[\"接口方法\",{\"1\":{\"410\":1}}],[\"接口是从\",{\"1\":{\"397\":1,\"550\":1}}],[\"接口声明\",{\"1\":{\"389\":1}}],[\"接口\",{\"1\":{\"16\":1,\"386\":1,\"473\":1,\"557\":1,\"558\":1}}],[\"泛型\",{\"1\":{\"334\":1}}],[\"被其注解的方法相当于一个实现了\",{\"1\":{\"508\":1}}],[\"被具体厂商精简过的文档\",{\"1\":{\"493\":1}}],[\"被置为\",{\"1\":{\"415\":3}}],[\"被关闭的\",{\"1\":{\"394\":1}}],[\"被移除的\",{\"1\":{\"394\":1}}],[\"被该注解标记的类中应该存在若干个能处理请求的方法\",{\"1\":{\"338\":1}}],[\"被该注解标记的类应该是被\",{\"1\":{\"297\":1}}],[\"被\",{\"1\":{\"327\":1,\"333\":1,\"338\":1,\"525\":1}}],[\"如何以\",{\"1\":{\"494\":1}}],[\"如何创建实例\",{\"0\":{\"419\":1,\"423\":1}}],[\"如有必要\",{\"1\":{\"346\":1}}],[\"如下\",{\"1\":{\"327\":1}}],[\"如果处理逻辑太复杂\",{\"1\":{\"558\":1}}],[\"如果内置的转义逻辑不符合要求\",{\"1\":{\"530\":1}}],[\"如果内置的实现不符合要求\",{\"1\":{\"370\":1,\"371\":1}}],[\"如果有嵌套的附加项\",{\"1\":{\"505\":1}}],[\"如果有多个拦截器\",{\"1\":{\"323\":1}}],[\"如果没有特殊需求\",{\"1\":{\"441\":1,\"442\":1}}],[\"如果是分包请求\",{\"1\":{\"389\":1}}],[\"如果默认的\",{\"1\":{\"370\":1}}],[\"如果终端没有收到某些子包\",{\"1\":{\"363\":1}}],[\"如果响应消息的大小\",{\"1\":{\"360\":1}}],[\"如果配置了\",{\"1\":{\"347\":3}}],[\"如果你在这里注册了自定义的鉴权消息处理器\",{\"1\":{\"539\":1}}],[\"如果你覆盖了\",{\"1\":{\"529\":1}}],[\"如果你是将本项目发布的\",{\"1\":{\"450\":1}}],[\"如果你直接在\",{\"1\":{\"450\":1}}],[\"如果你没有自定义\",{\"1\":{\"411\":1}}],[\"如果你没有自定义过下面两种类型的组件\",{\"1\":{\"409\":1}}],[\"如果你的项目不需要\",{\"1\":{\"181\":1,\"199\":1}}],[\"如果你要体验最新版\",{\"1\":{\"438\":1}}],[\"如果你要开启这个配置\",{\"1\":{\"149\":1}}],[\"如果你要使用\",{\"1\":{\"148\":1}}],[\"如果消息体属性中相关标识位确定消息分包处理\",{\"1\":{\"136\":1,\"140\":1,\"482\":1}}],[\"比较鸡肋的一个内置组件\",{\"1\":{\"529\":1}}],[\"比较繁琐\",{\"1\":{\"326\":1,\"503\":1}}],[\"比如存储到\",{\"1\":{\"567\":1}}],[\"比如下面这个场景\",{\"1\":{\"414\":1}}],[\"比如下面的写法\",{\"1\":{\"286\":1}}],[\"比如\",{\"1\":{\"243\":1,\"567\":1}}],[\"比如可以自定义一种\",{\"1\":{\"107\":1}}],[\"<filename\",{\"1\":{\"567\":1}}],[\"<terminalid\",{\"1\":{\"567\":1}}],[\"<version>1\",{\"1\":{\"485\":1}}],[\"<version>3\",{\"1\":{\"455\":1}}],[\"<version>2\",{\"1\":{\"454\":2,\"455\":1}}],[\"<groupid>org\",{\"1\":{\"454\":2,\"455\":2}}],[\"<groupid>io\",{\"1\":{\"454\":1,\"455\":1,\"485\":1}}],[\"<artifactid>spring\",{\"1\":{\"454\":2,\"455\":2}}],[\"<artifactid>jt\",{\"1\":{\"454\":1,\"455\":1,\"485\":1}}],[\"<exclusion>\",{\"1\":{\"454\":1,\"455\":1}}],[\"<exclusions>\",{\"1\":{\"454\":1,\"455\":1}}],[\"<dependency>\",{\"1\":{\"454\":2,\"455\":2,\"485\":1}}],[\"<dependencies>\",{\"1\":{\"454\":1,\"455\":1}}],[\"<<repo\",{\"1\":{\"444\":1}}],[\"<<<<<<<<<<<<<<<\",{\"1\":{\"362\":6}}],[\"<h3\",{\"1\":{\"379\":1}}],[\"<p>\",{\"1\":{\"346\":2,\"370\":1,\"379\":6,\"394\":3,\"473\":2,\"567\":1}}],[\"<\",{\"1\":{\"322\":3,\"346\":1,\"389\":3,\"444\":6,\"454\":11,\"455\":11,\"485\":1}}],[\"<li>长时间未到达服务端的子包应该及时回收掉\",{\"1\":{\"346\":1}}],[\"<li>某些子包丢失未到达时应该自动发送\",{\"1\":{\"346\":1}}],[\"<li>当所有子包都到达后\",{\"1\":{\"346\":1}}],[\"<li>被\",{\"1\":{\"322\":3,\"389\":1}}],[\"<li>\",{\"1\":{\"322\":3,\"389\":1}}],[\"<ol>\",{\"1\":{\"322\":3,\"346\":1,\"389\":1}}],[\"<=\",{\"1\":{\"115\":1,\"404\":1}}],[\"当length无法直接指定时可根据该属性定义的方法名返回字节数\",{\"1\":{\"518\":1,\"521\":1}}],[\"当startindex无法直接指定时可根据该属性定义的方法名返回字节数\",{\"1\":{\"518\":1}}],[\"当然如果是自定义的\",{\"1\":{\"554\":1}}],[\"当然即便是显式调用\",{\"1\":{\"434\":1}}],[\"当然\",{\"1\":{\"413\":1,\"534\":1,\"536\":1}}],[\"当然可以直接实现\",{\"1\":{\"386\":1}}],[\"当前终端的协议版本号\",{\"1\":{\"474\":1}}],[\"当前终端对应的\",{\"1\":{\"389\":1}}],[\"当前流水号\",{\"1\":{\"395\":2,\"474\":1}}],[\"当前请求上下文\",{\"1\":{\"322\":3,\"379\":1}}],[\"当服务端将消息分包发送给终端时\",{\"1\":{\"363\":1}}],[\"当\",{\"1\":{\"347\":2}}],[\"当且仅当计算结果为\",{\"1\":{\"314\":1}}],[\"当且仅当\",{\"1\":{\"184\":1,\"185\":2,\"529\":1}}],[\"调用处理器处理请求\",{\"1\":{\"389\":1}}],[\"调用处理器方法之前回调\",{\"1\":{\"322\":1}}],[\"调试相关\",{\"0\":{\"6\":1}}],[\"容易导致bean之间的循环依赖\",{\"1\":{\"531\":1}}],[\"容易引发bean的循环依赖\",{\"1\":{\"39\":1}}],[\"容器即可\",{\"1\":{\"396\":1}}],[\"容器中\",{\"1\":{\"459\":1}}],[\"容器中加入一个\",{\"1\":{\"383\":1}}],[\"容器中就可以替换内置的\",{\"1\":{\"393\":1}}],[\"容器中就可以\",{\"1\":{\"342\":1}}],[\"容器中就可以生效了\",{\"1\":{\"322\":1}}],[\"容器中即可\",{\"1\":{\"323\":1}}],[\"会随着\",{\"1\":{\"424\":1}}],[\"会被\",{\"1\":{\"423\":3}}],[\"会在\",{\"1\":{\"394\":1,\"424\":1}}],[\"会在执行处理器方法之前\",{\"1\":{\"322\":1}}],[\"会将子包保存在\",{\"1\":{\"364\":1}}],[\"会将较大的消息自动分包\",{\"1\":{\"359\":1}}],[\"会发送\",{\"1\":{\"363\":1}}],[\"会自动释放\",{\"1\":{\"436\":1}}],[\"会自动分包发送\",{\"1\":{\"360\":1}}],[\"会自动将消息拆分为多个子包发送\",{\"1\":{\"360\":1}}],[\"会自动将消息分包发送给客户端\",{\"1\":{\"359\":1}}],[\"会先将分包消息\",{\"1\":{\"345\":1}}],[\"会正常调用处理器方法处理消息\",{\"1\":{\"322\":1}}],[\"会尽最大可能在非工作时间及时处理\",{\"1\":{\"4\":1}}],[\"抄袭\",{\"1\":{\"322\":1,\"326\":1,\"338\":1,\"341\":1,\"353\":1,\"379\":1,\"397\":1,\"550\":1}}],[\"借鉴\",{\"1\":{\"322\":1,\"338\":1,\"379\":1}}],[\"介绍\",{\"0\":{\"322\":1,\"326\":1,\"336\":1,\"338\":1,\"341\":1,\"389\":1}}],[\"收到未知附件上传消息\",{\"1\":{\"567\":1}}],[\"收到消息\",{\"1\":{\"382\":1}}],[\"收到终端上报的分包请求时\",{\"1\":{\"345\":1}}],[\"收到终端回复时会根据这个key来匹配\",{\"1\":{\"320\":1}}],[\"收到结果后\",{\"1\":{\"320\":1}}],[\"生成配置\",{\"1\":{\"446\":1}}],[\"生成同样的key\",{\"1\":{\"320\":1}}],[\"生成key\",{\"1\":{\"320\":1}}],[\"生成的\",{\"1\":{\"319\":1}}],[\"否则直接抛到下游\",{\"1\":{\"558\":1}}],[\"否则会出现线程阻塞问题\",{\"1\":{\"319\":1}}],[\"否则\",{\"1\":{\"319\":1,\"389\":1}}],[\"否则无该项\",{\"1\":{\"136\":1,\"140\":1,\"482\":1}}],[\"步骤7\",{\"1\":{\"319\":2}}],[\"步骤3\",{\"1\":{\"319\":4}}],[\"然后通过\",{\"1\":{\"536\":1}}],[\"然后指定\",{\"1\":{\"502\":1}}],[\"然后你可以将字节数组手动转换到\",{\"1\":{\"497\":1}}],[\"然后将自定义的\",{\"1\":{\"393\":1}}],[\"然后在下面的自定义\",{\"1\":{\"392\":1}}],[\"然后观察\",{\"1\":{\"362\":1}}],[\"然后\",{\"1\":{\"319\":1,\"446\":1}}],[\"然后再\",{\"1\":{\"501\":1}}],[\"然后再根据自己的要求进一步转换\",{\"1\":{\"236\":1}}],[\"然后再手动除以\",{\"1\":{\"234\":1}}],[\"然后再除以\",{\"1\":{\"234\":1}}],[\"入站\",{\"1\":{\"319\":1}}],[\"入门\",{\"0\":{\"456\":1},\"1\":{\"189\":1}}],[\"服务端通用应答消息\",{\"1\":{\"523\":1}}],[\"服务端\",{\"0\":{\"470\":1}}],[\"服务端将消息分包发送时\",{\"1\":{\"364\":1}}],[\"服务端下发消息的\",{\"1\":{\"527\":1}}],[\"服务端下发\",{\"1\":{\"319\":1}}],[\"服务器的tcp端口\",{\"1\":{\"177\":1,\"196\":1}}],[\"放入\",{\"1\":{\"319\":1,\"320\":1}}],[\"通过session发送数据\",{\"1\":{\"512\":1}}],[\"通过终端id获取session\",{\"1\":{\"512\":1}}],[\"通过以下截图\",{\"1\":{\"495\":1}}],[\"通过实体类来转换消息体内容\",{\"1\":{\"434\":1}}],[\"通过commandsender下发\",{\"0\":{\"320\":1}}],[\"通过上一步中获取到的\",{\"1\":{\"319\":1}}],[\"通过\",{\"1\":{\"319\":1,\"434\":1}}],[\"通过注解别名的扩展提供了\",{\"1\":{\"287\":1}}],[\"成功\",{\"1\":{\"316\":1,\"354\":1,\"357\":1,\"432\":1,\"434\":1,\"435\":1,\"436\":1,\"523\":1,\"526\":1}}],[\"主动下发消息给客户端时的编码问题\",{\"1\":{\"492\":1}}],[\"主动下发消息时为空\",{\"1\":{\"315\":2}}],[\"主要内容如下\",{\"1\":{\"476\":1}}],[\"主页\",{\"0\":{\"0\":1}}],[\"赋值顺序\",{\"1\":{\"314\":1}}],[\"单词拼写错误\",{\"1\":{\"448\":1}}],[\"单个消息包的最大字节数\",{\"1\":{\"361\":1}}],[\"单个消息包的最大大小\",{\"1\":{\"360\":1}}],[\"单个数据包的最大大小\",{\"1\":{\"311\":1}}],[\"单独依赖该模块时必须满足\",{\"1\":{\"115\":2,\"404\":2}}],[\"源字段中的终止bit索引\",{\"1\":{\"307\":1,\"520\":1}}],[\"源字段中的起始bit索引\",{\"1\":{\"307\":1,\"520\":1}}],[\"源字段中的第几个bit\",{\"1\":{\"307\":1,\"520\":1}}],[\"源字段名\",{\"1\":{\"307\":1,\"520\":1}}],[\"源类型\",{\"1\":{\"249\":1,\"252\":1,\"255\":1,\"258\":1,\"261\":1,\"264\":1,\"268\":1,\"271\":1,\"274\":1,\"277\":1,\"280\":1,\"283\":1}}],[\"车辆已被注册\",{\"1\":{\"316\":1,\"354\":1,\"357\":1,\"432\":1}}],[\"车辆标识\",{\"1\":{\"305\":1,\"429\":2}}],[\"车牌颜色\",{\"1\":{\"305\":1,\"429\":2,\"532\":1}}],[\"终端\",{\"1\":{\"532\":1}}],[\"终端鉴权\",{\"1\":{\"458\":1,\"468\":1,\"487\":1,\"542\":1}}],[\"终端补传分包请求\",{\"1\":{\"363\":1,\"366\":1}}],[\"终端注册消息\",{\"1\":{\"468\":1}}],[\"终端注册\",{\"1\":{\"342\":1,\"348\":1,\"357\":1,\"458\":1,\"468\":1}}],[\"终端已被注册\",{\"1\":{\"316\":1,\"354\":1,\"357\":1,\"432\":1}}],[\"终端id\",{\"1\":{\"305\":1,\"429\":2,\"532\":1}}],[\"终端型号\",{\"1\":{\"305\":1,\"429\":2,\"532\":1}}],[\"终端手机号或设备id\",{\"1\":{\"136\":1,\"140\":1,\"482\":1}}],[\"终端手机号\",{\"1\":{\"18\":1,\"136\":1,\"140\":1,\"364\":1,\"473\":2,\"482\":1}}],[\"绑定的\",{\"1\":{\"304\":1,\"315\":1}}],[\"代码不应该执行到这个分支\",{\"1\":{\"567\":1}}],[\"代码段中的\",{\"1\":{\"497\":1}}],[\"代表正在迭代对象的上下文\",{\"1\":{\"304\":1}}],[\"代替\",{\"1\":{\"69\":1,\"107\":1,\"160\":1,\"543\":1}}],[\"代替了\",{\"1\":{\"16\":1}}],[\"正在迭代的当前对象\",{\"1\":{\"304\":1,\"315\":1}}],[\"长度6字节\",{\"1\":{\"495\":1}}],[\"长度\",{\"1\":{\"303\":1,\"518\":1}}],[\"长度1或5\",{\"1\":{\"287\":1}}],[\"起始字节索引\",{\"1\":{\"303\":1,\"518\":1,\"521\":1}}],[\"暂时没时间画了\",{\"1\":{\"514\":1}}],[\"暂时没想到一种比较优雅的\",{\"1\":{\"349\":1}}],[\"暂时没有其他属性\",{\"1\":{\"301\":1}}],[\"暂时调整日志级别以便观察分包请求处理\",{\"1\":{\"348\":1}}],[\"暂存分包请求\",{\"1\":{\"346\":1}}],[\"暂存\",{\"1\":{\"345\":1}}],[\"暂且将\",{\"1\":{\"503\":1}}],[\"暂且先忽略\",{\"1\":{\"225\":1}}],[\"暂且就认为是必须的吧\",{\"1\":{\"225\":1}}],[\"映射到被该注解修饰的类\",{\"1\":{\"301\":1}}],[\"等\",{\"1\":{\"567\":1}}],[\"等接口并\",{\"1\":{\"489\":1}}],[\"等类型\",{\"1\":{\"422\":1}}],[\"等就几乎没必要看本小节了\",{\"1\":{\"397\":1,\"550\":1}}],[\"等所有子包都到达后会自动合并消息\",{\"1\":{\"345\":1}}],[\"等价于\",{\"1\":{\"304\":2,\"315\":2}}],[\"等注解功能类似\",{\"1\":{\"298\":1}}],[\"等注解同时出现\",{\"1\":{\"297\":1}}],[\"等组件\",{\"1\":{\"220\":1}}],[\"方法的\",{\"1\":{\"536\":1}}],[\"方法的调用移动到了\",{\"1\":{\"410\":1}}],[\"方法的调用\",{\"1\":{\"410\":1}}],[\"方法返回值为\",{\"1\":{\"524\":1}}],[\"方法返回类型为\",{\"1\":{\"524\":1}}],[\"方法返回的构建结果需要调用方自己在恰当的时机释放\",{\"1\":{\"434\":1,\"435\":1,\"436\":1}}],[\"方法\",{\"1\":{\"434\":1,\"435\":1,\"436\":1,\"507\":1,\"508\":2}}],[\"方法可以将消息体转换为\",{\"1\":{\"427\":1}}],[\"方法中调用了\",{\"1\":{\"410\":1}}],[\"方法手动注册监听器\",{\"1\":{\"394\":1}}],[\"方法级别\",{\"1\":{\"336\":1}}],[\"方法来释放\",{\"1\":{\"435\":1,\"436\":1}}],[\"方法来控制多个拦截器的执行顺序\",{\"1\":{\"323\":1}}],[\"方法来发送数据\",{\"1\":{\"318\":1}}],[\"方法名\",{\"1\":{\"303\":1}}],[\"方向\",{\"1\":{\"293\":1,\"495\":1}}],[\"方便自定义注解\",{\"1\":{\"107\":2}}],[\"速度\",{\"1\":{\"293\":1,\"495\":1}}],[\"高度\",{\"1\":{\"293\":1,\"495\":1}}],[\"高级驾驶辅助报警信息\",{\"1\":{\"287\":1}}],[\"南纬\",{\"1\":{\"293\":1,\"308\":1,\"495\":1,\"498\":1}}],[\"北纬\",{\"1\":{\"293\":1,\"308\":1,\"495\":1,\"498\":1}}],[\"字\",{\"1\":{\"479\":1,\"480\":1}}],[\"字节顺序\",{\"1\":{\"528\":1}}],[\"字节流\",{\"1\":{\"370\":1}}],[\"字节\",{\"1\":{\"359\":1,\"360\":1,\"479\":3,\"480\":2}}],[\"字节数组到消息实体类的映射\",{\"1\":{\"492\":1}}],[\"字节数\",{\"1\":{\"304\":1,\"480\":1,\"518\":1,\"521\":1}}],[\"字节的\",{\"1\":{\"234\":1}}],[\"字段长度等的计算可能会依赖于消息头中的一些属性\",{\"1\":{\"398\":1,\"551\":1}}],[\"字段解析顺序\",{\"1\":{\"303\":1}}],[\"字段的第2位取出转为\",{\"1\":{\"293\":1,\"308\":1,\"495\":1,\"498\":1}}],[\"字段的第0位取出转为\",{\"1\":{\"293\":2,\"308\":2,\"495\":2,\"498\":2}}],[\"状态\",{\"1\":{\"293\":1,\"308\":1,\"495\":1,\"499\":1}}],[\"报警标志\",{\"1\":{\"293\":1,\"495\":1}}],[\"报文构建器\",{\"0\":{\"433\":1,\"532\":1}}],[\"报文为例\",{\"1\":{\"225\":1}}],[\"报文加解密参考资料\",{\"1\":{\"15\":1}}],[\"报文加密解密\",{\"0\":{\"15\":1}}],[\"报文解析相关\",{\"0\":{\"12\":1}}],[\"报文\",{\"1\":{\"7\":1,\"469\":1,\"567\":1}}],[\"测试报文如下\",{\"1\":{\"291\":1,\"294\":1}}],[\"测试\",{\"0\":{\"291\":1,\"294\":1,\"467\":1,\"487\":1},\"1\":{\"488\":1}}],[\"`mymsgtype`\",{\"1\":{\"459\":2}}],[\"`jt808bytewriter`\",{\"1\":{\"432\":1}}],[\"`jt808bytereader`\",{\"1\":{\"429\":1}}],[\"`jt808fielddeserializerregistry`\",{\"1\":{\"236\":1,\"241\":1}}],[\"`bytebufcontainerfieldserializer`\",{\"1\":{\"423\":3}}],[\"`0x8003`\",{\"1\":{\"346\":1}}],[\"`startindex`\",{\"1\":{\"290\":3,\"293\":3}}],[\"展示如何基于注解来解析报文\",{\"1\":{\"289\":1,\"292\":1,\"493\":1}}],[\"许多厂商实现的808协议位置上传报文\",{\"1\":{\"493\":1}}],[\"许多厂商实现的\",{\"1\":{\"289\":1,\"292\":1}}],[\"批量位置上传报文解析示例\",{\"0\":{\"289\":1}}],[\"都实现了该接口\",{\"1\":{\"554\":1}}],[\"都封装在了一个叫\",{\"1\":{\"475\":1}}],[\"都重写了\",{\"1\":{\"471\":1}}],[\"都请记得以\",{\"1\":{\"469\":1,\"488\":3}}],[\"都是基于\",{\"1\":{\"522\":1}}],[\"都是选择性的实现\",{\"1\":{\"458\":1}}],[\"都是\",{\"1\":{\"453\":1}}],[\"都是相同的\",{\"1\":{\"382\":1}}],[\"都会以该属性描述符指定的格式解析\",{\"1\":{\"287\":1}}],[\"都叫\",{\"1\":{\"18\":1}}],[\"盲区监测系统报警信息\",{\"1\":{\"287\":1}}],[\"胎压监测系统报警信息\",{\"1\":{\"287\":1}}],[\"驾驶员状态监测系统报警信息\",{\"1\":{\"287\":1}}],[\"无符号四字节整型\",{\"1\":{\"480\":1,\"496\":1}}],[\"无符号四字节整形\",{\"1\":{\"479\":1}}],[\"无符号双字节整型\",{\"1\":{\"480\":1}}],[\"无符号双字节整形\",{\"1\":{\"479\":1}}],[\"无符号单字节整型\",{\"1\":{\"480\":1}}],[\"无符号单字节整形\",{\"1\":{\"479\":1}}],[\"无论以什么发包工具发包\",{\"1\":{\"469\":1,\"488\":3}}],[\"无线通信网络信号强度\",{\"1\":{\"287\":1}}],[\"无需\",{\"1\":{\"111\":1}}],[\"模拟量\",{\"1\":{\"287\":1}}],[\"模块依赖的\",{\"1\":{\"453\":1}}],[\"模块必须使用\",{\"1\":{\"441\":1}}],[\"模块是为\",{\"1\":{\"440\":1}}],[\"模块名称拼写错误修改\",{\"1\":{\"115\":1,\"404\":1}}],[\"模块\",{\"1\":{\"113\":1}}],[\"需要补传\",{\"1\":{\"567\":1}}],[\"需要手动拼装为符合808协议格式的报文\",{\"1\":{\"512\":1}}],[\"需要你自己在恰当的时机释放掉\",{\"1\":{\"424\":1}}],[\"需要\",{\"1\":{\"424\":1}}],[\"需要在恰当的时机释放掉\",{\"1\":{\"417\":1}}],[\"需要对某个\",{\"1\":{\"414\":1}}],[\"需要重传的子包id\",{\"1\":{\"366\":1}}],[\"需要借助\",{\"1\":{\"341\":1}}],[\"需要人工确认报警事件的\",{\"1\":{\"287\":1}}],[\"需要配置\",{\"1\":{\"107\":1,\"379\":2}}],[\"行驶记录功能获取的速度\",{\"1\":{\"287\":1}}],[\"油量\",{\"1\":{\"287\":1}}],[\"key\",{\"1\":{\"287\":14,\"319\":3,\"393\":4,\"567\":1}}],[\"keyvaluemapping\",{\"1\":{\"287\":14}}],[\"keyvaluemappings\",{\"1\":{\"287\":2}}],[\"keepalive\",{\"1\":{\"386\":1}}],[\"keepalivetime\",{\"1\":{\"154\":1,\"216\":1}}],[\"keep\",{\"0\":{\"154\":1,\"216\":1},\"1\":{\"151\":1,\"373\":1}}],[\"附件上传之前没有没有发送\",{\"1\":{\"567\":1}}],[\"附件服务器\",{\"0\":{\"567\":1},\"1\":{\"377\":1}}],[\"附件服务器共用\",{\"1\":{\"373\":1}}],[\"附件服务器端口\",{\"1\":{\"145\":1}}],[\"附加项长度字段用1个字节表示\",{\"1\":{\"505\":1}}],[\"附加项列表\",{\"1\":{\"286\":1,\"287\":2,\"293\":1}}],[\"附加信息内容\",{\"1\":{\"286\":1,\"293\":1}}],[\"附加信息长度\",{\"1\":{\"286\":1,\"293\":1}}],[\"附加信息id\",{\"1\":{\"286\":1,\"293\":1}}],[\"全是0\",{\"1\":{\"415\":1}}],[\"全都是\",{\"1\":{\"286\":1}}],[\"全类名是\",{\"1\":{\"237\":1,\"242\":1}}],[\"说明\",{\"0\":{\"351\":1,\"353\":1,\"356\":1,\"376\":1},\"1\":{\"286\":1,\"299\":1,\"303\":1,\"304\":1,\"311\":1,\"314\":1,\"315\":1}}],[\"说白了就是\",{\"1\":{\"225\":1}}],[\"异常处理\",{\"0\":{\"284\":1,\"489\":1}}],[\"异常信息最好有完整的堆栈记录\",{\"1\":{\"4\":1}}],[\"序列号bcd\",{\"0\":{\"261\":1,\"280\":1}}],[\"序列化string\",{\"0\":{\"264\":1,\"283\":1}}],[\"序列化dword\",{\"0\":{\"258\":1,\"277\":1}}],[\"序列化word\",{\"0\":{\"255\":1,\"274\":1}}],[\"序列化bytes\",{\"0\":{\"252\":1,\"271\":1}}],[\"序列化byte\",{\"0\":{\"249\":1,\"268\":1}}],[\"备注\",{\"1\":{\"248\":1,\"249\":1,\"251\":1,\"252\":1,\"254\":1,\"255\":1,\"257\":1,\"258\":1,\"260\":1,\"261\":1,\"263\":1,\"264\":1,\"267\":1,\"268\":1,\"270\":1,\"271\":1,\"273\":1,\"274\":1,\"276\":1,\"277\":1,\"279\":1,\"280\":1,\"282\":1,\"283\":1}}],[\"目标属性\",{\"1\":{\"519\":1}}],[\"目标类型\",{\"1\":{\"248\":1,\"251\":1,\"254\":1,\"257\":1,\"260\":1,\"263\":1,\"267\":1,\"270\":1,\"273\":1,\"276\":1,\"279\":1,\"282\":1}}],[\"目录下的项目复制了一份改成了\",{\"1\":{\"460\":1}}],[\"目前支持自动注入的参数类型如下\",{\"1\":{\"509\":1}}],[\"目前只提供了一个最基本的内测版的注解\",{\"1\":{\"492\":1}}],[\"目前只支持\",{\"1\":{\"413\":1}}],[\"目前为止\",{\"1\":{\"398\":1,\"517\":1,\"551\":1}}],[\"目前内置的处理器有两种\",{\"1\":{\"389\":1}}],[\"目的\",{\"0\":{\"234\":1,\"239\":1}}],[\"地理位置\",{\"1\":{\"246\":1}}],[\"转义相关\",{\"0\":{\"530\":1}}],[\"转义响应消息\",{\"1\":{\"369\":1}}],[\"转义请求消息\",{\"1\":{\"369\":1}}],[\"转义\",{\"1\":{\"369\":1}}],[\"转义之后的消息\",{\"1\":{\"369\":2}}],[\"转义之后\",{\"1\":{\"348\":3,\"362\":3,\"472\":2}}],[\"转义之前\",{\"1\":{\"311\":1,\"348\":3,\"359\":1,\"360\":3,\"361\":1,\"362\":3}}],[\"转换之后的\",{\"1\":{\"458\":1,\"536\":1}}],[\"转换出来的其他类型\",{\"1\":{\"343\":1}}],[\"转换成可读性较强的自定义类型\",{\"1\":{\"326\":1}}],[\"转换为\",{\"1\":{\"242\":1,\"533\":1}}],[\"转为\",{\"1\":{\"239\":1}}],[\"转为浮点数\",{\"1\":{\"234\":1}}],[\"转为数字\",{\"1\":{\"234\":1}}],[\"现在可以通过自定义注解将\",{\"1\":{\"242\":1}}],[\"现在你可以自定义注解来扩展自定义的数据类型\",{\"1\":{\"107\":1}}],[\"yyyymmddhhmmss\",{\"1\":{\"567\":1}}],[\"yyyymmddhh\",{\"1\":{\"567\":1}}],[\"yymmddhhmmss\",{\"1\":{\"239\":1,\"240\":1,\"242\":1,\"495\":1}}],[\"y\",{\"1\":{\"415\":3}}],[\"yaml\",{\"1\":{\"385\":1,\"410\":1}}],[\"yml\",{\"1\":{\"144\":1,\"190\":1,\"466\":1,\"486\":1}}],[\"格式为\",{\"1\":{\"239\":1}}],[\"格式编码的字符串\",{\"1\":{\"239\":1}}],[\"格式打印\",{\"1\":{\"149\":1}}],[\"也没必要修改源码中的\",{\"1\":{\"442\":1}}],[\"也不会有任何影响\",{\"1\":{\"434\":1}}],[\"也不需要\",{\"1\":{\"236\":1,\"241\":1}}],[\"也就意味着所有的分包请求都会被丢弃\",{\"1\":{\"347\":3}}],[\"也就是给\",{\"1\":{\"383\":1}}],[\"也就是间接指定了\",{\"1\":{\"225\":2}}],[\"也就是说使用\",{\"1\":{\"441\":1}}],[\"也就是说\",{\"1\":{\"225\":1,\"349\":1,\"359\":1,\"450\":1,\"501\":1}}],[\"也可以直接提供一个已经写好内容的\",{\"1\":{\"435\":1,\"436\":1}}],[\"也可以直接在这里指定具体的消息id\",{\"1\":{\"434\":1}}],[\"也可以通过\",{\"1\":{\"429\":2,\"432\":2}}],[\"也可以通过注解别名实现\",{\"1\":{\"243\":1}}],[\"也可以使用\",{\"1\":{\"418\":1,\"422\":1}}],[\"也可以用在被\",{\"1\":{\"413\":1}}],[\"也可以自己扩展注解的属性\",{\"1\":{\"240\":1}}],[\"也是同样的道理\",{\"1\":{\"243\":1}}],[\"手动将自定义处理器注册到\",{\"1\":{\"534\":1}}],[\"手动实现并注册的\",{\"1\":{\"559\":1}}],[\"手动实现并注册\",{\"0\":{\"534\":1,\"537\":1},\"1\":{\"556\":1,\"557\":1}}],[\"手动实现的\",{\"1\":{\"524\":1}}],[\"手动实例化\",{\"1\":{\"236\":1,\"241\":1}}],[\"手动发送的数据\",{\"1\":{\"512\":1}}],[\"手动解析\",{\"0\":{\"497\":1}}],[\"手动注册\",{\"1\":{\"489\":1}}],[\"手动构建一个\",{\"1\":{\"419\":5,\"423\":5}}],[\"手动创建一个新的jt808response返回\",{\"1\":{\"357\":1}}],[\"手动编码后通过\",{\"1\":{\"318\":1}}],[\"手动编码消息时可能为空\",{\"1\":{\"315\":1}}],[\"手动下发\",{\"0\":{\"318\":1,\"512\":1}}],[\"手机号不足12\",{\"1\":{\"136\":1,\"140\":1,\"482\":1}}],[\"定制msgtypeparser\",{\"0\":{\"543\":1}}],[\"定制化\",{\"0\":{\"378\":1,\"531\":1},\"1\":{\"189\":1}}],[\"定制化示例\",{\"1\":{\"1\":1}}],[\"定位\",{\"1\":{\"499\":1}}],[\"定位数据批量上报\",{\"1\":{\"468\":1}}],[\"定位数据上报\",{\"1\":{\"468\":1}}],[\"定位卫星数\",{\"1\":{\"287\":1}}],[\"定义\",{\"1\":{\"458\":1,\"459\":1}}],[\"定义见表\",{\"1\":{\"287\":4}}],[\"定义见\",{\"1\":{\"287\":2}}],[\"定义自己的注解\",{\"0\":{\"235\":1,\"240\":1}}],[\"到\",{\"1\":{\"234\":1,\"345\":1,\"502\":1}}],[\"到底该哪些属性是必须的\",{\"1\":{\"225\":1}}],[\"示例代码\",{\"0\":{\"526\":1}}],[\"示例文档中并没涉及到附加项嵌套的情况\",{\"1\":{\"505\":1}}],[\"示例\",{\"0\":{\"300\":1,\"305\":1,\"308\":1,\"312\":1,\"316\":1,\"323\":1,\"339\":1,\"342\":1,\"348\":1,\"354\":1,\"357\":1,\"362\":1,\"366\":1,\"386\":1,\"515\":1},\"1\":{\"299\":1,\"303\":1,\"311\":1,\"314\":1,\"369\":1,\"370\":1}}],[\"示例如下\",{\"1\":{\"287\":1,\"334\":1}}],[\"示例2\",{\"0\":{\"238\":1}}],[\"示例1\",{\"0\":{\"233\":1}}],[\"示例项目\",{\"1\":{\"1\":1}}],[\"演示如何扩展自己的注解\",{\"1\":{\"232\":1}}],[\"自带的\",{\"1\":{\"454\":2,\"455\":2}}],[\"自动释放掉\",{\"1\":{\"423\":3}}],[\"自动化的\",{\"1\":{\"349\":1}}],[\"自动配置\",{\"1\":{\"1\":2}}],[\"自定义并注册了\",{\"1\":{\"558\":1}}],[\"自定义解析器无法解析\",{\"1\":{\"543\":1}}],[\"自定义转换器\",{\"1\":{\"502\":1}}],[\"自定义反序列化器\",{\"1\":{\"314\":1}}],[\"自定义的消息处理器\",{\"1\":{\"536\":1}}],[\"自定义的消息体解析器\",{\"1\":{\"534\":1}}],[\"自定义的类型转换器\",{\"1\":{\"303\":1,\"518\":1}}],[\"自定义的转换器\",{\"1\":{\"236\":1,\"241\":1}}],[\"自定义注解\",{\"0\":{\"231\":1}}],[\"只有一个为\",{\"1\":{\"448\":1}}],[\"只有\",{\"1\":{\"441\":1}}],[\"只有在成功后才有该字段\",{\"1\":{\"316\":1,\"354\":1,\"357\":1,\"432\":1}}],[\"只不过\",{\"1\":{\"417\":1}}],[\"只需自己声明一个\",{\"1\":{\"393\":1,\"546\":1}}],[\"只需声明一个\",{\"1\":{\"384\":1,\"395\":1}}],[\"只需要声明一个\",{\"1\":{\"369\":1}}],[\"只比较大小\",{\"1\":{\"303\":1,\"314\":1}}],[\"只是演示可以这么使用\",{\"1\":{\"499\":1}}],[\"只是个示例而已\",{\"1\":{\"567\":1}}],[\"只是个辅助类\",{\"1\":{\"428\":1,\"431\":1}}],[\"只是个快捷方式或者扩展\",{\"1\":{\"230\":1}}],[\"只是原始808的一个子集\",{\"1\":{\"289\":1,\"292\":1,\"493\":1}}],[\"只能标记于字段上\",{\"1\":{\"518\":1}}],[\"只能标注于\",{\"1\":{\"507\":1,\"508\":1}}],[\"只能转为\",{\"1\":{\"239\":1}}],[\"只能写成\",{\"1\":{\"234\":1}}],[\"只修改严重\",{\"1\":{\"188\":1,\"222\":3}}],[\"兼容\",{\"1\":{\"229\":1}}],[\"兼容吗\",{\"1\":{\"229\":1}}],[\"兼容性\",{\"0\":{\"229\":1,\"447\":1}}],[\">acc开关\",{\"1\":{\"497\":1}}],[\">注意<\",{\"1\":{\"379\":1}}],[\">\",{\"1\":{\"236\":1,\"241\":1,\"318\":1,\"348\":1,\"357\":1,\"366\":1,\"406\":2,\"407\":2,\"419\":1,\"423\":2,\"428\":2,\"429\":7,\"432\":1,\"434\":1,\"435\":2,\"436\":2,\"444\":7,\"454\":6,\"455\":6,\"459\":2,\"497\":2,\"498\":1,\"515\":1,\"529\":1,\"532\":6,\"543\":1,\"558\":1,\"559\":1,\"567\":2}}],[\">>>>>>>>>>>>>>>\",{\"1\":{\"348\":9}}],[\">>\",{\"1\":{\"227\":2,\"480\":2}}],[\">=17\",{\"1\":{\"115\":1,\"404\":1}}],[\">=\",{\"1\":{\"81\":1,\"115\":3,\"395\":1,\"404\":3,\"441\":1,\"445\":1,\"446\":1,\"450\":3}}],[\"上\",{\"1\":{\"507\":1,\"508\":1,\"517\":1}}],[\"上次通信时间\",{\"1\":{\"474\":1}}],[\"上进行业务开发\",{\"1\":{\"450\":1}}],[\"上面日志解释如下\",{\"1\":{\"348\":1,\"362\":1}}],[\"上面代码中的\",{\"1\":{\"225\":1}}],[\"上一小节介绍了怎么接收请求\",{\"1\":{\"326\":1}}],[\"上下文中的消息体总长度减去前面消费掉的字节数\",{\"1\":{\"305\":1}}],[\"上班时间\",{\"1\":{\"4\":1}}],[\"部分依旧是\",{\"1\":{\"389\":1}}],[\"部分的处理逻辑和被\",{\"1\":{\"334\":1}}],[\"部分\",{\"1\":{\"225\":1,\"354\":1}}],[\"省域\",{\"1\":{\"532\":1}}],[\"省域id\",{\"1\":{\"305\":2,\"333\":1,\"429\":4}}],[\"省略其他属性\",{\"1\":{\"286\":1,\"287\":3}}],[\"省略其他配置\",{\"1\":{\"145\":1}}],[\"省去了\",{\"1\":{\"225\":1}}],[\"鉴权逻辑\",{\"1\":{\"538\":1}}],[\"鉴权成功与否是由函数式接口\",{\"1\":{\"487\":1}}],[\"鉴权码\",{\"1\":{\"316\":1,\"354\":1,\"357\":1,\"432\":1}}],[\"鉴权消息\",{\"1\":{\"202\":1,\"529\":1}}],[\"鉴于以上几个问题\",{\"1\":{\"225\":1}}],[\"了一个叫\",{\"1\":{\"492\":1}}],[\"了一个\",{\"1\":{\"322\":1}}],[\"了\",{\"1\":{\"225\":1,\"242\":1,\"393\":1}}],[\"实际使用时你应该将文件存储到其他存储介质\",{\"1\":{\"567\":1}}],[\"实际场景中看你自己需求\",{\"1\":{\"567\":1}}],[\"实际上\",{\"1\":{\"448\":1}}],[\"实际上这里演示的这个注解已经在\",{\"1\":{\"237\":1,\"242\":1}}],[\"实际上是借助于\",{\"1\":{\"229\":1}}],[\"实体类中只能使用\",{\"1\":{\"422\":1}}],[\"实体类映射关系如下\",{\"1\":{\"290\":1,\"293\":1}}],[\"实体类映射示例\",{\"1\":{\"133\":2,\"295\":2}}],[\"实现也有点麻烦\",{\"1\":{\"558\":1}}],[\"实现的\",{\"1\":{\"524\":1}}],[\"实现原理\",{\"0\":{\"514\":1}}],[\"实现并加入到\",{\"1\":{\"459\":1}}],[\"实现报文的加密\",{\"1\":{\"383\":1}}],[\"实现\",{\"0\":{\"538\":1},\"1\":{\"370\":1,\"458\":1,\"534\":1,\"536\":1}}],[\"实现类至少有以下几个\",{\"1\":{\"559\":1}}],[\"实现类至少应该实现下面几个功能\",{\"1\":{\"346\":1}}],[\"实现类多了有点头大\",{\"1\":{\"558\":1}}],[\"实现类用来构建报文\",{\"1\":{\"433\":1}}],[\"实现类即可\",{\"1\":{\"383\":1}}],[\"实现类应该自行回收掉\",{\"1\":{\"346\":1}}],[\"实现类应该负责将消息合并\",{\"1\":{\"346\":1}}],[\"实现类依赖于\",{\"1\":{\"225\":1}}],[\"实现接口\",{\"1\":{\"323\":1}}],[\"实例的执行顺序和\",{\"1\":{\"379\":1}}],[\"实例\",{\"1\":{\"304\":3,\"315\":3,\"370\":2,\"385\":1,\"389\":1,\"399\":1,\"400\":1,\"410\":1,\"458\":1,\"552\":1,\"553\":1,\"554\":1}}],[\"因为此时的鉴权逻辑已经完全交由你自定的\",{\"1\":{\"529\":1}}],[\"因为此时没有\",{\"1\":{\"315\":2}}],[\"因为这个是给\",{\"1\":{\"441\":1}}],[\"因为当前源码的最低要求是\",{\"1\":{\"441\":1}}],[\"因为在特殊场景下\",{\"1\":{\"421\":1}}],[\"因为在\",{\"1\":{\"297\":1}}],[\"因为\",{\"1\":{\"225\":1,\"440\":1}}],[\"经度\",{\"1\":{\"225\":2,\"234\":1,\"237\":1,\"246\":1,\"293\":1,\"495\":3}}],[\"经纬度\",{\"1\":{\"107\":1,\"246\":2}}],[\"纬度\",{\"1\":{\"225\":2,\"234\":1,\"237\":1,\"293\":1,\"495\":2,\"501\":1,\"502\":1}}],[\"解释\",{\"1\":{\"517\":1,\"518\":1,\"519\":1,\"520\":1,\"521\":2,\"527\":1,\"528\":1}}],[\"解密\",{\"1\":{\"383\":1}}],[\"解密报文\",{\"0\":{\"383\":1}}],[\"解析位置基本信息\",{\"0\":{\"495\":1}}],[\"解析出了鉴权码\",{\"1\":{\"488\":1}}],[\"解析之后\",{\"1\":{\"382\":1}}],[\"解析之后的\",{\"1\":{\"370\":1}}],[\"解析请求\",{\"1\":{\"370\":1}}],[\"解析报文到实体类\",{\"0\":{\"290\":1,\"293\":1}}],[\"解析为double\",{\"0\":{\"502\":1}}],[\"解析为4字节的int\",{\"0\":{\"501\":1}}],[\"解析为\",{\"1\":{\"236\":1,\"246\":2}}],[\"解析经纬度的实体类可能是下面这种写法\",{\"1\":{\"225\":1}}],[\"解决\",{\"1\":{\"90\":1}}],[\"相互覆盖\",{\"1\":{\"558\":1}}],[\"相对应\",{\"1\":{\"473\":1}}],[\"相同功能的组件只会\",{\"1\":{\"559\":1}}],[\"相同功能的组件只会按照优先级注册其仅注册一个\",{\"1\":{\"558\":1}}],[\"相同\",{\"1\":{\"303\":4}}],[\"相比于上一个章节\",{\"1\":{\"246\":1}}],[\"相比于\",{\"1\":{\"225\":1}}],[\"相当于\",{\"1\":{\"225\":1}}],[\"相关的接入步骤\",{\"1\":{\"476\":1}}],[\"相关的配置\",{\"1\":{\"146\":1,\"171\":1,\"174\":1,\"182\":1,\"213\":1}}],[\"相关信息\",{\"1\":{\"441\":1,\"442\":1}}],[\"相关方法已经删除\",{\"1\":{\"410\":1}}],[\"相关配置\",{\"1\":{\"384\":1}}],[\"相关资料\",{\"0\":{\"381\":1}}],[\"相关知识\",{\"0\":{\"245\":1}}],[\"相关文档\",{\"1\":{\"86\":1}}],[\"内部结构也是一致的\",{\"1\":{\"503\":1}}],[\"内部已经\",{\"1\":{\"492\":1}}],[\"内部用到的临时\",{\"1\":{\"435\":1,\"436\":1}}],[\"内容如下\",{\"1\":{\"223\":1}}],[\"内置组件的优先级最低\",{\"1\":{\"559\":1}}],[\"内置版本\",{\"0\":{\"453\":1}}],[\"内置实现返回的\",{\"1\":{\"370\":1}}],[\"内置了\",{\"1\":{\"556\":1,\"557\":1}}],[\"内置了两种\",{\"1\":{\"433\":1}}],[\"内置了两个\",{\"1\":{\"336\":1,\"351\":1}}],[\"内置了三个实现类\",{\"1\":{\"365\":1}}],[\"内置分包暂存器\",{\"0\":{\"347\":1,\"365\":1}}],[\"内置处理器有两种\",{\"1\":{\"322\":3}}],[\"内置的异常处理器位于\",{\"1\":{\"491\":1}}],[\"内置的鉴权消息处理器打印出的日志\",{\"1\":{\"488\":1}}],[\"内置的支持\",{\"1\":{\"427\":1,\"430\":1}}],[\"内置的支持自动分包的返回类型有两种\",{\"1\":{\"359\":1}}],[\"内置的分包请求暂存器目前就只有一种基于\",{\"1\":{\"349\":1}}],[\"内置的几种\",{\"1\":{\"327\":1}}],[\"内置的给\",{\"1\":{\"243\":1}}],[\"内置的\",{\"1\":{\"202\":1,\"554\":1,\"559\":1}}],[\"内置的处理器仅仅是示例性的\",{\"1\":{\"169\":1}}],[\"内置的空的心跳消息\",{\"1\":{\"108\":1}}],[\"内置消息处理器都在\",{\"1\":{\"169\":1}}],[\"内置消息说明\",{\"0\":{\"295\":1},\"1\":{\"133\":1,\"295\":1}}],[\"内置\",{\"1\":{\"107\":1}}],[\"内置几个和苏标相关的实体类\",{\"1\":{\"92\":1}}],[\"线程池\",{\"1\":{\"373\":1}}],[\"线程池中线程的命名格式\",{\"1\":{\"218\":1}}],[\"线程池的线程名前缀\",{\"1\":{\"157\":1,\"164\":1}}],[\"quick\",{\"1\":{\"529\":1}}],[\"question\",{\"1\":{\"229\":1,\"230\":1}}],[\"queue\",{\"0\":{\"217\":1}}],[\"qq交流群\",{\"1\":{\"4\":1}}],[\"同\",{\"1\":{\"215\":1,\"216\":1,\"304\":1}}],[\"同时扫描了\",{\"1\":{\"558\":1}}],[\"同时还有自定义的消息类型\",{\"1\":{\"458\":1,\"541\":1}}],[\"同时尽量兼容\",{\"1\":{\"448\":1}}],[\"同时应该注意\",{\"1\":{\"319\":1}}],[\"同时生成一个消息应答的\",{\"1\":{\"319\":1}}],[\"同时\",{\"1\":{\"286\":1}}],[\"同时提供了\",{\"1\":{\"246\":1}}],[\"同时又能方便地扩展自定义注解\",{\"1\":{\"225\":1}}],[\"同时其实现类\",{\"1\":{\"181\":1}}],[\"同时支持\",{\"1\":{\"115\":1,\"404\":1}}],[\"即便是无法处理的消息也不要返回\",{\"1\":{\"543\":1}}],[\"即便是和内置的重复了也会使用你自定义的\",{\"1\":{\"458\":1}}],[\"即为真实的经纬度\",{\"1\":{\"501\":1}}],[\"即\",{\"1\":{\"214\":1}}],[\"即可\",{\"1\":{\"181\":1,\"199\":1,\"369\":1,\"384\":1,\"393\":1,\"394\":1,\"395\":1,\"438\":1,\"450\":1,\"502\":1}}],[\"+\",{\"1\":{\"214\":1,\"236\":3,\"241\":3,\"303\":2,\"318\":1,\"348\":9,\"362\":6,\"383\":2,\"396\":1,\"419\":1,\"423\":1,\"512\":1,\"567\":15}}],[\"几乎所有的自定义的配置都需要继承配置类\",{\"1\":{\"531\":1}}],[\"几乎零配置的示例\",{\"1\":{\"1\":2}}],[\"几个关键接口如下\",{\"1\":{\"471\":1}}],[\"几个关键参数的配置\",{\"1\":{\"213\":1}}],[\"其余模块编译后的\",{\"1\":{\"441\":1}}],[\"其中的报警标志字段中\",{\"1\":{\"414\":1}}],[\"其他模块依赖的\",{\"1\":{\"453\":1}}],[\"其他模块虽然也用了\",{\"1\":{\"440\":1}}],[\"其他位没变\",{\"1\":{\"415\":1}}],[\"其他说明\",{\"0\":{\"243\":1}}],[\"其他配置\",{\"0\":{\"219\":1}}],[\"其实转换逻辑已经在\",{\"1\":{\"523\":1}}],[\"其实这个属性是从\",{\"1\":{\"225\":1}}],[\"其实就是\",{\"1\":{\"213\":1}}],[\"其它保留\",{\"1\":{\"136\":1,\"140\":1,\"382\":2,\"482\":1}}],[\"此时会跳过这种未知类型的消息处理\",{\"1\":{\"543\":1}}],[\"此时可以使用自定义的类型转换器\",{\"1\":{\"502\":1}}],[\"此时可以从控制台看到\",{\"1\":{\"488\":1}}],[\"此时消息整体结构已经解码完成\",{\"1\":{\"389\":1}}],[\"此处也可以从spring容器中获取bean来注入\",{\"1\":{\"539\":1}}],[\"此处不再赘述\",{\"1\":{\"523\":1}}],[\"此处的内容自动定义成了byte\",{\"1\":{\"504\":1}}],[\"此处将展示一个\",{\"1\":{\"461\":1,\"483\":1}}],[\"此处还是以\",{\"1\":{\"418\":1}}],[\"此处以\",{\"1\":{\"289\":1,\"292\":1}}],[\"此处为\",{\"1\":{\"213\":1}}],[\"此三位都为\",{\"1\":{\"136\":1,\"140\":1,\"382\":2,\"482\":1}}],[\"基本术语\",{\"0\":{\"471\":1}}],[\"基于注解来实现msghandler的功能\",{\"1\":{\"540\":1}}],[\"基于注解来实现\",{\"1\":{\"535\":1}}],[\"基于注解实现的\",{\"1\":{\"559\":1}}],[\"基于注解实现\",{\"0\":{\"535\":1,\"540\":1}}],[\"基于注解\",{\"1\":{\"534\":1,\"536\":1}}],[\"基于注解的响应消息映射\",{\"1\":{\"522\":1}}],[\"基于注解的\",{\"1\":{\"207\":1,\"211\":1,\"489\":1}}],[\"基于\",{\"1\":{\"347\":1,\"365\":2,\"450\":2,\"524\":1,\"556\":1,\"557\":1}}],[\"基础类型\",{\"1\":{\"287\":1}}],[\"基础\",{\"0\":{\"324\":1},\"1\":{\"189\":1}}],[\"所有支持的参数解析器都委托给了\",{\"1\":{\"509\":1}}],[\"所有的核心\",{\"1\":{\"471\":1}}],[\"所有模块\",{\"1\":{\"446\":1}}],[\"所有请求的处理都是一个风格\",{\"1\":{\"343\":1}}],[\"所谓手动下发就是指使用\",{\"1\":{\"318\":1}}],[\"所在的包名\",{\"1\":{\"203\":1,\"207\":1,\"211\":1}}],[\"所以此处选择了这种优先级的处理方式\",{\"1\":{\"558\":1}}],[\"所以此处不按这种方式处理\",{\"1\":{\"558\":1}}],[\"所以一般的消息处理步骤应该像下面这样\",{\"1\":{\"538\":1}}],[\"所以本小节所说的\",{\"1\":{\"522\":1}}],[\"所以本项目也提供了几个内置的\",{\"1\":{\"326\":1}}],[\"所以内置了一个commandsender来自动转换为符合808协议格式的报文并发送给客户端\",{\"1\":{\"512\":1}}],[\"所以额外提供了一个\",{\"1\":{\"503\":1}}],[\"所以至少有以下几种解析方式\",{\"1\":{\"496\":1}}],[\"所以现在可以测试接收内置的这些类型的消息了\",{\"1\":{\"468\":1}}],[\"所以编译源码的\",{\"1\":{\"441\":1}}],[\"所以提供了一个\",{\"1\":{\"558\":1}}],[\"所以提供了\",{\"1\":{\"422\":1}}],[\"所以在基于注解的实体类映射时\",{\"1\":{\"398\":1,\"551\":1}}],[\"所以你要是知道\",{\"1\":{\"397\":1,\"550\":1}}],[\"所以服务端分包补传消息暂时不支持\",{\"1\":{\"349\":1}}],[\"所以无需指定length\",{\"1\":{\"305\":1}}],[\"所以\",{\"1\":{\"18\":1,\"225\":1,\"304\":1,\"315\":1,\"351\":1,\"458\":1,\"492\":2,\"504\":1,\"541\":1}}],[\"标记该类\",{\"1\":{\"339\":1}}],[\"标记的实体类\",{\"1\":{\"525\":1}}],[\"标记的实体类来构建报文\",{\"1\":{\"434\":1}}],[\"标记的实体类来编码请求\",{\"1\":{\"432\":1}}],[\"标记的实体类来解析请求\",{\"1\":{\"429\":1}}],[\"标记的类型\",{\"1\":{\"359\":1}}],[\"标记的类\",{\"1\":{\"354\":1}}],[\"标记的类的处理逻辑相同\",{\"1\":{\"334\":1}}],[\"标记的这种处理器也是从\",{\"1\":{\"338\":1}}],[\"标记的方法<\",{\"1\":{\"322\":3}}],[\"标记的\",{\"1\":{\"201\":1}}],[\"标识位\",{\"1\":{\"135\":2,\"139\":2,\"481\":2}}],[\"深入\",{\"0\":{\"401\":1,\"549\":1},\"1\":{\"189\":1,\"223\":1}}],[\"你完全可以\",{\"1\":{\"534\":1,\"536\":1}}],[\"你使用了内置的\",{\"1\":{\"529\":1}}],[\"你只需要在你自己的\",{\"1\":{\"459\":1}}],[\"你应该直接使用项目中指定版本的\",{\"1\":{\"443\":1}}],[\"你应该复制一份出来修改\",{\"1\":{\"133\":1,\"295\":1}}],[\"你无需编译源码\",{\"1\":{\"438\":1}}],[\"你也可以根据需求来实现自己的\",{\"1\":{\"392\":1}}],[\"你可以根据文档中表17的定义将\",{\"1\":{\"497\":1}}],[\"你可以将其映射为\",{\"1\":{\"496\":1}}],[\"你可以像下面这样修改\",{\"1\":{\"454\":1,\"455\":1}}],[\"你可以按你的需求调整\",{\"1\":{\"453\":1}}],[\"你可以按需在\",{\"1\":{\"327\":1}}],[\"你可以给实体类实现这些接口以自动注入一些其他信息\",{\"1\":{\"398\":1,\"551\":1}}],[\"你可以自定义一个解码器\",{\"1\":{\"370\":1}}],[\"你可以自定义\",{\"1\":{\"349\":1}}],[\"你可以定义自己的注解来完成这种特殊需求\",{\"1\":{\"239\":1}}],[\"你可能会对于上面的代码片段有几个疑问\",{\"1\":{\"225\":1}}],[\"你现在看的是\",{\"1\":{\"188\":1}}],[\"指的就是你自定义的类型\",{\"1\":{\"459\":1}}],[\"指向的\",{\"1\":{\"428\":1,\"431\":1}}],[\"指令服务器\",{\"1\":{\"373\":1,\"377\":1}}],[\"指令服务器是否开启\",{\"1\":{\"176\":1}}],[\"指定单个消息包的最大大小\",{\"1\":{\"360\":1}}],[\"指南\",{\"0\":{\"187\":1,\"221\":1}}],[\"响应给客户端的消息\",{\"1\":{\"369\":1}}],[\"响应体\",{\"1\":{\"310\":1}}],[\"响应分包消息暂存器相关配置\",{\"1\":{\"185\":1}}],[\"响应消息实体类中出现的\",{\"1\":{\"424\":1}}],[\"响应消息最大字节数\",{\"1\":{\"360\":1}}],[\"响应消息大小超过该值\",{\"1\":{\"360\":1}}],[\"响应消息分包时会回调\",{\"1\":{\"364\":1}}],[\"响应消息分包\",{\"0\":{\"358\":1}}],[\"响应消息处理器\",{\"0\":{\"350\":1}}],[\"响应消息映射\",{\"0\":{\"309\":1,\"522\":1}}],[\"响应消息\",{\"1\":{\"133\":1,\"295\":1,\"369\":2,\"371\":1}}],[\"最少配置\",{\"1\":{\"461\":1,\"483\":1}}],[\"最长暂存多久由具体实现类自行决定<\",{\"1\":{\"346\":1}}],[\"最直观的处理方式就是类似于\",{\"1\":{\"341\":1}}],[\"最大缓存时间\",{\"1\":{\"184\":1,\"185\":2}}],[\"最多缓存多少条消息\",{\"1\":{\"184\":1,\"185\":1}}],[\"时序图\",{\"0\":{\"562\":1}}],[\"时才有效\",{\"1\":{\"529\":1}}],[\"时才会序列化\",{\"1\":{\"314\":1}}],[\"时用于\",{\"1\":{\"398\":1,\"551\":1}}],[\"时回调\",{\"1\":{\"394\":1}}],[\"时可以通过这个方法获取之前发送过的子包\",{\"1\":{\"364\":1}}],[\"时启用\",{\"1\":{\"347\":2,\"365\":3}}],[\"时\",{\"1\":{\"225\":1,\"364\":1,\"383\":2}}],[\"时间格式的\",{\"1\":{\"246\":1}}],[\"时间\",{\"1\":{\"225\":2,\"239\":1,\"242\":1,\"246\":1,\"293\":1,\"495\":1}}],[\"时生效\",{\"1\":{\"184\":1,\"185\":2}}],[\"时溢出的问题\",{\"1\":{\"81\":1}}],[\"配置提示\",{\"1\":{\"468\":1,\"487\":1}}],[\"配置界面\",{\"1\":{\"445\":1}}],[\"配置文件里有两个\",{\"1\":{\"441\":1,\"442\":1}}],[\"配置内置业务线程池\",{\"0\":{\"373\":1}}],[\"配置\",{\"0\":{\"466\":1,\"486\":1},\"1\":{\"336\":1,\"445\":2,\"531\":1}}],[\"配置繁琐\",{\"1\":{\"297\":1}}],[\"配置为\",{\"1\":{\"181\":1,\"199\":1}}],[\"配置项总览\",{\"0\":{\"143\":1,\"147\":1,\"151\":1,\"159\":1,\"166\":1,\"172\":1,\"175\":1,\"183\":1}}],[\"配置项\",{\"0\":{\"191\":1,\"377\":1,\"566\":1},\"1\":{\"69\":1,\"365\":3}}],[\"配置项默认值调整\",{\"1\":{\"55\":1,\"58\":1}}],[\"将被修饰的字段拆分之后赋值给另一个bean\",{\"1\":{\"519\":1}}],[\"将第0位和第1位同时取出并转为int\",{\"1\":{\"499\":1}}],[\"将status字段拆分之后放入statusinfo字段\",{\"1\":{\"499\":1}}],[\"将之前的\",{\"1\":{\"406\":1,\"407\":1}}],[\"将请求消息映射为实体类\",{\"1\":{\"558\":1}}],[\"将请求\",{\"1\":{\"389\":1}}],[\"将请求分包暂存器\",{\"1\":{\"348\":1}}],[\"将上一步初步解码的\",{\"1\":{\"389\":1}}],[\"将上面的\",{\"1\":{\"293\":3,\"308\":3,\"495\":3,\"498\":3}}],[\"将子包发送给终端\",{\"1\":{\"366\":1}}],[\"将默认解码器的日志级别调整到debug\",{\"1\":{\"348\":1}}],[\"将合并后的完整消息使用\",{\"1\":{\"346\":1}}],[\"将分包暂存起来\",{\"1\":{\"346\":1}}],[\"将结果放入commandwaitingpool\",{\"1\":{\"320\":1}}],[\"将\",{\"1\":{\"181\":1,\"199\":1,\"322\":1,\"371\":1,\"389\":1,\"475\":1}}],[\"处理鉴权消息\",{\"1\":{\"522\":1}}],[\"处理位置上报消息\",{\"1\":{\"508\":1,\"526\":1}}],[\"处理msgid为0x0200的消息\",{\"1\":{\"508\":1}}],[\"处理逻辑位于\",{\"1\":{\"487\":1}}],[\"处理完消息之后回复给客户端的数据对应着\",{\"1\":{\"473\":1}}],[\"处理当前请求的处理器\",{\"1\":{\"389\":1}}],[\"处理当前消息的处理器\",{\"1\":{\"322\":3}}],[\"处理的\",{\"1\":{\"351\":1,\"487\":1}}],[\"处理业务逻辑\",{\"1\":{\"343\":1}}],[\"处理器返回的结果\",{\"1\":{\"389\":1}}],[\"处理器\",{\"1\":{\"336\":2,\"351\":1}}],[\"处理器处理消息时候出现的异常\",{\"1\":{\"322\":1}}],[\"处理器处理结果\",{\"1\":{\"322\":1}}],[\"处理器执行结束之后回调\",{\"1\":{\"322\":1}}],[\"处理器拦截器\",{\"0\":{\"321\":1}}],[\"处理\",{\"1\":{\"178\":1,\"179\":1,\"197\":1,\"198\":1,\"336\":1,\"342\":2,\"357\":2,\"389\":1}}],[\"处理附件相关指令\",{\"1\":{\"145\":1}}],[\"类\",{\"1\":{\"507\":1}}],[\"类比于hibernate\",{\"1\":{\"518\":1}}],[\"类比于\",{\"1\":{\"490\":1,\"491\":1}}],[\"类来表示\",{\"1\":{\"474\":1}}],[\"类级别\",{\"1\":{\"336\":1,\"351\":1}}],[\"类似于\",{\"1\":{\"422\":1,\"509\":1,\"517\":1}}],[\"类似于下图所示\",{\"1\":{\"168\":1,\"220\":1}}],[\"类似\",{\"1\":{\"334\":1}}],[\"类型不固定\",{\"1\":{\"503\":1,\"504\":1}}],[\"类型为\",{\"1\":{\"496\":1}}],[\"类型的bean即可\",{\"1\":{\"546\":1}}],[\"类型的实例\",{\"1\":{\"419\":5,\"423\":5}}],[\"类型的响应数据\",{\"1\":{\"351\":1}}],[\"类型的\",{\"1\":{\"336\":1,\"351\":1,\"369\":1,\"371\":1,\"374\":1,\"384\":1,\"393\":1,\"394\":1,\"395\":1}}],[\"类型的字段\",{\"1\":{\"306\":1,\"519\":1,\"520\":1}}],[\"类型参数\",{\"1\":{\"328\":1,\"329\":1,\"330\":1,\"331\":1,\"332\":1}}],[\"类型固定长度就是2字节\",{\"1\":{\"305\":1}}],[\"类型只能是\",{\"1\":{\"286\":1}}],[\"类型映射\",{\"0\":{\"133\":1}}],[\"类型\",{\"1\":{\"103\":1,\"107\":2,\"152\":1,\"153\":1,\"154\":1,\"155\":1,\"156\":1,\"157\":1,\"162\":1,\"163\":1,\"164\":1,\"168\":1,\"169\":1,\"176\":1,\"177\":1,\"178\":1,\"179\":1,\"193\":1,\"196\":1,\"197\":1,\"198\":1,\"201\":1,\"202\":1,\"203\":1,\"204\":1,\"206\":1,\"207\":1,\"208\":1,\"210\":1,\"211\":1,\"212\":1,\"214\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":1,\"220\":1,\"286\":3,\"293\":3,\"306\":1,\"308\":3,\"326\":1,\"495\":3,\"498\":3,\"500\":1}}],[\"依赖为准\",{\"1\":{\"453\":1}}],[\"依赖的\",{\"1\":{\"453\":1}}],[\"依赖到你的项目里\",{\"1\":{\"450\":1}}],[\"依赖改为\",{\"1\":{\"406\":1,\"407\":1}}],[\"依赖升级\",{\"0\":{\"405\":1}}],[\"依赖\",{\"1\":{\"149\":1}}],[\"依赖时报错的问题\",{\"1\":{\"101\":1}}],[\"注册自定义msghandler\",{\"0\":{\"539\":1}}],[\"注册自定义\",{\"1\":{\"534\":1}}],[\"注册到\",{\"1\":{\"236\":1,\"241\":1}}],[\"注意和\",{\"1\":{\"454\":3,\"455\":3}}],[\"注意区分\",{\"1\":{\"452\":1}}],[\"注意事项\",{\"0\":{\"424\":1}}],[\"注意\",{\"0\":{\"222\":1},\"1\":{\"149\":1,\"169\":1,\"188\":1,\"394\":3,\"398\":1,\"434\":1,\"435\":1,\"436\":1,\"441\":1,\"443\":1,\"445\":1,\"446\":1,\"459\":1,\"469\":1,\"488\":3,\"492\":1,\"493\":1,\"494\":1,\"517\":1,\"519\":1,\"520\":1,\"529\":1,\"543\":1,\"551\":1}}],[\"注解方式处理\",{\"1\":{\"556\":1,\"557\":1}}],[\"注解即可\",{\"1\":{\"510\":1}}],[\"注解的方法支持参数自动注入\",{\"1\":{\"509\":1}}],[\"注解的作用类似于\",{\"1\":{\"297\":1}}],[\"注解来映射为一个可嵌套的实体\",{\"1\":{\"503\":1}}],[\"注解是\",{\"1\":{\"422\":1}}],[\"注解标记的处理器方法\",{\"1\":{\"389\":1}}],[\"注解标记了\",{\"1\":{\"333\":1}}],[\"注解也有个\",{\"1\":{\"361\":1}}],[\"注解修饰的返回类型\",{\"1\":{\"351\":1}}],[\"注解修饰的\",{\"1\":{\"336\":1}}],[\"注解一样\",{\"1\":{\"301\":1}}],[\"注解功能类似\",{\"1\":{\"301\":1}}],[\"注解以简化附加项的读取流程\",{\"1\":{\"287\":1}}],[\"注解\",{\"1\":{\"246\":1,\"248\":1,\"249\":1,\"251\":1,\"252\":1,\"254\":1,\"255\":1,\"257\":1,\"258\":1,\"260\":1,\"261\":1,\"263\":1,\"264\":1,\"267\":1,\"268\":1,\"270\":1,\"271\":1,\"273\":1,\"274\":1,\"276\":1,\"277\":1,\"279\":1,\"280\":1,\"282\":1,\"283\":1,\"353\":1,\"490\":1,\"491\":1,\"517\":1}}],[\"注解提供了快捷方式\",{\"1\":{\"225\":2}}],[\"注解提供了别名\",{\"1\":{\"225\":2}}],[\"注解中包含了这么多属性\",{\"1\":{\"225\":1}}],[\"注解别名就是对\",{\"1\":{\"229\":1}}],[\"注解别名和原来的\",{\"1\":{\"229\":1}}],[\"注解别名是\",{\"1\":{\"224\":1}}],[\"注解别名\",{\"0\":{\"224\":1,\"244\":1},\"1\":{\"107\":1}}],[\"注解驱动开发\",{\"0\":{\"288\":1,\"492\":1},\"1\":{\"75\":1,\"189\":1,\"223\":1,\"555\":1}}],[\"注解属性支持\",{\"1\":{\"16\":1}}],[\"注解相关的示例\",{\"1\":{\"1\":1}}],[\"该组件由\",{\"1\":{\"548\":1}}],[\"该组件可以监听\",{\"1\":{\"547\":1}}],[\"该组件\",{\"1\":{\"529\":1}}],[\"该组件用来管理每个终端的\",{\"1\":{\"393\":1,\"546\":1}}],[\"该实现需要调用\",{\"1\":{\"435\":1,\"436\":1}}],[\"该实现类通过\",{\"1\":{\"435\":1,\"436\":1}}],[\"该实现类通过被\",{\"1\":{\"434\":1}}],[\"该实现不需要显式调用\",{\"1\":{\"434\":1}}],[\"该实现\",{\"1\":{\"434\":1,\"435\":1,\"436\":1}}],[\"该方法中不宜做耗时太长\",{\"1\":{\"394\":3}}],[\"该功能默认不开启\",{\"1\":{\"379\":2}}],[\"该接口定义如下\",{\"1\":{\"364\":1}}],[\"该类定义如下\",{\"1\":{\"334\":1}}],[\"该类和\",{\"1\":{\"334\":1}}],[\"该字段所占的字节数\",{\"1\":{\"303\":1}}],[\"该注解只能标记于\",{\"1\":{\"517\":1}}],[\"该注解只能用户数字\",{\"1\":{\"499\":1}}],[\"该注解类似于\",{\"1\":{\"507\":1,\"508\":1}}],[\"该注解目前仅仅适用于\",{\"1\":{\"306\":1,\"519\":1,\"520\":1}}],[\"该注解的作用类似于\",{\"1\":{\"310\":1}}],[\"该注解的\",{\"1\":{\"304\":1}}],[\"该注解仅仅起一个标记作用\",{\"1\":{\"301\":1}}],[\"该注解和\",{\"1\":{\"298\":1,\"301\":1}}],[\"该配置项对应\",{\"1\":{\"181\":1,\"199\":1}}],[\"该章节介绍的是除前面章节内容之外的其他杂项配置\",{\"1\":{\"165\":1}}],[\"该章节介绍的是\",{\"1\":{\"146\":1,\"150\":1,\"158\":1,\"171\":1,\"174\":1,\"182\":1}}],[\"该消息分包后得总包数\",{\"1\":{\"136\":1,\"140\":1,\"482\":1}}],[\"业务线程池是\",{\"1\":{\"372\":1}}],[\"业务线程池\",{\"0\":{\"372\":1},\"1\":{\"373\":1}}],[\"业务线程池配置\",{\"1\":{\"145\":1}}],[\"业务线程池使用自定义的\",{\"1\":{\"69\":1}}],[\"numbers\",{\"1\":{\"497\":2}}],[\"null\",{\"1\":{\"374\":1,\"393\":1,\"543\":1,\"547\":1,\"567\":5}}],[\"nullable\",{\"1\":{\"322\":3,\"394\":3,\"547\":1,\"567\":1}}],[\"nio\",{\"1\":{\"532\":1}}],[\"nioserversocketchannel\",{\"1\":{\"386\":1}}],[\"nioeventloopgroup\",{\"1\":{\"145\":2,\"178\":1,\"179\":1,\"197\":1,\"198\":1,\"386\":2}}],[\"notes\",{\"0\":{\"569\":1}}],[\"not\",{\"1\":{\"512\":1,\"568\":1}}],[\"notimplementedexception\",{\"1\":{\"383\":2}}],[\"noargsconstructor\",{\"1\":{\"418\":1,\"422\":1}}],[\"no\",{\"1\":{\"318\":1,\"347\":1,\"365\":1,\"524\":1}}],[\"none\",{\"1\":{\"184\":1,\"185\":1,\"347\":4}}],[\"n\",{\"1\":{\"286\":1,\"287\":2,\"290\":1,\"293\":1,\"305\":1,\"429\":1,\"479\":4,\"480\":1}}],[\"name\",{\"0\":{\"157\":1,\"164\":1,\"218\":1},\"1\":{\"145\":1,\"151\":1,\"159\":1,\"318\":1,\"320\":1,\"373\":2,\"390\":1,\"485\":1,\"515\":2}}],[\"needvalidate\",{\"1\":{\"548\":1}}],[\"nestedfield\",{\"1\":{\"505\":1}}],[\"nestedfieldmapping\",{\"1\":{\"31\":1,\"36\":1,\"505\":8}}],[\"nextflowid\",{\"1\":{\"320\":3,\"357\":1,\"395\":1,\"432\":1}}],[\"newarraylist\",{\"1\":{\"515\":1}}],[\"newhashset\",{\"1\":{\"480\":7,\"536\":1,\"538\":1}}],[\"newrebuildablebytebufbuilder\",{\"1\":{\"436\":1}}],[\"newbytebufbuilder\",{\"1\":{\"435\":1}}],[\"newbuilder\",{\"1\":{\"357\":1,\"432\":1,\"567\":1}}],[\"newentitybuilder\",{\"1\":{\"434\":1}}],[\"new\",{\"0\":{\"23\":1,\"25\":1,\"28\":1,\"31\":1,\"35\":1,\"39\":1,\"43\":1,\"47\":1,\"54\":1,\"57\":1,\"60\":1,\"64\":1,\"69\":1,\"75\":1,\"80\":1,\"84\":1,\"88\":1,\"92\":1,\"94\":1,\"98\":1,\"100\":1,\"103\":1,\"105\":1,\"107\":1,\"111\":1,\"113\":1,\"115\":1,\"129\":1,\"131\":1},\"1\":{\"197\":1,\"198\":1,\"236\":4,\"241\":4,\"300\":1,\"318\":1,\"320\":3,\"333\":1,\"354\":1,\"369\":1,\"370\":1,\"371\":1,\"374\":1,\"383\":2,\"386\":4,\"393\":2,\"394\":2,\"395\":2,\"396\":4,\"419\":7,\"423\":7,\"434\":1,\"458\":1,\"509\":5,\"512\":1,\"515\":2,\"523\":2,\"526\":1,\"530\":1,\"534\":2,\"538\":1,\"539\":1,\"542\":1,\"544\":1,\"547\":1,\"548\":1,\"567\":7}}],[\"nettyprops\",{\"1\":{\"386\":6}}],[\"netty相关配置需要继承\",{\"1\":{\"544\":1}}],[\"netty相关\",{\"0\":{\"384\":1,\"544\":1}}],[\"netty\",{\"1\":{\"2\":1,\"16\":1,\"23\":2,\"39\":1,\"70\":1,\"158\":1,\"173\":1,\"177\":1,\"178\":1,\"179\":1,\"181\":1,\"194\":1,\"196\":1,\"197\":1,\"198\":1,\"199\":1,\"225\":2,\"318\":1,\"373\":1,\"384\":1,\"531\":1,\"536\":1}}],[\"优先级最高\",{\"1\":{\"559\":1}}],[\"优先级\",{\"1\":{\"558\":1}}],[\"优先使用自定义类型解析\",{\"1\":{\"459\":1}}],[\"优先使用\",{\"1\":{\"145\":1,\"175\":1,\"180\":1}}],[\"优化苏标附件服务器的支持\",{\"1\":{\"92\":1}}],[\"优化\",{\"1\":{\"49\":1}}],[\"苏标\",{\"1\":{\"287\":4}}],[\"苏标附件服务器\",{\"1\":{\"145\":1}}],[\"苏标扩展协议是\",{\"1\":{\"565\":1}}],[\"苏标扩展\",{\"0\":{\"145\":1,\"565\":1}}],[\"名称为\",{\"1\":{\"144\":1,\"190\":1}}],[\"并不是\",{\"1\":{\"567\":1}}],[\"并会在日志里打印\",{\"1\":{\"543\":1}}],[\"并手动转义\",{\"1\":{\"512\":1}}],[\"并自增\",{\"1\":{\"474\":1}}],[\"并没有内置所有类型的消息\",{\"1\":{\"458\":1,\"541\":1}}],[\"并没有为\",{\"1\":{\"448\":1}}],[\"并且不再支持使用\",{\"1\":{\"531\":1}}],[\"并且可能在后续版本删除\",{\"1\":{\"492\":1}}],[\"并且已经回复客户端\",{\"1\":{\"488\":1}}],[\"并且已经将默认的配置加入到了\",{\"1\":{\"144\":1,\"190\":1}}],[\"并且内置了一个\",{\"1\":{\"487\":1}}],[\"并且模块名中的\",{\"1\":{\"448\":1}}],[\"并且\",{\"1\":{\"410\":1}}],[\"并加入到\",{\"1\":{\"323\":1}}],[\"并等待\",{\"1\":{\"320\":1}}],[\"并将其置于最后\",{\"1\":{\"144\":1,\"190\":1}}],[\"并内置了\",{\"1\":{\"107\":1}}],[\"一般情况下\",{\"1\":{\"438\":1}}],[\"一般来说应该和\",{\"1\":{\"297\":1}}],[\"一批连续递增的流水号\",{\"1\":{\"395\":1}}],[\"一次性\",{\"1\":{\"395\":1}}],[\"一个终端请求的处理\",{\"1\":{\"389\":1}}],[\"一个空的\",{\"1\":{\"202\":1}}],[\"一样给你一个\",{\"1\":{\"326\":1}}],[\"一样\",{\"1\":{\"322\":1}}],[\"一句话概括就是\",{\"1\":{\"225\":1}}],[\"一致\",{\"1\":{\"137\":1,\"379\":1}}],[\"一些公共类\",{\"1\":{\"1\":1}}],[\"按照优先级注册其仅注册一个\",{\"1\":{\"559\":1}}],[\"按优先级找一个组件来处理\",{\"1\":{\"558\":1}}],[\"按文档格式组装字节数组\",{\"1\":{\"538\":1}}],[\"按需求引入需要的\",{\"1\":{\"454\":1,\"455\":1}}],[\"按需修改\",{\"1\":{\"107\":1}}],[\"按发送顺序从\",{\"1\":{\"136\":1,\"140\":1,\"482\":1}}],[\"则该项有内容\",{\"1\":{\"136\":1,\"140\":1,\"482\":1}}],[\"则在前面补\",{\"1\":{\"136\":1,\"140\":1,\"482\":1}}],[\"则消息头中无消息包封装项字段\",{\"1\":{\"136\":1,\"140\":1,\"382\":2,\"482\":1}}],[\"位操作的场景都可以用到\",{\"1\":{\"414\":1}}],[\"位置汇报数据体\",{\"1\":{\"290\":1}}],[\"位置汇报数据体长度\",{\"1\":{\"290\":1}}],[\"位置数据类型\",{\"1\":{\"290\":1}}],[\"位置上传报文解析示例\",{\"0\":{\"292\":1,\"493\":1}}],[\"位置上传报文\",{\"1\":{\"289\":1,\"292\":1}}],[\"位置上报中的附加项列表只能定义为\",{\"1\":{\"286\":1}}],[\"位置上报报文中的时间字段是以\",{\"1\":{\"239\":1}}],[\"位置上报\",{\"1\":{\"225\":1,\"542\":1}}],[\"位置附加项列表解析\",{\"0\":{\"285\":1}}],[\"位\",{\"1\":{\"136\":1,\"140\":1,\"479\":3,\"480\":3,\"482\":1}}],[\"位为\",{\"1\":{\"136\":1,\"140\":1,\"382\":2,\"482\":1}}],[\"算法加密\",{\"1\":{\"136\":1,\"140\":1,\"382\":2,\"482\":1}}],[\"第28个字节开始\",{\"1\":{\"503\":1}}],[\"第一次导入报错\",{\"1\":{\"446\":1}}],[\"第10位\",{\"1\":{\"383\":2}}],[\"第\",{\"1\":{\"136\":1,\"140\":1,\"382\":2,\"414\":1,\"415\":3,\"482\":1}}],[\"校验码\",{\"1\":{\"135\":1,\"139\":1,\"472\":2,\"481\":1}}],[\"很可能不符合你的需求\",{\"1\":{\"133\":1,\"295\":1}}],[\"这样一来\",{\"1\":{\"503\":1}}],[\"这样就可以看到分包消息的详情了\",{\"1\":{\"359\":1}}],[\"这可能导致用户覆盖掉对\",{\"1\":{\"410\":1}}],[\"这种实现接口并手动注册的方式显得非常繁琐\",{\"1\":{\"534\":1,\"536\":1}}],[\"这种\",{\"1\":{\"397\":1}}],[\"这种类型的\",{\"1\":{\"351\":1}}],[\"这三个二进制位具体含义\",{\"1\":{\"382\":1}}],[\"这部分也是借鉴\",{\"1\":{\"326\":1}}],[\"这一步应该将收到的客户端消息放入的\",{\"1\":{\"319\":1}}],[\"这里就瞎写了一个路径\",{\"1\":{\"567\":1}}],[\"这里是对应的文件上传的码流\",{\"1\":{\"567\":1}}],[\"这里是一个使用\",{\"1\":{\"390\":1}}],[\"这里对应的是苏标附件上传的码流\",{\"1\":{\"567\":1}}],[\"这里缺一个图\",{\"1\":{\"514\":1}}],[\"这里写成list仅仅为了示例\",{\"1\":{\"505\":1}}],[\"这里只是示例性的将文件存储到了本地磁盘中\",{\"1\":{\"567\":1}}],[\"这里只是将源码中\",{\"1\":{\"460\":1}}],[\"这里只讨论\",{\"1\":{\"453\":1}}],[\"这里使用一个永远返回0的生成器用来调试\",{\"1\":{\"434\":1,\"435\":1}}],[\"这里使用\",{\"1\":{\"434\":1}}],[\"这里返回的\",{\"1\":{\"431\":1}}],[\"这里返回自定义线程池\",{\"1\":{\"374\":1}}],[\"这里替换为自定义的session\",{\"1\":{\"393\":1}}],[\"这里指的是\",{\"1\":{\"363\":1}}],[\"这里的示例都是随便瞎写的\",{\"1\":{\"567\":1}}],[\"这里的\",{\"1\":{\"538\":1}}],[\"这里的分包补传指的是\",{\"1\":{\"349\":1}}],[\"这里的消息处理器就是被\",{\"1\":{\"319\":1}}],[\"这里的经纬度其实就是将\",{\"1\":{\"234\":1}}],[\"这里说的自定义注解是通过\",{\"1\":{\"232\":1}}],[\"这里要介绍的是\",{\"1\":{\"133\":1}}],[\"这个\",{\"1\":{\"567\":1}}],[\"这个泛型接口\",{\"1\":{\"534\":1,\"536\":1}}],[\"这个报文格式可能和你使用的有所不同\",{\"1\":{\"494\":1}}],[\"这个接口也是从\",{\"1\":{\"379\":1}}],[\"这个接口的作用和\",{\"1\":{\"322\":1}}],[\"这个注解也是借鉴\",{\"1\":{\"353\":1}}],[\"这个问题暂且不讨论\",{\"1\":{\"225\":1}}],[\"这个配置项必须\",{\"1\":{\"441\":1}}],[\"这个配置\",{\"1\":{\"148\":1}}],[\"这些aware接口只能在\",{\"1\":{\"398\":1,\"551\":1}}],[\"这些转换功能都是依赖于参数解析器\",{\"1\":{\"326\":1}}],[\"这些统计信息可以显示已经注册的\",{\"1\":{\"168\":1,\"220\":1}}],[\"这些类只是个示例\",{\"1\":{\"133\":1,\"295\":1}}],[\"这些类命名格式都是\",{\"1\":{\"133\":1,\"295\":1}}],[\"包中\",{\"1\":{\"450\":1}}],[\"包含下面几个比较关键的步骤\",{\"1\":{\"389\":1}}],[\"包含了本次请求的所有信息\",{\"1\":{\"334\":1}}],[\"包括合并后的分包请求\",{\"1\":{\"389\":1}}],[\"包括\",{\"1\":{\"202\":1,\"441\":1}}],[\"包下\",{\"1\":{\"169\":1}}],[\"包下内置了一些\",{\"1\":{\"133\":2,\"295\":2}}],[\"包序号\",{\"1\":{\"136\":1,\"140\":1,\"482\":1}}],[\"包起来\",{\"1\":{\"7\":1}}],[\"协议中的码流\",{\"1\":{\"567\":1}}],[\"协议中定义的\",{\"1\":{\"133\":1}}],[\"协议入门\",{\"1\":{\"555\":1}}],[\"协议版本\",{\"1\":{\"299\":1}}],[\"协议版本号\",{\"1\":{\"140\":2}}],[\"协议扫盲\",{\"0\":{\"17\":1,\"477\":1}}],[\"构造器参数变更\",{\"1\":{\"121\":1,\"409\":1}}],[\"及其子接口和实现类\",{\"1\":{\"121\":1,\"409\":1,\"411\":1}}],[\"⚡不兼容的变更\",{\"0\":{\"121\":1}}],[\"||\",{\"1\":{\"184\":1,\"185\":2,\"236\":2,\"567\":1}}],[\"|\",{\"1\":{\"119\":1}}],[\"新版本的\",{\"1\":{\"410\":1}}],[\"新的\",{\"1\":{\"410\":1}}],[\"新建文件失败\",{\"1\":{\"567\":1}}],[\"新建的\",{\"1\":{\"394\":1}}],[\"新建事件\",{\"1\":{\"394\":1}}],[\"新特性\",{\"0\":{\"119\":1,\"122\":1}}],[\"新增业务线程池\",{\"1\":{\"129\":1}}],[\"新增接方法\",{\"1\":{\"122\":1}}],[\"新增了\",{\"1\":{\"115\":1,\"404\":1}}],[\"新增如下示例消息\",{\"1\":{\"107\":1}}],[\"新增如下方法\",{\"1\":{\"54\":2,\"57\":2}}],[\"新增消息加解密相关文档\",{\"1\":{\"86\":1}}],[\"新增方法\",{\"1\":{\"80\":1}}],[\"新增配置项\",{\"1\":{\"23\":1,\"109\":1,\"119\":1}}],[\"新增\",{\"1\":{\"16\":1,\"25\":1,\"49\":1,\"60\":1,\"61\":2,\"64\":2,\"76\":1,\"84\":1,\"86\":1,\"88\":4,\"92\":1,\"107\":2,\"121\":2,\"122\":1,\"143\":1,\"406\":1,\"409\":2}}],[\"升级指南\",{\"0\":{\"402\":1},\"1\":{\"123\":1}}],[\"升级参考\",{\"0\":{\"123\":1,\"411\":1}}],[\"升级\",{\"1\":{\"115\":1,\"404\":1,\"441\":1}}],[\"升级到2\",{\"0\":{\"408\":1},\"1\":{\"123\":1}}],[\"升级到\",{\"1\":{\"82\":1,\"85\":5,\"115\":1,\"404\":1}}],[\"是其余模块用到的\",{\"1\":{\"441\":1,\"442\":1}}],[\"是一样的\",{\"1\":{\"417\":1}}],[\"是位操作的工具类\",{\"1\":{\"413\":1}}],[\"是\",{\"1\":{\"412\":1,\"414\":1,\"415\":1,\"416\":1,\"420\":1,\"441\":1,\"442\":1,\"453\":1}}],[\"是内置的\",{\"1\":{\"351\":1}}],[\"是由\",{\"1\":{\"351\":1}}],[\"是给\",{\"1\":{\"226\":1,\"227\":1,\"230\":1,\"452\":2}}],[\"是不是简介多了\",{\"1\":{\"225\":1}}],[\"是通过\",{\"1\":{\"225\":1}}],[\"是必须要指定的吗\",{\"1\":{\"225\":4}}],[\"是否是嵌套类型\",{\"1\":{\"528\":1}}],[\"是否是格式化过的\",{\"1\":{\"149\":1}}],[\"是否南纬\",{\"1\":{\"499\":1}}],[\"是否自动注册内置的\",{\"1\":{\"202\":1,\"204\":1,\"208\":1,\"212\":1}}],[\"是否启用全局异常处理机制\",{\"1\":{\"210\":1}}],[\"是否启用基于注解的msghandler功能\",{\"1\":{\"206\":1}}],[\"是否启用实体扫描功能\",{\"1\":{\"201\":1}}],[\"是否启用\",{\"1\":{\"145\":1}}],[\"是从之前的\",{\"1\":{\"115\":1,\"404\":1}}],[\"是本次新增的模块\",{\"1\":{\"115\":1,\"404\":1}}],[\"文件最低要求为\",{\"1\":{\"450\":1}}],[\"文件版本依然是\",{\"1\":{\"441\":1}}],[\"文件版本为\",{\"1\":{\"441\":1}}],[\"文件版本\",{\"1\":{\"115\":2,\"404\":2}}],[\"文档完善\",{\"1\":{\"45\":1}}],[\"文档更新\",{\"1\":{\"33\":1,\"37\":1}}],[\"文档\",{\"1\":{\"1\":1,\"61\":2,\"76\":1,\"123\":1}}],[\"给处理器实例\",{\"1\":{\"554\":1}}],[\"给你的\",{\"1\":{\"510\":1}}],[\"给\",{\"1\":{\"115\":2,\"404\":2}}],[\"表明被该注解标记的类可以作为\",{\"1\":{\"310\":1}}],[\"表明被该注解修饰的方法具有处理请求的能力\",{\"1\":{\"298\":1}}],[\"表\",{\"1\":{\"287\":3}}],[\"表示消息长度的字段占用几个字节\",{\"1\":{\"521\":2}}],[\"表示消息体经过sm4算法加密\",{\"1\":{\"383\":2}}],[\"表示消息体经过\",{\"1\":{\"136\":1,\"140\":1,\"382\":2,\"482\":1}}],[\"表示消息体不加密\",{\"1\":{\"136\":1,\"140\":1,\"382\":2,\"482\":1}}],[\"表示被修饰的字段类型是一个\",{\"1\":{\"528\":1}}],[\"表示被注解的方法是一个\",{\"1\":{\"508\":1}}],[\"表示被标记的类是响应体\",{\"1\":{\"353\":1}}],[\"表示该类中存在\",{\"1\":{\"507\":1}}],[\"表示该类是给客户端回复数据的\",{\"1\":{\"354\":1}}],[\"表示该类是一个消息处理器累\",{\"1\":{\"339\":1}}],[\"表示\",{\"1\":{\"501\":1}}],[\"表示给类用来接收请求体\",{\"1\":{\"333\":1}}],[\"表示交由\",{\"1\":{\"178\":1,\"179\":1,\"197\":1,\"198\":1}}],[\"表示是否启用内置的一些消息处理器\",{\"1\":{\"169\":1}}],[\"表示是否开启服务启动完成后显示组件统计信息\",{\"1\":{\"168\":1,\"220\":1}}],[\"表示这个模块是给\",{\"1\":{\"115\":1,\"404\":1}}],[\"表达时间语义的\",{\"1\":{\"107\":1}}],[\"后续版本会以\",{\"1\":{\"448\":1}}],[\"后续版本升级会实现\",{\"1\":{\"349\":1}}],[\"后续所有解析操作都要手动进行\",{\"1\":{\"326\":1}}],[\"后缀\",{\"1\":{\"115\":1,\"404\":1,\"406\":2}}],[\"后期可能删除\",{\"1\":{\"1\":1}}],[\"后期可能改名为\",{\"1\":{\"1\":1}}],[\"在msgid重复时可以使用list类型\",{\"1\":{\"505\":1}}],[\"在此处无实际意义\",{\"1\":{\"499\":1}}],[\"在实际处理消息的过程中\",{\"1\":{\"475\":1}}],[\"在这里继续扩你的消息类型就行了\",{\"1\":{\"458\":1}}],[\"在恰当的时机释放构建结果\",{\"1\":{\"435\":1}}],[\"在其他地方手动构建的\",{\"1\":{\"424\":1}}],[\"在使用方面\",{\"1\":{\"424\":1}}],[\"在响应消息中的用法\",{\"1\":{\"422\":1}}],[\"在某些特殊场景下\",{\"1\":{\"421\":1}}],[\"在用注解解析映射请求报文到实体类的时候\",{\"1\":{\"398\":1,\"551\":1}}],[\"在编码消息时\",{\"1\":{\"359\":1}}],[\"在本项目中\",{\"1\":{\"343\":1}}],[\"在处理器方法中注入\",{\"1\":{\"328\":1,\"329\":1,\"330\":1,\"331\":1,\"332\":1}}],[\"在默认配置的情况下\",{\"1\":{\"327\":1}}],[\"在\",{\"1\":{\"115\":1,\"180\":1,\"181\":1,\"286\":1,\"376\":1,\"389\":1,\"404\":1,\"422\":2,\"441\":1,\"442\":1,\"454\":1,\"455\":1,\"471\":1,\"567\":1}}],[\"在消息整体结构上没任何区别\",{\"1\":{\"18\":1}}],[\"写成了\",{\"1\":{\"115\":1,\"404\":1,\"448\":1}}],[\"写jt\",{\"1\":{\"18\":1}}],[\"为零表示使用外部指定的长度\",{\"1\":{\"480\":1}}],[\"为主\",{\"1\":{\"448\":1}}],[\"为例进行测试\",{\"1\":{\"468\":1}}],[\"为例\",{\"1\":{\"414\":1,\"558\":1}}],[\"为例来观察一下分包的过程\",{\"1\":{\"348\":1}}],[\"为什么编译源码一定要\",{\"0\":{\"440\":1},\"1\":{\"440\":1}}],[\"为什么会提供\",{\"0\":{\"398\":1,\"551\":1}}],[\"为什么要引入别名机制\",{\"0\":{\"225\":1}}],[\"为了编码简单\",{\"1\":{\"341\":1}}],[\"为\",{\"1\":{\"115\":2,\"225\":4,\"383\":2,\"404\":2,\"438\":1,\"445\":1,\"446\":1,\"448\":2,\"450\":1}}],[\"显式引入\",{\"1\":{\"113\":1}}],[\"排除\",{\"1\":{\"113\":1,\"454\":1,\"455\":1}}],[\"管理的类\",{\"1\":{\"297\":1}}],[\"管理\",{\"1\":{\"111\":1}}],[\"之外\",{\"1\":{\"418\":1,\"422\":1}}],[\"之后覆盖内置的处理逻辑即可\",{\"1\":{\"530\":1}}],[\"之后已经处理器方法出现异常时回调对应方法\",{\"1\":{\"322\":1}}],[\"之后版本默认配置如下\",{\"1\":{\"181\":1}}],[\"之后\",{\"1\":{\"162\":1,\"164\":1,\"497\":1}}],[\"之前版本只支持\",{\"1\":{\"448\":1}}],[\"之前版本的\",{\"1\":{\"410\":2}}],[\"之前的版本中\",{\"1\":{\"422\":1}}],[\"之前\",{\"1\":{\"162\":1,\"164\":1}}],[\"之前命名错误\",{\"1\":{\"108\":1}}],[\"之间新增了协议版本号属性\",{\"1\":{\"18\":1}}],[\"参考下面的\",{\"1\":{\"458\":1,\"459\":1}}],[\"参考下面两个章节\",{\"1\":{\"133\":1}}],[\"参考stackoverflow\",{\"1\":{\"225\":1}}],[\"参考java\",{\"1\":{\"155\":1}}],[\"参考\",{\"1\":{\"152\":1,\"153\":1,\"154\":1,\"566\":1}}],[\"参数中拿到\",{\"1\":{\"536\":1}}],[\"参数自动注入\",{\"0\":{\"509\":1}}],[\"参数项的值的类型不是固定的\",{\"1\":{\"422\":1}}],[\"参数项的值为例\",{\"1\":{\"418\":1}}],[\"参数解析器\",{\"1\":{\"327\":1}}],[\"参数\",{\"1\":{\"107\":2}}],[\"参见\",{\"1\":{\"98\":1,\"100\":1,\"111\":1,\"150\":1,\"158\":1}}],[\"扩展msgtype\",{\"0\":{\"542\":1}}],[\"扩展车辆信号状态位\",{\"1\":{\"287\":1}}],[\"扩展\",{\"1\":{\"107\":2,\"229\":1}}],[\"扩展注解别名\",{\"1\":{\"107\":1}}],[\"互转\",{\"1\":{\"107\":1}}],[\"来覆盖默认逻辑\",{\"1\":{\"544\":1}}],[\"来完成注入\",{\"1\":{\"509\":1}}],[\"来控制\",{\"1\":{\"468\":1,\"487\":1}}],[\"来控制流水号生成策略\",{\"1\":{\"395\":1}}],[\"来编译\",{\"1\":{\"444\":1}}],[\"来写入内容\",{\"1\":{\"435\":1,\"436\":1}}],[\"来生成自增的流水号\",{\"1\":{\"434\":1,\"435\":1}}],[\"来指定了消息id\",{\"1\":{\"434\":1}}],[\"来构建报文\",{\"1\":{\"435\":1,\"436\":1}}],[\"来构建\",{\"1\":{\"433\":1}}],[\"来手动写入数据\",{\"1\":{\"432\":2}}],[\"来手动读取数据\",{\"1\":{\"427\":1,\"429\":2}}],[\"来简化这种操作\",{\"1\":{\"422\":1}}],[\"来表示\",{\"1\":{\"422\":1,\"523\":1}}],[\"来观察分包请求的处理过程\",{\"1\":{\"348\":1}}],[\"来观察请求分包消息\",{\"1\":{\"348\":1}}],[\"来了解\",{\"1\":{\"343\":1}}],[\"来将请求和\",{\"1\":{\"341\":1}}],[\"来将原始的\",{\"1\":{\"326\":1}}],[\"来说\",{\"1\":{\"246\":1}}],[\"来解析的\",{\"1\":{\"225\":1}}],[\"来解析报文的\",{\"1\":{\"225\":1}}],[\"来处理组件注册时的\",{\"1\":{\"558\":1}}],[\"来处理了\",{\"1\":{\"529\":1}}],[\"来处理\",{\"1\":{\"206\":1,\"297\":1,\"529\":1}}],[\"来扩展\",{\"1\":{\"107\":1}}],[\"来自定义配置\",{\"1\":{\"39\":1}}],[\"对于请求消息的处理完全是由\",{\"1\":{\"536\":1}}],[\"对于这种直接返回\",{\"1\":{\"523\":1}}],[\"对于这种情况\",{\"1\":{\"422\":1}}],[\"对于\",{\"1\":{\"492\":1}}],[\"对808消息的处理流程已经搭建完毕\",{\"1\":{\"487\":1}}],[\"对象编码为\",{\"1\":{\"371\":1}}],[\"对象\",{\"1\":{\"370\":1,\"389\":1}}],[\"对响应给客户端的消息类型没有强制指定固定类型\",{\"1\":{\"351\":1}}],[\"对\",{\"1\":{\"105\":1,\"468\":1}}],[\"对应到java中为\",{\"1\":{\"496\":1}}],[\"对应java数据类型\",{\"0\":{\"480\":1}}],[\"对应上面描述的处理流程\",{\"1\":{\"389\":1}}],[\"对应的\",{\"1\":{\"441\":1,\"454\":3,\"455\":3}}],[\"对应的平台消息的\",{\"1\":{\"434\":1,\"435\":1,\"436\":1}}],[\"对应的平台消息的流水号\",{\"1\":{\"434\":1,\"435\":1,\"436\":1}}],[\"对应的消息\",{\"1\":{\"319\":1}}],[\"对应的终端注册消息的流水号\",{\"1\":{\"316\":1,\"354\":1,\"357\":1,\"432\":1}}],[\"对应车上油量表读数\",{\"1\":{\"287\":1}}],[\"对应车上里程表读数\",{\"1\":{\"287\":1}}],[\"对应\",{\"1\":{\"23\":2,\"170\":2,\"173\":1,\"194\":1}}],[\"辅助类\",{\"1\":{\"103\":1}}],[\"辅助工具\",{\"0\":{\"425\":1},\"1\":{\"61\":1}}],[\"下找到对应代码\",{\"1\":{\"461\":1,\"470\":1,\"483\":1,\"488\":1,\"493\":1,\"505\":1,\"506\":1,\"510\":1,\"511\":1,\"515\":1,\"529\":1,\"535\":1}}],[\"下一个流水号\",{\"1\":{\"395\":1}}],[\"下发消息\",{\"1\":{\"318\":1,\"319\":1,\"320\":1,\"515\":2}}],[\"下面以\",{\"1\":{\"468\":1}}],[\"下面以终端注册消息\",{\"1\":{\"348\":1}}],[\"下面代码中的\",{\"1\":{\"459\":1}}],[\"下面依次从\",{\"1\":{\"428\":1}}],[\"下面两行代码给原始bytebuf中加入一些测试数据\",{\"1\":{\"428\":1}}],[\"下面示例中的\",{\"1\":{\"422\":1}}],[\"下面简单演示\",{\"1\":{\"422\":1}}],[\"下面是示例性的文件处理流程\",{\"1\":{\"567\":1}}],[\"下面是对几个特殊扩展消息\",{\"1\":{\"567\":1}}],[\"下面是\",{\"1\":{\"423\":1}}],[\"下面是新的\",{\"1\":{\"410\":1}}],[\"下面是一个示例\",{\"1\":{\"386\":1}}],[\"下面是回复客户端的部分伪代码\",{\"1\":{\"354\":1}}],[\"下面是被\",{\"1\":{\"354\":1}}],[\"下面是使用注解别名实现的同样效果的实体类映射\",{\"1\":{\"225\":1}}],[\"下面的\",{\"1\":{\"333\":1}}],[\"下面就以位置上报报文中的经纬度字段和时间字段为例\",{\"1\":{\"232\":1}}],[\"下面模块的最低\",{\"1\":{\"131\":1}}],[\"下没有\",{\"1\":{\"101\":1}}],[\"下载地址\",{\"1\":{\"9\":1}}],[\"==>\",{\"1\":{\"567\":4}}],[\"==\",{\"1\":{\"314\":1,\"316\":1,\"354\":1,\"383\":4,\"393\":1,\"508\":2,\"526\":2,\"547\":1,\"567\":6}}],[\"=\",{\"1\":{\"101\":1,\"119\":1,\"145\":1,\"148\":1,\"184\":1,\"185\":2,\"197\":1,\"198\":1,\"225\":18,\"226\":24,\"227\":20,\"234\":2,\"235\":7,\"236\":3,\"237\":2,\"239\":3,\"240\":8,\"241\":5,\"242\":3,\"246\":16,\"251\":5,\"260\":3,\"263\":3,\"267\":7,\"268\":7,\"270\":10,\"271\":5,\"273\":6,\"274\":6,\"276\":5,\"277\":5,\"279\":6,\"280\":3,\"282\":6,\"283\":3,\"286\":20,\"287\":83,\"290\":25,\"293\":58,\"300\":4,\"305\":18,\"308\":8,\"312\":4,\"316\":9,\"318\":5,\"320\":16,\"328\":2,\"329\":2,\"330\":2,\"331\":2,\"332\":2,\"333\":4,\"334\":1,\"339\":4,\"347\":5,\"354\":12,\"360\":1,\"366\":9,\"377\":2,\"379\":2,\"383\":2,\"386\":6,\"390\":1,\"392\":1,\"393\":4,\"395\":5,\"414\":4,\"415\":5,\"418\":16,\"419\":3,\"422\":11,\"423\":3,\"428\":2,\"431\":3,\"434\":12,\"435\":5,\"436\":5,\"458\":3,\"468\":1,\"473\":1,\"480\":3,\"487\":1,\"495\":34,\"497\":6,\"498\":8,\"499\":10,\"501\":2,\"502\":3,\"504\":12,\"505\":19,\"508\":3,\"512\":1,\"515\":25,\"517\":2,\"518\":6,\"522\":3,\"523\":2,\"526\":10,\"529\":3,\"532\":3,\"534\":2,\"538\":7,\"542\":3,\"543\":1,\"547\":2,\"558\":1,\"559\":3,\"567\":19}}],[\"消息转换器\",{\"0\":{\"533\":1}}],[\"消息的处理器\",{\"1\":{\"487\":1}}],[\"消息有误\",{\"1\":{\"434\":1,\"435\":1,\"436\":1,\"523\":1,\"526\":1}}],[\"消息中\",{\"1\":{\"422\":1}}],[\"消息中的用法\",{\"1\":{\"421\":1}}],[\"消息中的\",{\"1\":{\"418\":1}}],[\"消息属性中的\",{\"1\":{\"383\":2}}],[\"消息加密\",{\"0\":{\"380\":1}}],[\"消息给终端\",{\"1\":{\"346\":1}}],[\"消息下发流程图\",{\"0\":{\"319\":1}}],[\"消息下发\",{\"0\":{\"317\":1,\"511\":1}}],[\"消息类型\",{\"0\":{\"457\":1,\"541\":1},\"1\":{\"299\":1,\"311\":1}}],[\"消息处理流程\",{\"0\":{\"560\":1},\"1\":{\"549\":1}}],[\"消息处理完成后对客户端的响应也是一个\",{\"1\":{\"536\":1}}],[\"消息处理服务的搭建\",{\"1\":{\"461\":1}}],[\"消息处理\",{\"1\":{\"349\":1}}],[\"消息处理线程池的核心线程数\",{\"1\":{\"214\":1}}],[\"消息处理线程池\",{\"1\":{\"213\":1}}],[\"消息处理线程池相关的配置\",{\"1\":{\"150\":1,\"158\":1}}],[\"消息处理可以用\",{\"1\":{\"206\":1}}],[\"消息处理器注册\",{\"0\":{\"506\":1}}],[\"消息处理器处理\",{\"1\":{\"319\":1}}],[\"消息处理器截图如下\",{\"1\":{\"291\":1,\"294\":1}}],[\"消息处理器如下\",{\"1\":{\"290\":1,\"293\":1}}],[\"消息处理器\",{\"0\":{\"536\":1},\"1\":{\"168\":1}}],[\"消息包最大大小\",{\"1\":{\"360\":1}}],[\"消息包总数\",{\"1\":{\"136\":1,\"140\":1,\"482\":1}}],[\"消息包封装项\",{\"1\":{\"136\":2,\"140\":2,\"482\":2}}],[\"消息流水号\",{\"1\":{\"136\":2,\"140\":2,\"482\":2}}],[\"消息id占用几个字节\",{\"1\":{\"521\":2}}],[\"消息id用1个字节表示\",{\"1\":{\"505\":1}}],[\"消息id\",{\"1\":{\"136\":2,\"140\":2,\"458\":2,\"472\":1,\"473\":1,\"482\":2,\"517\":1,\"532\":1}}],[\"消息体中第4~7个字节\",{\"1\":{\"498\":1}}],[\"消息体总长度\",{\"1\":{\"495\":1}}],[\"消息体借助\",{\"1\":{\"435\":1,\"436\":1}}],[\"消息体可能是密文\",{\"1\":{\"382\":1}}],[\"消息体卫长消息\",{\"1\":{\"136\":1,\"140\":1,\"382\":2,\"482\":1}}],[\"消息体长度自动计算\",{\"1\":{\"532\":1}}],[\"消息体长度\",{\"1\":{\"136\":1,\"140\":1,\"382\":2,\"482\":1}}],[\"消息体\",{\"1\":{\"135\":1,\"139\":1,\"389\":1,\"472\":1,\"481\":1,\"532\":1}}],[\"消息体属性中的\",{\"1\":{\"382\":1}}],[\"消息体属性中保留的第15个\",{\"1\":{\"311\":1}}],[\"消息体属性格式如下\",{\"1\":{\"382\":1}}],[\"消息体属性\",{\"1\":{\"18\":1,\"136\":2,\"140\":2,\"382\":2,\"482\":2,\"532\":1}}],[\"消息头中的前两个字节\",{\"1\":{\"458\":1}}],[\"消息头的结构如下所示\",{\"1\":{\"136\":1,\"140\":1,\"482\":1}}],[\"消息头\",{\"0\":{\"136\":1,\"140\":1,\"482\":1},\"1\":{\"135\":1,\"139\":1,\"481\":1,\"532\":1}}],[\"消息结构\",{\"0\":{\"135\":1,\"139\":1,\"481\":1}}],[\"消息\",{\"1\":{\"96\":1,\"342\":1,\"349\":1,\"357\":1,\"567\":1}}],[\"没啥其他作用\",{\"1\":{\"567\":1}}],[\"没有其他任何属性\",{\"1\":{\"297\":1}}],[\"没有维护\",{\"1\":{\"225\":1}}],[\"没有考虑\",{\"1\":{\"90\":1}}],[\"没钱的捧个人场\",{\"1\":{\"5\":1}}],[\"详情\",{\"1\":{\"444\":1}}],[\"详情看下面\",{\"1\":{\"421\":1}}],[\"详情见\",{\"1\":{\"88\":1,\"181\":1,\"422\":1}}],[\"详情请参考这位兄台的文章\",{\"1\":{\"7\":1}}],[\"涉及到的方法如下\",{\"1\":{\"81\":1}}],[\"涉及到的依赖如下\",{\"1\":{\"39\":1}}],[\"操作\",{\"1\":{\"81\":1,\"414\":1,\"424\":2}}],[\"unknown\",{\"1\":{\"480\":1}}],[\"unpooled\",{\"1\":{\"435\":1,\"512\":1,\"538\":1}}],[\"unmodifiablesetversion2013\",{\"1\":{\"357\":1}}],[\"unmodifiablesetversion2011\",{\"1\":{\"342\":1}}],[\"unsigneddword\",{\"1\":{\"428\":1}}],[\"unsigned\",{\"1\":{\"243\":1}}],[\"unsignedlongvalue\",{\"1\":{\"80\":1}}],[\"upload\",{\"1\":{\"508\":2,\"526\":3,\"534\":1,\"538\":1,\"539\":1,\"542\":1}}],[\"up\",{\"1\":{\"236\":2,\"444\":1}}],[\"upgrades\",{\"0\":{\"65\":1,\"70\":1,\"82\":1,\"85\":1,\"116\":1}}],[\"util\",{\"1\":{\"107\":2,\"150\":1,\"152\":1,\"153\":1,\"154\":1,\"155\":1,\"158\":1,\"214\":1,\"215\":1,\"216\":1,\"217\":1,\"543\":1}}],[\"utils\",{\"1\":{\"82\":1,\"532\":1}}],[\"废弃\",{\"1\":{\"69\":1,\"107\":1}}],[\"error\",{\"1\":{\"538\":5,\"567\":1}}],[\"emptylist\",{\"1\":{\"567\":1}}],[\"empty\",{\"1\":{\"524\":1,\"543\":1}}],[\"emptyrequestbody\",{\"1\":{\"202\":1}}],[\"equals\",{\"1\":{\"508\":2,\"526\":2}}],[\"eclipse\",{\"1\":{\"446\":3}}],[\"ecbencrypt\",{\"1\":{\"383\":1}}],[\"ecbdecrypt\",{\"1\":{\"383\":1}}],[\"e636f6d0000008102000b000000840101000000320416320a1efe7e\",{\"1\":{\"419\":1,\"423\":1}}],[\"e\",{\"1\":{\"241\":2,\"512\":2,\"567\":2}}],[\"else\",{\"1\":{\"236\":2,\"241\":2,\"386\":1}}],[\"elementtype\",{\"1\":{\"226\":3,\"227\":2,\"235\":1,\"240\":1}}],[\"epolleventloopgroup\",{\"1\":{\"386\":2}}],[\"epollserversocketchannel\",{\"1\":{\"386\":1}}],[\"epoll\",{\"0\":{\"180\":1,\"375\":1},\"1\":{\"145\":2,\"175\":2,\"180\":1,\"376\":1,\"377\":2,\"386\":4}}],[\"end\",{\"1\":{\"530\":2}}],[\"endindex\",{\"1\":{\"499\":1}}],[\"endbitindex\",{\"1\":{\"307\":1,\"520\":1}}],[\"environmentaware\",{\"1\":{\"397\":1,\"550\":1}}],[\"enablejt808serverautoconfig\",{\"1\":{\"486\":2}}],[\"enable\",{\"0\":{\"202\":1},\"1\":{\"558\":1}}],[\"enabled=true\",{\"1\":{\"107\":1}}],[\"enabled\",{\"0\":{\"168\":1,\"169\":1,\"176\":1,\"201\":1,\"206\":1,\"210\":1},\"1\":{\"101\":1,\"109\":1,\"119\":1,\"145\":1,\"147\":2,\"148\":1,\"149\":1,\"151\":1,\"166\":2,\"168\":1,\"169\":1,\"175\":2,\"181\":2,\"199\":1,\"373\":1,\"379\":2,\"466\":2}}],[\"enum\",{\"1\":{\"193\":1,\"458\":1,\"480\":1,\"542\":1}}],[\"entityjt808msgbuilder\",{\"0\":{\"434\":1},\"1\":{\"434\":1}}],[\"entity\",{\"0\":{\"200\":1,\"202\":1},\"1\":{\"191\":1,\"434\":2,\"558\":2}}],[\"encoding\",{\"1\":{\"532\":1}}],[\"encodemsgbody\",{\"1\":{\"538\":2}}],[\"encode\",{\"1\":{\"371\":1,\"419\":1,\"423\":1}}],[\"encoder\",{\"1\":{\"166\":1,\"170\":1,\"359\":2,\"466\":1}}],[\"encryptresponsebody\",{\"1\":{\"383\":1}}],[\"encryptiontype=0\",{\"1\":{\"348\":1}}],[\"encryptiontype\",{\"1\":{\"88\":3,\"383\":11}}],[\"exists\",{\"1\":{\"567\":2}}],[\"expireafterwrite\",{\"1\":{\"567\":1}}],[\"expectedtargetclasstype\",{\"1\":{\"480\":4}}],[\"expression\",{\"1\":{\"16\":1}}],[\"executed\",{\"1\":{\"444\":1}}],[\"executorservice\",{\"1\":{\"374\":1}}],[\"executor\",{\"0\":{\"161\":1},\"1\":{\"69\":1,\"109\":1,\"145\":1,\"158\":1,\"159\":1,\"373\":1}}],[\"exclusions>\",{\"1\":{\"454\":1,\"455\":1}}],[\"exclusion>\",{\"1\":{\"454\":1,\"455\":1}}],[\"exchange\",{\"1\":{\"322\":6,\"331\":3,\"332\":1,\"342\":2,\"357\":5,\"379\":2,\"389\":8,\"429\":3,\"432\":5}}],[\"exceptionargumentresolver\",{\"1\":{\"509\":1}}],[\"exceptionhandler\",{\"1\":{\"210\":1,\"211\":1,\"212\":1,\"491\":1}}],[\"exception\",{\"0\":{\"209\":1,\"212\":1},\"1\":{\"191\":1,\"322\":2,\"515\":1}}],[\"extramsgbody\",{\"0\":{\"521\":1},\"1\":{\"505\":1,\"521\":1}}],[\"extramsgbody注解不能丢\",{\"1\":{\"505\":1}}],[\"extrainfo\",{\"1\":{\"505\":1}}],[\"extrainfoitemlist\",{\"1\":{\"504\":1}}],[\"extrainfoitem\",{\"1\":{\"504\":1}}],[\"extraitemmap\",{\"1\":{\"287\":1}}],[\"extraitem\",{\"1\":{\"286\":1,\"293\":1}}],[\"extraitemlist\",{\"1\":{\"286\":1,\"287\":1,\"293\":1}}],[\"extrafield解析\",{\"0\":{\"505\":1}}],[\"extrafield\",{\"0\":{\"521\":1},\"1\":{\"503\":1,\"505\":8,\"521\":1}}],[\"ext\",{\"1\":{\"487\":1}}],[\"extendedjt808fielddeserializergeopoint\",{\"1\":{\"235\":1,\"236\":1}}],[\"extendedjt808fielddeserializerlocationextraitem\",{\"1\":{\"90\":1}}],[\"extends\",{\"1\":{\"227\":2,\"236\":1,\"241\":1,\"322\":1,\"360\":1,\"385\":1,\"386\":1,\"389\":1,\"392\":1,\"394\":1,\"410\":1,\"414\":1,\"419\":1,\"423\":1,\"473\":1,\"474\":1,\"529\":1,\"530\":1,\"531\":1,\"534\":1,\"536\":2,\"538\":2,\"539\":1,\"543\":1,\"544\":1,\"546\":1,\"547\":1,\"548\":1}}],[\"extension\",{\"0\":{\"186\":1,\"575\":1}}],[\"eventexecutorgroup\",{\"1\":{\"69\":1}}],[\"eventbus\",{\"1\":{\"69\":1}}],[\"去掉\",{\"1\":{\"69\":1}}],[\"❤️\",{\"0\":{\"62\":1,\"66\":1,\"71\":1,\"77\":1,\"132\":1}}],[\"由以上源码不难看出组件的优先级问题\",{\"1\":{\"559\":1}}],[\"由于附加项的类型不固定\",{\"1\":{\"504\":1}}],[\"由谁来处理消息取决于\",{\"1\":{\"336\":1}}],[\"由\",{\"1\":{\"55\":2,\"58\":2}}],[\"改名为\",{\"1\":{\"108\":1}}],[\"改动原因见\",{\"1\":{\"55\":1,\"58\":1}}],[\"改为高版本\",{\"1\":{\"441\":1}}],[\"改为比\",{\"1\":{\"441\":1}}],[\"改为\",{\"1\":{\"39\":1,\"55\":2,\"58\":2,\"131\":1}}],[\"边界情况下默认转义逻辑bug\",{\"1\":{\"48\":1}}],[\"修饰的请求消息体实体类\",{\"1\":{\"558\":1}}],[\"修饰的实体类的成员变量上\",{\"1\":{\"413\":1}}],[\"修饰的消息处理方法\",{\"1\":{\"319\":1}}],[\"修复\",{\"1\":{\"127\":1}}],[\"修复示例代码中消息消息的返回值类型\",{\"1\":{\"48\":1}}],[\"修改\",{\"1\":{\"115\":1,\"404\":1,\"445\":1}}],[\"修改为\",{\"1\":{\"115\":1,\"404\":1,\"406\":1,\"407\":1}}],[\"修改自定义配置的方式\",{\"1\":{\"39\":1}}],[\"默认tcp端口\",{\"1\":{\"488\":1}}],[\"默认的\",{\"1\":{\"468\":1}}],[\"默认的配置可以在default\",{\"1\":{\"144\":1,\"190\":1}}],[\"默认实现类\",{\"1\":{\"434\":1,\"435\":1}}],[\"默认实现中在\",{\"1\":{\"410\":1}}],[\"默认为基于caffeine的实现\",{\"1\":{\"348\":1}}],[\"默认是\",{\"1\":{\"149\":1}}],[\"默认\",{\"1\":{\"145\":1,\"360\":2,\"449\":1}}],[\"默认配置\",{\"0\":{\"144\":1}}],[\"默认值是\",{\"1\":{\"359\":1}}],[\"默认值\",{\"1\":{\"152\":1,\"153\":1,\"154\":1,\"155\":1,\"156\":1,\"157\":1,\"162\":1,\"163\":1,\"164\":2,\"168\":1,\"169\":1,\"173\":1,\"176\":1,\"177\":1,\"178\":2,\"179\":2,\"193\":1,\"194\":1,\"196\":1,\"197\":2,\"198\":2,\"201\":1,\"202\":1,\"203\":1,\"204\":1,\"206\":1,\"207\":1,\"208\":1,\"210\":1,\"211\":1,\"212\":1,\"214\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":1,\"220\":1,\"299\":1,\"303\":1,\"311\":1,\"314\":1,\"528\":1}}],[\"默认值改为\",{\"1\":{\"109\":1}}],[\"默认值都是\",{\"1\":{\"23\":1,\"199\":1}}],[\"默认读写空闲时间改为20分钟\",{\"1\":{\"48\":1}}],[\"中将苏标码流上传的报文模拟成了普通的\",{\"1\":{\"567\":1}}],[\"中可以实现该接口以注入\",{\"1\":{\"554\":1}}],[\"中可以不用指定这个属性了\",{\"1\":{\"225\":1}}],[\"中使用spring容器的其他bean\",{\"1\":{\"510\":1}}],[\"中使用如下类型中的若干个\",{\"1\":{\"327\":1}}],[\"中对应的\",{\"1\":{\"497\":1}}],[\"中扩展枚举就行了\",{\"1\":{\"459\":1}}],[\"中默认的\",{\"1\":{\"453\":1}}],[\"中还是能正常解析\",{\"1\":{\"448\":1}}],[\"中写入指定类型的\",{\"1\":{\"430\":1}}],[\"中读取\",{\"1\":{\"428\":1}}],[\"中读取指定类型的\",{\"1\":{\"427\":1}}],[\"中自动释放\",{\"1\":{\"424\":1}}],[\"中自带的\",{\"1\":{\"113\":1}}],[\"中提供的一系列工厂方法来构建\",{\"1\":{\"423\":1}}],[\"中给\",{\"1\":{\"422\":1}}],[\"中借鉴\",{\"1\":{\"397\":1,\"550\":1}}],[\"中新增\",{\"1\":{\"394\":1}}],[\"中新增特性的简化\",{\"1\":{\"105\":1}}],[\"中替换为自定义的\",{\"1\":{\"392\":1}}],[\"中获取子包信息\",{\"1\":{\"364\":1}}],[\"中唯一的选择\",{\"1\":{\"351\":1}}],[\"中处于等待状态的线程会拿到这个\",{\"1\":{\"319\":1}}],[\"中等待\",{\"1\":{\"319\":1}}],[\"中去掉了配置包手动扫描的功能\",{\"1\":{\"297\":1}}],[\"中没有指定的key\",{\"1\":{\"287\":1}}],[\"中内置的一堆别名\",{\"1\":{\"243\":1}}],[\"中内置了\",{\"1\":{\"237\":1,\"242\":1}}],[\"中引入的辅助类\",{\"1\":{\"412\":1,\"416\":1,\"420\":1}}],[\"中引入的注解别名机制来扩展的自定义注解\",{\"1\":{\"232\":1}}],[\"中引入了\",{\"1\":{\"148\":1}}],[\"中已经废弃\",{\"1\":{\"160\":1}}],[\"中\",{\"1\":{\"144\":1,\"190\":1,\"225\":1,\"236\":1,\"241\":1,\"243\":1,\"298\":1,\"301\":1,\"319\":1,\"364\":1,\"398\":1,\"410\":1,\"422\":1,\"471\":1,\"480\":1,\"491\":1,\"551\":1}}],[\"中查看\",{\"1\":{\"144\":1,\"190\":1}}],[\"中改成了\",{\"1\":{\"115\":1,\"404\":1}}],[\"中删除\",{\"1\":{\"111\":1}}],[\"中调用其他bean\",{\"1\":{\"50\":1}}],[\"中调用其他的由spring管理的bean\",{\"1\":{\"47\":1}}],[\"中的诸如\",{\"1\":{\"397\":1,\"550\":1}}],[\"中的线程分开\",{\"1\":{\"319\":1}}],[\"中的线程应该和\",{\"1\":{\"319\":1}}],[\"中的线程取不到值\",{\"1\":{\"319\":1}}],[\"中的元素的\",{\"1\":{\"286\":1}}],[\"中的所有新特性\",{\"1\":{\"100\":1}}],[\"中的\",{\"1\":{\"16\":1,\"115\":1,\"297\":1,\"310\":1,\"341\":1,\"404\":1,\"475\":1,\"517\":1,\"518\":1}}],[\"以方便使用\",{\"1\":{\"533\":1}}],[\"以度位单位的纬度值\",{\"1\":{\"500\":1}}],[\"以上\",{\"1\":{\"441\":2}}],[\"以下是\",{\"1\":{\"559\":1}}],[\"以下为示例性的处理位置消息的\",{\"1\":{\"538\":1}}],[\"以下为示例性的解析位置消息的\",{\"1\":{\"534\":1}}],[\"以下为对应的handler返回\",{\"1\":{\"526\":1}}],[\"以下为终端通用应答的示例代码\",{\"1\":{\"526\":1}}],[\"以下情况不会发送数据给客户端\",{\"1\":{\"524\":1}}],[\"以下的版本\",{\"1\":{\"448\":1}}],[\"以下的版本中这三个配置项的默认值都是\",{\"1\":{\"181\":1}}],[\"以下面这条位置上报报文\",{\"1\":{\"414\":1}}],[\"以便在消息处理流程的关键步骤\",{\"1\":{\"389\":1}}],[\"以便于在\",{\"1\":{\"47\":1,\"50\":1,\"510\":1}}],[\"以\",{\"1\":{\"133\":1,\"149\":1,\"225\":1,\"295\":1,\"558\":1}}],[\"以及使用的版本\",{\"1\":{\"4\":1}}],[\"可替换内置\",{\"1\":{\"548\":1}}],[\"可能会对映射关系更清晰一些\",{\"1\":{\"495\":1}}],[\"可能是\",{\"1\":{\"422\":1}}],[\"可取值为\",{\"1\":{\"442\":2}}],[\"可扩展的服务端分包补传处理流程\",{\"1\":{\"349\":1}}],[\"可用的\",{\"1\":{\"304\":1}}],[\"可选值位于\",{\"1\":{\"193\":1}}],[\"可选择性地交给spring管理\",{\"1\":{\"47\":1,\"50\":1}}],[\"可配置的\",{\"1\":{\"168\":1}}],[\"可以在单个组件内调用其他专门的复杂逻辑处理流程\",{\"1\":{\"558\":1}}],[\"可以自己实现\",{\"1\":{\"530\":1}}],[\"可以用内置的\",{\"1\":{\"523\":1}}],[\"可以用类似如下的方式去嵌套解析\",{\"1\":{\"505\":1}}],[\"可以用类似于\",{\"1\":{\"210\":1}}],[\"可以用\",{\"1\":{\"501\":1}}],[\"可以直接基于注解来完成自动映射\",{\"1\":{\"492\":1}}],[\"可以使用\",{\"1\":{\"434\":1,\"435\":1,\"462\":1,\"484\":1}}],[\"可以忽略这个升级提示\",{\"1\":{\"409\":1}}],[\"可以有多个\",{\"1\":{\"394\":2}}],[\"可以通过\",{\"1\":{\"536\":1}}],[\"可以通过如下代码片段的方式来自定义组件\",{\"1\":{\"531\":1}}],[\"可以通过自定义\",{\"1\":{\"383\":1}}],[\"可以通过复写\",{\"1\":{\"323\":1}}],[\"可以声明一个\",{\"1\":{\"371\":1}}],[\"可以提供自己的实现类在这里返回自己的\",{\"1\":{\"370\":1}}],[\"可以从启动日志中的组件统计信息中看到内置了一个对\",{\"1\":{\"487\":1}}],[\"可以从启动日志中的组件统计信息中看到内置了一些消息处理器\",{\"1\":{\"468\":1}}],[\"可以从中读取配置项\",{\"1\":{\"385\":1,\"410\":1}}],[\"可以从\",{\"1\":{\"364\":1}}],[\"可以观察到类似如下日志\",{\"1\":{\"348\":1}}],[\"可以省略\",{\"1\":{\"304\":1,\"305\":1,\"308\":1,\"315\":1}}],[\"可以将\",{\"1\":{\"301\":1,\"359\":1}}],[\"可以参考下文的说明来编译源码\",{\"1\":{\"438\":1}}],[\"可以参考\",{\"1\":{\"243\":1,\"469\":1,\"488\":3}}],[\"可以混合使用\",{\"1\":{\"230\":1}}],[\"可以转为\",{\"1\":{\"107\":1}}],[\"可以转换为\",{\"1\":{\"107\":1}}],[\"可以是支持\",{\"1\":{\"13\":1}}],[\"重写配置方法或覆盖父类的bean\",{\"1\":{\"531\":1}}],[\"重写了核心\",{\"1\":{\"16\":1}}],[\"重命名过来的\",{\"1\":{\"115\":1,\"404\":1}}],[\"重构\",{\"1\":{\"43\":1}}],[\"52\",{\"1\":{\"441\":5,\"449\":4}}],[\"5之前版本\",{\"0\":{\"387\":1}}],[\"5以及之后版本\",{\"0\":{\"385\":1}}],[\"55\",{\"1\":{\"115\":1,\"404\":1}}],[\"5\",{\"0\":{\"42\":1,\"79\":1,\"120\":1,\"375\":1,\"408\":1},\"1\":{\"65\":1,\"70\":1,\"115\":1,\"123\":1,\"140\":2,\"145\":1,\"175\":1,\"180\":1,\"293\":3,\"305\":2,\"376\":1,\"404\":1,\"429\":3,\"454\":2,\"473\":1,\"515\":1,\"532\":1,\"567\":1}}],[\"oss\",{\"1\":{\"567\":2}}],[\"other\",{\"1\":{\"559\":2}}],[\"others\",{\"0\":{\"33\":1,\"37\":1,\"41\":1,\"45\":1,\"49\":1,\"109\":1,\"165\":1}}],[\"out\",{\"1\":{\"532\":3}}],[\"onsessionclose\",{\"1\":{\"394\":1}}],[\"onsessionremove\",{\"1\":{\"394\":1}}],[\"onsessionadd\",{\"1\":{\"394\":1,\"547\":1}}],[\"operator1\",{\"1\":{\"415\":2}}],[\"operator\",{\"1\":{\"415\":5}}],[\"optional<respmsgbody>\",{\"1\":{\"538\":2}}],[\"optional<locationuploadmsgbody>\",{\"1\":{\"534\":1}}],[\"optional<jt808session>\",{\"1\":{\"512\":1}}],[\"optional<msgtype>\",{\"1\":{\"458\":2,\"459\":1,\"542\":1,\"543\":2}}],[\"optional\",{\"1\":{\"458\":1,\"524\":1,\"534\":1,\"538\":1,\"542\":1,\"543\":1,\"567\":1}}],[\"option\",{\"1\":{\"386\":2}}],[\"ops\",{\"1\":{\"347\":1,\"365\":1}}],[\"ol>\",{\"1\":{\"322\":3,\"346\":1,\"389\":1}}],[\"or\",{\"1\":{\"459\":1}}],[\"originalbuf\",{\"1\":{\"435\":6,\"436\":4}}],[\"originalbytebuf\",{\"1\":{\"428\":10,\"431\":7}}],[\"originalchecksum\",{\"1\":{\"334\":1,\"472\":1}}],[\"org\",{\"1\":{\"334\":1,\"341\":1,\"379\":5,\"475\":1,\"532\":1}}],[\"orelsethrow\",{\"1\":{\"318\":1,\"320\":1,\"366\":1}}],[\"ordered\",{\"1\":{\"379\":3}}],[\"orderedcomponent\",{\"0\":{\"559\":1},\"1\":{\"322\":1,\"389\":1,\"393\":1,\"394\":1,\"536\":1,\"558\":1,\"559\":4}}],[\"order\",{\"1\":{\"225\":8,\"226\":9,\"227\":6,\"234\":2,\"235\":3,\"237\":2,\"239\":1,\"240\":3,\"242\":1,\"246\":6,\"286\":9,\"287\":3,\"290\":11,\"293\":27,\"303\":1,\"305\":7,\"308\":1,\"312\":1,\"314\":1,\"316\":3,\"333\":1,\"354\":3,\"379\":3,\"418\":5,\"422\":5,\"434\":3,\"504\":2,\"515\":5,\"526\":3,\"528\":1,\"559\":4}}],[\"ofminutes\",{\"1\":{\"567\":1}}],[\"ofnullable\",{\"1\":{\"458\":1,\"542\":1,\"567\":1}}],[\"ofbytes\",{\"1\":{\"419\":1,\"423\":1}}],[\"ofbyte\",{\"1\":{\"419\":1,\"423\":1}}],[\"ofword\",{\"1\":{\"419\":1,\"423\":1}}],[\"ofstring\",{\"1\":{\"419\":1,\"423\":1}}],[\"ofdword\",{\"1\":{\"419\":1,\"423\":1}}],[\"of\",{\"1\":{\"320\":3,\"342\":1,\"357\":1,\"419\":1,\"423\":1,\"428\":1,\"431\":1,\"515\":2,\"523\":2,\"534\":1,\"538\":4}}],[\"ofpattern\",{\"1\":{\"241\":1,\"567\":2}}],[\"offset\",{\"1\":{\"81\":4}}],[\"objectprovider<jt808sessionmanagereventlistener>\",{\"1\":{\"393\":1}}],[\"object>\",{\"1\":{\"287\":1}}],[\"object>>\",{\"1\":{\"122\":1}}],[\"object\",{\"1\":{\"236\":1,\"241\":1,\"287\":4,\"290\":2,\"320\":2,\"322\":3,\"326\":1,\"333\":1,\"389\":2,\"393\":1,\"515\":2}}],[\"override\",{\"1\":{\"236\":1,\"241\":1,\"342\":3,\"357\":3,\"374\":1,\"383\":2,\"386\":2,\"390\":1,\"393\":1,\"432\":1,\"458\":3,\"502\":1,\"523\":2,\"529\":1,\"530\":3,\"534\":2,\"538\":5,\"539\":1,\"542\":1,\"543\":1,\"544\":1,\"546\":1,\"547\":2,\"548\":3}}],[\"overview\",{\"0\":{\"142\":1}}],[\"oaks\",{\"1\":{\"39\":1,\"82\":1}}],[\"rws\",{\"1\":{\"567\":1}}],[\"run\",{\"1\":{\"486\":1}}],[\"runtimeexception\",{\"1\":{\"567\":2}}],[\"runtime\",{\"1\":{\"39\":1,\"162\":1,\"214\":1,\"226\":3,\"227\":2,\"235\":1,\"240\":1}}],[\"randomaccessfile\",{\"1\":{\"567\":2}}],[\"rangedunsignedlongvalue\",{\"1\":{\"80\":1}}],[\"rangedunsignedintvalue\",{\"1\":{\"80\":1}}],[\"rawtypes\",{\"1\":{\"515\":1}}],[\"rawbytes\",{\"1\":{\"504\":1}}],[\"rawbytebuf\",{\"1\":{\"334\":1,\"346\":1,\"472\":1}}],[\"role\",{\"1\":{\"567\":2}}],[\"routerfunction\",{\"1\":{\"341\":2}}],[\"roundingmode\",{\"1\":{\"236\":2}}],[\"rootobject\",{\"1\":{\"304\":1,\"315\":1}}],[\"root\",{\"1\":{\"166\":1,\"170\":1,\"348\":1,\"466\":1}}],[\"rsa\",{\"1\":{\"136\":1,\"140\":1,\"382\":2,\"482\":1}}],[\"rc3\",{\"0\":{\"102\":1},\"1\":{\"100\":1}}],[\"rc\",{\"0\":{\"87\":1,\"89\":1,\"91\":1,\"118\":1,\"120\":1,\"124\":1,\"126\":1,\"128\":1,\"130\":1,\"372\":1,\"375\":1,\"385\":1,\"387\":1,\"408\":1},\"1\":{\"123\":1,\"145\":1,\"175\":1,\"180\":1,\"376\":1,\"454\":1,\"455\":1}}],[\"rc2\",{\"0\":{\"63\":1,\"104\":1,\"112\":1},\"1\":{\"100\":1,\"111\":1}}],[\"rc1\",{\"0\":{\"56\":1,\"67\":1,\"106\":1,\"114\":1},\"1\":{\"100\":1,\"105\":1,\"111\":1}}],[\"receive\",{\"1\":{\"538\":1}}],[\"reflectionbasedrequestmsgbodyconverter\",{\"1\":{\"492\":1}}],[\"refresh\",{\"1\":{\"446\":1}}],[\"refcnt\",{\"1\":{\"423\":1,\"428\":2,\"431\":2,\"434\":2,\"435\":4,\"436\":5}}],[\"repo\",{\"1\":{\"444\":2}}],[\"replymsgtype\",{\"1\":{\"523\":1}}],[\"replymsgid\",{\"1\":{\"523\":1,\"526\":1}}],[\"replyfor\",{\"1\":{\"523\":4}}],[\"replyflowid\",{\"1\":{\"523\":5,\"526\":1}}],[\"reply\",{\"1\":{\"320\":2,\"329\":1,\"331\":1,\"357\":1,\"432\":1,\"434\":1,\"435\":1,\"436\":1,\"515\":2,\"523\":1}}],[\"reuseaddr\",{\"1\":{\"386\":1}}],[\"red\",{\"1\":{\"379\":1}}],[\"redisjt808responsesubpackagestorage\",{\"1\":{\"365\":1}}],[\"redispatch\",{\"1\":{\"348\":1}}],[\"redis\",{\"1\":{\"185\":3,\"365\":1}}],[\"registry\",{\"1\":{\"370\":2}}],[\"registerconverter\",{\"1\":{\"534\":1,\"539\":1}}],[\"register\",{\"0\":{\"204\":1,\"208\":1,\"212\":1},\"1\":{\"300\":1,\"342\":1,\"357\":2,\"390\":1,\"432\":1,\"458\":1,\"532\":1}}],[\"re\",{\"1\":{\"366\":1}}],[\"readme\",{\"1\":{\"444\":1}}],[\"readbyte\",{\"1\":{\"429\":1}}],[\"readbcd\",{\"1\":{\"428\":1}}],[\"readstring\",{\"1\":{\"429\":4}}],[\"readunsignedword\",{\"1\":{\"429\":2}}],[\"readunsigneddword\",{\"1\":{\"428\":1}}],[\"readable\",{\"1\":{\"428\":2}}],[\"read\",{\"1\":{\"428\":1}}],[\"readerindex\",{\"1\":{\"225\":2}}],[\"readeridletime\",{\"1\":{\"23\":1,\"181\":1,\"199\":1}}],[\"reader\",{\"1\":{\"175\":1,\"181\":1}}],[\"reactive\",{\"1\":{\"341\":1}}],[\"reversedbit15inheader\",{\"1\":{\"311\":1}}],[\"retain\",{\"1\":{\"424\":2}}],[\"retransmissionhandler\",{\"1\":{\"366\":2}}],[\"return\",{\"1\":{\"236\":3,\"241\":3,\"290\":1,\"293\":1,\"300\":1,\"320\":1,\"322\":2,\"329\":1,\"330\":1,\"331\":1,\"332\":1,\"333\":1,\"334\":1,\"339\":2,\"342\":3,\"354\":1,\"357\":3,\"360\":3,\"361\":1,\"364\":1,\"369\":4,\"370\":2,\"371\":2,\"374\":2,\"383\":5,\"385\":1,\"386\":1,\"389\":6,\"390\":1,\"392\":1,\"393\":4,\"394\":2,\"395\":8,\"396\":2,\"410\":1,\"432\":1,\"434\":2,\"435\":2,\"458\":5,\"459\":1,\"472\":6,\"474\":4,\"495\":1,\"502\":1,\"508\":1,\"515\":1,\"518\":1,\"522\":1,\"523\":4,\"526\":2,\"529\":2,\"530\":3,\"534\":1,\"536\":1,\"538\":7,\"542\":1,\"543\":2,\"544\":1,\"546\":1,\"547\":2,\"548\":3,\"559\":2,\"567\":6}}],[\"retentionpolicy\",{\"1\":{\"226\":3,\"227\":2,\"235\":1,\"240\":1}}],[\"retention\",{\"1\":{\"226\":3,\"227\":2,\"235\":1,\"240\":1}}],[\"reqbody\",{\"1\":{\"567\":5}}],[\"reqmsgfieldconverter<double>\",{\"1\":{\"502\":1}}],[\"required\",{\"1\":{\"318\":1,\"320\":1,\"515\":2}}],[\"requestentity\",{\"1\":{\"334\":5}}],[\"requestparam\",{\"1\":{\"318\":1,\"320\":1,\"515\":2}}],[\"requestbody\",{\"1\":{\"301\":1}}],[\"requestmsgheaderaware\",{\"0\":{\"552\":1},\"1\":{\"552\":1}}],[\"requestmsgheaderargumentresolver\",{\"1\":{\"509\":1}}],[\"requestmsgheader\",{\"1\":{\"508\":1,\"509\":1,\"522\":1,\"526\":1,\"552\":2}}],[\"requestmsgmetadataaware\",{\"0\":{\"553\":1},\"1\":{\"553\":1}}],[\"requestmsgmetadataargumentresolver\",{\"1\":{\"509\":1}}],[\"requestmsgmetadata\",{\"1\":{\"495\":1,\"508\":1,\"509\":1,\"526\":1,\"529\":1,\"534\":1,\"536\":1,\"538\":4,\"548\":2,\"553\":2}}],[\"requestmsgbody>\",{\"1\":{\"536\":1}}],[\"requestmsgbodyargumentresolver\",{\"1\":{\"509\":1}}],[\"requestmsgbody\",{\"1\":{\"495\":1,\"499\":1,\"509\":1,\"517\":2}}],[\"requestmsgbodyconverter<locationuploadmsgbody>\",{\"1\":{\"534\":1}}],[\"requestmsgbodyconverter\",{\"1\":{\"204\":1,\"492\":1,\"533\":1,\"534\":5,\"535\":1,\"536\":1,\"556\":1,\"558\":2,\"559\":2}}],[\"requestmapping\",{\"1\":{\"225\":1,\"298\":1,\"318\":2,\"320\":2,\"422\":1,\"508\":1,\"515\":1}}],[\"request\",{\"0\":{\"148\":1,\"169\":1,\"184\":1,\"204\":1},\"1\":{\"107\":1,\"143\":1,\"147\":1,\"148\":1,\"166\":2,\"169\":1,\"170\":1,\"184\":2,\"286\":1,\"287\":1,\"290\":4,\"293\":5,\"300\":3,\"304\":1,\"315\":3,\"320\":3,\"328\":1,\"329\":3,\"330\":1,\"331\":2,\"332\":1,\"333\":2,\"339\":4,\"347\":5,\"348\":1,\"354\":3,\"357\":3,\"366\":5,\"370\":1,\"379\":2,\"389\":4,\"390\":5,\"400\":1,\"429\":2,\"432\":3,\"466\":2,\"475\":1,\"548\":1,\"567\":17}}],[\"requestfields\",{\"1\":{\"246\":1}}],[\"requestfield\",{\"0\":{\"302\":1},\"1\":{\"92\":1,\"107\":1,\"108\":1,\"225\":7,\"226\":13,\"229\":3,\"230\":2,\"235\":3,\"240\":3,\"243\":1,\"246\":2,\"267\":7,\"270\":5,\"273\":6,\"276\":5,\"279\":3,\"282\":3,\"286\":5,\"287\":1,\"290\":6,\"293\":14,\"305\":7,\"308\":1,\"333\":1,\"413\":1}}],[\"requestfieldalias\",{\"0\":{\"226\":1},\"1\":{\"92\":1,\"107\":2,\"225\":6,\"226\":2,\"230\":1,\"234\":2,\"237\":1,\"239\":1,\"242\":1,\"243\":1,\"246\":5,\"248\":7,\"251\":5,\"254\":6,\"257\":5,\"260\":3,\"263\":3,\"286\":4,\"287\":3,\"290\":5,\"293\":13,\"413\":1}}],[\"req\",{\"1\":{\"133\":1,\"237\":1,\"242\":1,\"295\":1}}],[\"resolvers\",{\"1\":{\"509\":6}}],[\"resolveargument\",{\"1\":{\"326\":1}}],[\"resource\",{\"1\":{\"435\":1}}],[\"resources\",{\"1\":{\"435\":1,\"436\":2}}],[\"result2\",{\"1\":{\"436\":5}}],[\"result\",{\"1\":{\"314\":1,\"316\":2,\"354\":2,\"434\":6,\"435\":5,\"436\":6,\"523\":3,\"526\":1,\"529\":1,\"538\":3}}],[\"restcontroller\",{\"1\":{\"297\":1,\"318\":1,\"320\":1,\"338\":1,\"515\":1}}],[\"respmsgid\",{\"1\":{\"515\":1,\"526\":1,\"527\":1}}],[\"respmsgbody\",{\"1\":{\"508\":1,\"522\":1,\"523\":3,\"525\":1,\"538\":3}}],[\"respterminalsettings的类注解上指定了下发类型\",{\"1\":{\"515\":1}}],[\"respterminalsettings\",{\"1\":{\"312\":1,\"320\":4,\"515\":4}}],[\"responsesubpackagestorage\",{\"1\":{\"366\":5}}],[\"responsebody\",{\"1\":{\"310\":1,\"353\":1}}],[\"response\",{\"0\":{\"185\":1},\"1\":{\"143\":1,\"166\":1,\"170\":1,\"185\":3,\"329\":2,\"330\":1,\"331\":1,\"332\":1,\"359\":2,\"365\":3,\"371\":2,\"383\":3,\"389\":2,\"466\":1,\"475\":1}}],[\"responsefieldalias\",{\"0\":{\"227\":1},\"1\":{\"107\":2,\"225\":2,\"227\":2,\"230\":1,\"243\":1,\"249\":7,\"252\":5,\"255\":6,\"258\":5,\"261\":3,\"264\":3,\"413\":1,\"422\":6}}],[\"responsefield\",{\"0\":{\"313\":1},\"1\":{\"107\":1,\"225\":2,\"227\":11,\"229\":3,\"230\":2,\"243\":1,\"268\":7,\"271\":5,\"274\":6,\"277\":5,\"280\":3,\"283\":3,\"312\":1,\"316\":3,\"354\":3,\"413\":1,\"418\":5,\"422\":1,\"434\":3}}],[\"resp\",{\"1\":{\"133\":1,\"295\":1,\"320\":4,\"515\":5,\"567\":8}}],[\"resetrange\",{\"1\":{\"415\":1}}],[\"resetrangeif\",{\"1\":{\"80\":1}}],[\"reset\",{\"1\":{\"81\":1,\"415\":2}}],[\"resetif\",{\"1\":{\"80\":1}}],[\"rebuildablebytebufjt808msgbuildertest\",{\"1\":{\"436\":1}}],[\"rebuildablebytebufjt808msgbuilder\",{\"0\":{\"436\":1},\"1\":{\"84\":1,\"86\":1}}],[\"removeattribute\",{\"1\":{\"54\":2,\"57\":2}}],[\"removebysessionidandclose\",{\"1\":{\"44\":1}}],[\"release<\",{\"1\":{\"485\":1}}],[\"release开始\",{\"1\":{\"39\":1}}],[\"release\",{\"0\":{\"21\":1,\"24\":1,\"27\":1,\"53\":1,\"59\":1,\"72\":1,\"74\":1,\"569\":1},\"1\":{\"383\":2,\"417\":1,\"424\":2,\"428\":1,\"431\":1,\"434\":3,\"435\":2,\"436\":3,\"444\":6,\"485\":1,\"510\":1,\"531\":1}}],[\"从其他服务验证鉴权码是否正确\",{\"1\":{\"529\":1}}],[\"从其他配置中获取密钥\",{\"1\":{\"383\":1}}],[\"从逻辑上来理解\",{\"1\":{\"508\":1}}],[\"从消息体的\",{\"1\":{\"503\":1}}],[\"从客户端接收消息时\",{\"1\":{\"492\":1}}],[\"从第\",{\"1\":{\"415\":1}}],[\"从\",{\"1\":{\"39\":1,\"115\":2,\"136\":1,\"140\":1,\"180\":1,\"239\":1,\"287\":1,\"290\":3,\"293\":3,\"305\":1,\"308\":1,\"322\":1,\"376\":1,\"404\":2,\"441\":1,\"452\":1,\"482\":1,\"510\":1,\"531\":1,\"555\":1}}],[\"从1\",{\"1\":{\"39\":1}}],[\"旧版的jt808serverconfigure\",{\"1\":{\"39\":1}}],[\"📖\",{\"0\":{\"123\":1}}],[\"😂😂😂😂😂😂\",{\"1\":{\"397\":1,\"550\":1}}],[\"😂\",{\"1\":{\"115\":1,\"404\":1}}],[\"📔\",{\"0\":{\"61\":1,\"76\":1,\"86\":1}}],[\"🔨\",{\"0\":{\"33\":1,\"37\":1,\"41\":1,\"45\":1,\"49\":1,\"65\":1,\"70\":1,\"82\":1,\"85\":1,\"109\":1,\"116\":1}}],[\"🐞\",{\"0\":{\"22\":1,\"26\":1,\"29\":1,\"32\":1,\"36\":1,\"40\":1,\"44\":1,\"48\":1,\"55\":1,\"58\":1,\"68\":1,\"73\":1,\"81\":1,\"90\":1,\"96\":1,\"101\":1,\"108\":1,\"125\":1,\"127\":1}}],[\"9\",{\"0\":{\"30\":1},\"1\":{\"85\":1,\"286\":4,\"287\":5,\"293\":4,\"429\":2,\"482\":3}}],[\"pipeline\",{\"1\":{\"386\":3}}],[\"plaintextbody\",{\"1\":{\"383\":4}}],[\"placeholderfiledserializer\",{\"1\":{\"227\":2}}],[\"plugins\",{\"1\":{\"379\":2}}],[\"peek\",{\"1\":{\"366\":1}}],[\"pending\",{\"0\":{\"155\":1,\"163\":1},\"1\":{\"145\":1,\"151\":1,\"159\":1,\"373\":2}}],[\"put\",{\"1\":{\"458\":1,\"542\":1,\"567\":1}}],[\"putifnecessary\",{\"1\":{\"320\":1}}],[\"public\",{\"1\":{\"225\":2,\"226\":1,\"227\":1,\"234\":1,\"235\":1,\"236\":2,\"237\":1,\"239\":1,\"240\":1,\"241\":2,\"242\":1,\"246\":1,\"286\":2,\"287\":1,\"290\":4,\"293\":4,\"300\":2,\"305\":1,\"308\":1,\"312\":1,\"316\":1,\"318\":3,\"320\":5,\"322\":1,\"326\":1,\"328\":2,\"329\":2,\"330\":2,\"331\":2,\"332\":2,\"333\":3,\"334\":3,\"339\":3,\"342\":4,\"346\":1,\"354\":3,\"357\":4,\"360\":1,\"361\":1,\"364\":1,\"366\":3,\"369\":3,\"370\":3,\"371\":3,\"374\":2,\"379\":1,\"383\":3,\"385\":1,\"386\":4,\"387\":1,\"389\":1,\"390\":3,\"392\":3,\"393\":5,\"394\":4,\"395\":3,\"396\":3,\"399\":1,\"400\":1,\"410\":2,\"418\":3,\"422\":3,\"429\":2,\"432\":2,\"434\":1,\"435\":2,\"458\":5,\"459\":3,\"472\":1,\"473\":1,\"474\":1,\"475\":1,\"480\":1,\"486\":2,\"490\":1,\"491\":2,\"495\":2,\"499\":2,\"502\":2,\"504\":1,\"505\":1,\"507\":1,\"508\":2,\"509\":2,\"512\":2,\"515\":5,\"517\":1,\"518\":1,\"522\":2,\"523\":5,\"526\":3,\"529\":2,\"530\":4,\"531\":1,\"532\":3,\"534\":4,\"536\":1,\"538\":6,\"539\":2,\"542\":2,\"543\":2,\"544\":2,\"546\":3,\"547\":4,\"548\":4,\"552\":1,\"553\":1,\"554\":1,\"559\":1,\"567\":9}}],[\"pull\",{\"1\":{\"28\":1,\"548\":1}}],[\"posthandle\",{\"1\":{\"322\":1}}],[\"port\",{\"0\":{\"177\":1,\"196\":1},\"1\":{\"145\":1,\"175\":1}}],[\"pool\",{\"0\":{\"152\":1,\"153\":1,\"157\":1,\"164\":1,\"213\":1,\"214\":1,\"215\":1},\"1\":{\"69\":1,\"145\":1,\"151\":2,\"159\":1,\"160\":1,\"191\":1,\"373\":4}}],[\"parsemsgtype\",{\"1\":{\"459\":1}}],[\"parsefromint\",{\"1\":{\"458\":2,\"459\":2,\"542\":1,\"543\":2}}],[\"parseexception\",{\"1\":{\"241\":1}}],[\"parse\",{\"1\":{\"241\":2}}],[\"paramcount\",{\"1\":{\"418\":1,\"422\":1}}],[\"paramitemlist\",{\"1\":{\"418\":1,\"419\":3,\"422\":1,\"423\":4}}],[\"paramitem\",{\"1\":{\"320\":2,\"418\":2,\"419\":5,\"422\":2,\"423\":5,\"515\":3}}],[\"paramitem>\",{\"1\":{\"320\":1,\"419\":1,\"423\":1,\"515\":1}}],[\"params\",{\"1\":{\"320\":1}}],[\"paramlist\",{\"1\":{\"312\":1,\"320\":3,\"515\":4}}],[\"param\",{\"0\":{\"149\":1},\"1\":{\"101\":1,\"109\":1,\"147\":1,\"149\":2,\"320\":4,\"322\":8,\"346\":1,\"360\":1,\"364\":4,\"369\":3,\"370\":1,\"371\":1,\"379\":2,\"385\":1,\"389\":11,\"394\":4,\"395\":2,\"410\":1,\"419\":1,\"423\":1,\"458\":1,\"474\":1,\"515\":5}}],[\"pattern\",{\"1\":{\"240\":1,\"241\":4,\"242\":1}}],[\"packageid\",{\"1\":{\"366\":1}}],[\"packageidlist\",{\"1\":{\"366\":2}}],[\"packageids\",{\"1\":{\"364\":2}}],[\"packages\",{\"0\":{\"203\":1,\"207\":1,\"211\":1}}],[\"package\",{\"0\":{\"182\":1,\"184\":1,\"185\":1},\"1\":{\"143\":2,\"184\":2,\"185\":3,\"347\":5,\"360\":3,\"361\":2,\"365\":3,\"369\":2,\"370\":1,\"473\":1}}],[\"private\",{\"1\":{\"225\":6,\"234\":2,\"236\":1,\"237\":2,\"239\":1,\"241\":1,\"242\":3,\"246\":4,\"286\":6,\"287\":2,\"290\":5,\"293\":18,\"305\":7,\"308\":4,\"312\":1,\"316\":3,\"318\":2,\"320\":2,\"333\":1,\"334\":7,\"354\":3,\"366\":2,\"383\":1,\"386\":1,\"390\":1,\"392\":1,\"393\":2,\"414\":1,\"418\":8,\"422\":8,\"434\":1,\"435\":1,\"458\":3,\"480\":3,\"495\":14,\"497\":1,\"498\":4,\"499\":7,\"501\":1,\"502\":1,\"504\":4,\"505\":8,\"512\":1,\"515\":6,\"518\":2,\"523\":4,\"532\":1,\"538\":2,\"542\":3,\"567\":4}}],[\"println\",{\"1\":{\"532\":3}}],[\"printstacktrace\",{\"1\":{\"512\":1}}],[\"print\",{\"0\":{\"220\":1},\"1\":{\"191\":1,\"220\":1,\"468\":1,\"486\":1,\"487\":1}}],[\"printer\",{\"0\":{\"149\":1},\"1\":{\"101\":1,\"109\":1,\"147\":1,\"149\":2}}],[\"prehandle\",{\"1\":{\"322\":1}}],[\"prefix\",{\"1\":{\"151\":1}}],[\"preferepoll\",{\"1\":{\"386\":3}}],[\"prefer\",{\"0\":{\"180\":1},\"1\":{\"145\":1,\"175\":1,\"377\":2,\"386\":1}}],[\"pretty\",{\"1\":{\"147\":1,\"149\":1}}],[\"press\",{\"1\":{\"1\":1}}],[\"project\",{\"1\":{\"444\":1}}],[\"properties\",{\"1\":{\"441\":1,\"442\":1,\"444\":1}}],[\"propertysources\",{\"1\":{\"144\":1,\"190\":1}}],[\"prometheusmetricsexporter\",{\"1\":{\"390\":2}}],[\"prometheus\",{\"1\":{\"390\":1}}],[\"protected\",{\"1\":{\"386\":1,\"393\":1,\"538\":3}}],[\"protocolversion\",{\"1\":{\"393\":1,\"474\":1}}],[\"protocol\",{\"0\":{\"171\":1,\"192\":1,\"575\":1},\"1\":{\"23\":1,\"35\":1,\"143\":1,\"171\":1,\"172\":1}}],[\"provinceid\",{\"1\":{\"305\":1,\"333\":1,\"429\":2}}],[\"program\",{\"0\":{\"149\":1},\"1\":{\"101\":1,\"109\":1,\"147\":1,\"149\":2}}],[\"processmsg30316364\",{\"1\":{\"567\":1}}],[\"processmsg0x1212\",{\"1\":{\"567\":1}}],[\"processmsg0x1211\",{\"1\":{\"567\":1}}],[\"processmsg0x1210\",{\"1\":{\"567\":1}}],[\"processmsg0704\",{\"1\":{\"334\":1}}],[\"processmsg0001\",{\"1\":{\"320\":1,\"328\":1}}],[\"processauthmsg\",{\"1\":{\"522\":1}}],[\"processthrowable\",{\"1\":{\"491\":1}}],[\"processterminalregistermsgv2019\",{\"1\":{\"339\":1,\"354\":1}}],[\"processterminalregistermsgv2011\",{\"1\":{\"339\":1}}],[\"processterminalheartbeatmsg\",{\"1\":{\"96\":1}}],[\"processed\",{\"1\":{\"390\":1}}],[\"processer\",{\"1\":{\"164\":2,\"373\":1}}],[\"processretransmissionmsg\",{\"1\":{\"366\":1}}],[\"processrequest\",{\"1\":{\"339\":2,\"342\":1}}],[\"processregistermsgv2013\",{\"1\":{\"333\":1}}],[\"process\",{\"1\":{\"329\":2,\"330\":2,\"331\":2,\"332\":2}}],[\"processlocationmsg\",{\"1\":{\"508\":1,\"526\":1}}],[\"processlocationuploadmsgv2019\",{\"1\":{\"293\":1}}],[\"processlocationbatchuploadmsgv2019\",{\"1\":{\"290\":1}}],[\"processor\",{\"0\":{\"158\":1,\"161\":1,\"213\":1},\"1\":{\"69\":2,\"109\":1,\"143\":1,\"145\":2,\"158\":1,\"159\":2,\"160\":1,\"164\":1,\"191\":1,\"218\":1,\"371\":2,\"373\":1}}],[\"mkdirs\",{\"1\":{\"567\":1}}],[\"minio\",{\"1\":{\"567\":2}}],[\"md\",{\"1\":{\"444\":2}}],[\"mutable\",{\"1\":{\"414\":1,\"415\":6}}],[\"mybatis\",{\"1\":{\"517\":1,\"518\":1}}],[\"mymsgtype\",{\"1\":{\"458\":4,\"459\":1}}],[\"myrequestsubpackagestorage\",{\"1\":{\"396\":1}}],[\"myresponsesubpackagestorage\",{\"1\":{\"396\":1}}],[\"mysessionmanager\",{\"1\":{\"393\":5,\"546\":2}}],[\"mysession\",{\"1\":{\"392\":1,\"393\":3}}],[\"myjt808requestsubpackagestorage\",{\"1\":{\"396\":1}}],[\"myjt808responsesubpackagestorage\",{\"1\":{\"396\":1}}],[\"myjt808sessionmanagereventlistener\",{\"1\":{\"547\":2}}],[\"myjt808sessioneventlistener02\",{\"1\":{\"394\":1}}],[\"myjt808sessioneventlistener01\",{\"1\":{\"394\":1}}],[\"myjt808servernettyconfigure\",{\"1\":{\"386\":3}}],[\"myjt808config\",{\"1\":{\"369\":1,\"370\":1,\"371\":1,\"393\":1,\"394\":1,\"395\":1,\"396\":1,\"459\":2}}],[\"myextendedjt808fielddeserializerbcdtime\",{\"1\":{\"240\":1,\"241\":1}}],[\"mergedrequest\",{\"1\":{\"348\":1}}],[\"meterregistry\",{\"1\":{\"390\":7}}],[\"methodparameter\",{\"1\":{\"326\":4}}],[\"metadata\",{\"1\":{\"122\":3,\"508\":3,\"526\":3,\"534\":2,\"536\":1,\"538\":9,\"548\":2,\"553\":1}}],[\"messagebuilder\",{\"1\":{\"532\":2}}],[\"message\",{\"0\":{\"150\":1,\"158\":1}}],[\"module\",{\"1\":{\"115\":1,\"404\":1,\"441\":1,\"449\":1}}],[\"msgdispatcher\",{\"0\":{\"563\":1}}],[\"msgdatatype\",{\"1\":{\"107\":1,\"226\":3,\"227\":2,\"235\":1,\"236\":4,\"240\":1,\"241\":4,\"287\":15,\"312\":1,\"316\":3,\"354\":3,\"418\":5,\"473\":5,\"480\":3}}],[\"msgheaderspecbuilder\",{\"1\":{\"532\":2}}],[\"msghandlermapping\",{\"1\":{\"539\":1}}],[\"msghandler<authrequestmsgbody>\",{\"1\":{\"538\":1}}],[\"msghandler<t\",{\"1\":{\"536\":1}}],[\"msghandler注入到spring容器\",{\"0\":{\"510\":1}}],[\"msghandler\",{\"1\":{\"47\":2,\"50\":2,\"206\":1,\"207\":1,\"208\":1,\"220\":1,\"489\":2,\"507\":1,\"508\":2,\"510\":3,\"523\":1,\"524\":2,\"525\":1,\"536\":5,\"538\":1,\"554\":3,\"557\":1,\"559\":2}}],[\"msgescapeexception\",{\"1\":{\"530\":2}}],[\"msgconsumer\",{\"0\":{\"564\":1}}],[\"msgcontent\",{\"1\":{\"418\":8,\"422\":8,\"515\":5}}],[\"msgconvertermapping\",{\"1\":{\"534\":2}}],[\"msgconverter\",{\"1\":{\"220\":1}}],[\"msgbodybuilder\",{\"1\":{\"532\":2}}],[\"msgbody\",{\"1\":{\"508\":3,\"522\":2,\"526\":3}}],[\"msgbodypropsspecbuilder\",{\"1\":{\"532\":4}}],[\"msgbodyprops\",{\"1\":{\"383\":1}}],[\"msgbodyprops=msgbodyprops\",{\"1\":{\"348\":1}}],[\"msgbodylength=86\",{\"1\":{\"348\":1}}],[\"msgbodylength\",{\"1\":{\"286\":3,\"287\":3,\"290\":2,\"293\":3,\"303\":1,\"304\":1,\"305\":1,\"429\":1}}],[\"msgid=256\",{\"1\":{\"348\":2}}],[\"msgid\",{\"1\":{\"290\":1,\"293\":1,\"311\":1,\"312\":1,\"316\":1,\"329\":1,\"331\":1,\"354\":1,\"357\":1,\"418\":5,\"419\":1,\"422\":5,\"423\":1,\"432\":1,\"434\":4,\"435\":1,\"436\":1,\"458\":10,\"459\":4,\"505\":8,\"515\":4,\"526\":1,\"527\":1,\"542\":7,\"548\":1,\"567\":2}}],[\"msglength\",{\"1\":{\"290\":3,\"418\":2,\"422\":2}}],[\"msg0704item\",{\"1\":{\"290\":1}}],[\"msgtypeparser\",{\"1\":{\"543\":2}}],[\"msgtype>\",{\"1\":{\"458\":1}}],[\"msgtype=builtinmsgtype\",{\"1\":{\"348\":1}}],[\"msgtype\",{\"0\":{\"458\":1},\"1\":{\"246\":1,\"290\":1,\"293\":1,\"299\":1,\"300\":1,\"320\":1,\"328\":1,\"329\":1,\"330\":1,\"331\":1,\"332\":1,\"333\":1,\"334\":4,\"339\":2,\"354\":1,\"366\":1,\"458\":6,\"459\":1,\"472\":2,\"473\":1,\"495\":1,\"499\":1,\"508\":1,\"517\":2,\"522\":1,\"523\":3,\"526\":1,\"541\":1,\"542\":1,\"543\":3,\"567\":4}}],[\"msg\",{\"0\":{\"161\":1,\"204\":1,\"208\":1,\"213\":1},\"1\":{\"25\":1,\"69\":2,\"109\":1,\"129\":1,\"133\":2,\"143\":2,\"145\":1,\"150\":1,\"151\":1,\"158\":1,\"159\":2,\"160\":2,\"164\":3,\"191\":1,\"218\":1,\"237\":1,\"242\":1,\"295\":2,\"318\":1,\"366\":1,\"373\":3,\"414\":5,\"419\":2,\"423\":2,\"515\":1,\"532\":1,\"567\":2}}],[\"main\",{\"1\":{\"486\":1}}],[\"maven版示例项目\",{\"1\":{\"460\":1}}],[\"maven版示例\",{\"0\":{\"460\":1}}],[\"mavenrepo\",{\"1\":{\"444\":6}}],[\"maven\",{\"1\":{\"444\":1,\"460\":3,\"485\":1}}],[\"maven依赖的\",{\"1\":{\"39\":1}}],[\"manufacturerid\",{\"1\":{\"305\":1,\"429\":2}}],[\"map<string\",{\"1\":{\"567\":3}}],[\"map<integer\",{\"1\":{\"287\":1,\"458\":1,\"542\":1}}],[\"mapping\",{\"1\":{\"534\":3,\"539\":3,\"542\":3}}],[\"mappings\",{\"1\":{\"458\":3}}],[\"map\",{\"1\":{\"366\":1}}],[\"mapif\",{\"1\":{\"80\":1}}],[\"maxpackagesize\",{\"1\":{\"311\":1,\"354\":1,\"360\":4,\"361\":3}}],[\"maximumspringbootbomversion=3\",{\"1\":{\"442\":1}}],[\"maximumspringbootbomversion\",{\"1\":{\"442\":2}}],[\"maximumjavaversion=17\",{\"1\":{\"441\":1}}],[\"maximumjavaversion\",{\"1\":{\"441\":3}}],[\"maximum\",{\"0\":{\"215\":1},\"1\":{\"184\":1,\"185\":1}}],[\"maximumpoolsize\",{\"1\":{\"153\":1,\"215\":1}}],[\"maxoncinker\",{\"1\":{\"132\":1}}],[\"maxframelength\",{\"1\":{\"23\":1,\"173\":1,\"194\":1}}],[\"max\",{\"0\":{\"153\":1,\"155\":1,\"163\":1,\"173\":1,\"194\":1},\"1\":{\"23\":1,\"145\":2,\"151\":2,\"159\":1,\"172\":1,\"360\":3,\"361\":2,\"373\":3,\"395\":1,\"473\":1}}],[\"mac下的socket调试工具\",{\"1\":{\"7\":1}}],[\"mac端调试工具\",{\"0\":{\"7\":1}}],[\"属性解释\",{\"0\":{\"527\":1}}],[\"属性用来控制单个消息包的最大大小\",{\"1\":{\"361\":1}}],[\"属性代表当前正在迭代的数据大小\",{\"1\":{\"304\":1}}],[\"属性的问题\",{\"1\":{\"90\":1}}],[\"属性\",{\"0\":{\"299\":1,\"303\":1,\"307\":1,\"311\":1,\"314\":1},\"1\":{\"23\":1,\"88\":3,\"92\":1,\"173\":1,\"194\":1,\"225\":3,\"290\":3,\"293\":3,\"299\":1,\"303\":1,\"304\":1,\"311\":1,\"314\":1,\"315\":1,\"517\":1,\"518\":1,\"519\":1,\"520\":1,\"521\":2,\"527\":1,\"528\":1}}],[\"warnlogifnecessary\",{\"1\":{\"567\":4}}],[\"warn\",{\"1\":{\"543\":1,\"567\":2}}],[\"wrapper\",{\"1\":{\"443\":1}}],[\"writable\",{\"1\":{\"431\":2}}],[\"writedatafragment\",{\"1\":{\"567\":2}}],[\"writedword\",{\"1\":{\"428\":1,\"431\":1}}],[\"writeandflush\",{\"1\":{\"538\":1}}],[\"write\",{\"1\":{\"431\":1,\"567\":1}}],[\"writebcd\",{\"1\":{\"428\":1,\"431\":1}}],[\"writebyte\",{\"1\":{\"329\":1,\"331\":1,\"357\":1,\"432\":1,\"435\":1,\"436\":1}}],[\"writebytes\",{\"1\":{\"318\":1}}],[\"writestring\",{\"1\":{\"329\":1,\"331\":1,\"357\":1,\"431\":1,\"432\":1}}],[\"writeword\",{\"1\":{\"329\":1,\"331\":1,\"357\":1,\"432\":1,\"435\":2,\"436\":2}}],[\"writeint\",{\"1\":{\"320\":2}}],[\"writer\",{\"1\":{\"55\":1,\"58\":1,\"175\":1,\"181\":1,\"357\":2,\"431\":2,\"432\":2,\"435\":2,\"436\":2}}],[\"writeridletime\",{\"1\":{\"23\":1,\"181\":1,\"199\":1}}],[\"www\",{\"1\":{\"419\":1,\"423\":1}}],[\"will\",{\"1\":{\"318\":1,\"444\":1,\"512\":1,\"524\":1}}],[\"withflowid\",{\"1\":{\"532\":2}}],[\"withterminalid\",{\"1\":{\"532\":2}}],[\"withreversedbit14andbit15\",{\"1\":{\"532\":2}}],[\"withsubpackage\",{\"1\":{\"532\":2}}],[\"withencryptiontype\",{\"1\":{\"532\":2}}],[\"withmsgbodypropsspec\",{\"1\":{\"532\":2}}],[\"withmsgid\",{\"1\":{\"532\":2}}],[\"with\",{\"1\":{\"318\":1,\"435\":2,\"436\":2,\"512\":1,\"529\":1}}],[\"windows端调试工具\",{\"0\":{\"9\":1}}],[\"webfilter\",{\"1\":{\"379\":1}}],[\"webflux\",{\"1\":{\"297\":1,\"298\":1,\"301\":1,\"310\":1,\"341\":2,\"475\":1}}],[\"web\",{\"1\":{\"341\":1,\"379\":1,\"475\":1}}],[\"webmvc\",{\"1\":{\"297\":1,\"298\":1,\"301\":1,\"310\":1}}],[\"workqueue\",{\"1\":{\"155\":1,\"217\":1}}],[\"workergroup\",{\"1\":{\"198\":1}}],[\"workergroup=new\",{\"1\":{\"145\":1,\"179\":1}}],[\"worker\",{\"0\":{\"179\":1,\"198\":1},\"1\":{\"145\":1,\"175\":1}}],[\"workthreadcount\",{\"1\":{\"145\":1,\"179\":1,\"198\":1}}],[\"wordvalue\",{\"1\":{\"415\":2}}],[\"word\",{\"0\":{\"253\":1,\"272\":1},\"1\":{\"107\":1,\"133\":1,\"136\":5,\"140\":5,\"226\":2,\"227\":2,\"243\":1,\"254\":6,\"255\":6,\"273\":6,\"274\":6,\"287\":7,\"290\":9,\"293\":9,\"305\":5,\"314\":1,\"316\":2,\"333\":2,\"354\":2,\"357\":1,\"382\":2,\"419\":1,\"422\":1,\"423\":1,\"429\":2,\"432\":1,\"434\":4,\"435\":2,\"436\":2,\"473\":6,\"479\":1,\"480\":1,\"482\":5,\"495\":3,\"518\":1,\"523\":2,\"526\":4,\"532\":2}}],[\"三个位\",{\"1\":{\"382\":1}}],[\"三个属性\",{\"1\":{\"23\":1,\"181\":1,\"199\":1}}],[\"三个版本\",{\"1\":{\"18\":1}}],[\"tip\",{\"1\":{\"422\":1}}],[\"timeunit\",{\"1\":{\"320\":1,\"515\":1}}],[\"time\",{\"0\":{\"216\":1},\"1\":{\"55\":2,\"58\":2,\"107\":2,\"154\":1,\"175\":3,\"181\":3,\"225\":2,\"239\":1,\"242\":3,\"246\":2,\"293\":2,\"495\":1}}],[\"timeout\",{\"1\":{\"23\":1,\"181\":1,\"199\":1,\"515\":3}}],[\"tempfile\",{\"1\":{\"567\":5}}],[\"test2\",{\"1\":{\"436\":1}}],[\"test2019alias\",{\"1\":{\"414\":1}}],[\"testbuildqueryterminalproperties\",{\"1\":{\"532\":1}}],[\"testbytebufmsgbuilder\",{\"1\":{\"435\":1}}],[\"testbit\",{\"1\":{\"415\":1}}],[\"testentitymsgbuilder\",{\"1\":{\"434\":1}}],[\"testentity\",{\"1\":{\"434\":3}}],[\"test1\",{\"1\":{\"419\":1}}],[\"test\",{\"1\":{\"414\":1,\"415\":1,\"419\":1,\"423\":2,\"428\":1,\"431\":1,\"434\":1,\"435\":1,\"436\":1,\"532\":3}}],[\"terminalvalidator\",{\"0\":{\"548\":1},\"1\":{\"548\":4}}],[\"terminalregister\",{\"1\":{\"354\":1}}],[\"terminalregistermsghandlerv2013\",{\"1\":{\"357\":1,\"429\":1,\"432\":1}}],[\"terminalregistermsghandlerv2011\",{\"1\":{\"342\":1}}],[\"terminalregistermsgv2011\",{\"1\":{\"339\":1}}],[\"terminalregisterreplyrespmsg\",{\"1\":{\"316\":1,\"333\":1}}],[\"terminalregisterreplymsg\",{\"1\":{\"300\":2,\"339\":2,\"354\":3}}],[\"terminal\",{\"1\":{\"318\":1,\"320\":1,\"390\":1,\"419\":1,\"423\":1,\"515\":1,\"523\":1,\"526\":1,\"529\":1}}],[\"terminalid2013\",{\"1\":{\"419\":1,\"423\":1}}],[\"terminalid=\",{\"1\":{\"348\":1}}],[\"terminalid\",{\"1\":{\"305\":1,\"318\":5,\"320\":7,\"357\":2,\"364\":2,\"366\":3,\"390\":1,\"393\":5,\"419\":1,\"423\":1,\"429\":2,\"432\":2,\"434\":1,\"435\":1,\"436\":1,\"473\":1,\"474\":1,\"508\":1,\"512\":4,\"515\":3,\"522\":1,\"526\":1,\"529\":3,\"538\":1,\"547\":1,\"567\":3}}],[\"terminaltype\",{\"1\":{\"305\":1,\"429\":2}}],[\"trim\",{\"1\":{\"567\":4}}],[\"try\",{\"1\":{\"241\":1,\"383\":2,\"428\":1,\"431\":1,\"435\":3,\"436\":3,\"512\":1,\"567\":1}}],[\"true|false\",{\"1\":{\"377\":2,\"468\":1,\"487\":1}}],[\"true\",{\"1\":{\"119\":1,\"145\":2,\"147\":1,\"148\":1,\"151\":2,\"156\":1,\"166\":2,\"168\":1,\"169\":1,\"175\":3,\"176\":1,\"181\":1,\"191\":1,\"201\":1,\"202\":1,\"204\":1,\"206\":1,\"208\":1,\"210\":1,\"212\":1,\"220\":1,\"239\":1,\"242\":1,\"246\":1,\"286\":1,\"287\":1,\"290\":2,\"293\":1,\"314\":1,\"316\":1,\"322\":2,\"354\":1,\"373\":2,\"379\":2,\"386\":2,\"389\":6,\"390\":1,\"418\":2,\"422\":2,\"434\":1,\"466\":2,\"486\":1,\"495\":1,\"505\":1,\"515\":2,\"517\":1,\"523\":1,\"528\":1,\"532\":1,\"538\":1,\"548\":2,\"558\":1}}],[\"tobytes\",{\"1\":{\"523\":2,\"538\":1}}],[\"tobinarystring\",{\"1\":{\"383\":2}}],[\"tohexstring\",{\"1\":{\"434\":1,\"436\":1}}],[\"tostring\",{\"1\":{\"393\":1,\"458\":1,\"542\":1}}],[\"tolowercase\",{\"1\":{\"390\":1}}],[\"tolist\",{\"1\":{\"366\":1}}],[\"totalparamcount\",{\"1\":{\"515\":1}}],[\"total\",{\"1\":{\"390\":1}}],[\"to\",{\"1\":{\"236\":1,\"241\":1,\"318\":1,\"366\":1,\"444\":1,\"512\":1,\"524\":1,\"538\":1}}],[\"todo\",{\"0\":{\"141\":1},\"1\":{\"8\":2,\"141\":1,\"189\":1,\"284\":1,\"514\":1,\"531\":1}}],[\"table\",{\"1\":{\"517\":1}}],[\"tags\",{\"1\":{\"390\":1}}],[\"targetmsgdatatype\",{\"1\":{\"515\":3,\"526\":3,\"528\":1}}],[\"targetclass\",{\"1\":{\"236\":7,\"241\":5}}],[\"target\",{\"1\":{\"226\":3,\"227\":2,\"235\":1,\"240\":1,\"287\":15}}],[\"tasks\",{\"0\":{\"155\":1,\"163\":1},\"1\":{\"145\":1,\"151\":1,\"159\":1,\"373\":2,\"444\":1}}],[\"ttl\",{\"1\":{\"184\":1,\"185\":2}}],[\"type=none\",{\"1\":{\"365\":1}}],[\"type=redis\",{\"1\":{\"365\":1}}],[\"type=caffeine\",{\"1\":{\"365\":1}}],[\"type\",{\"1\":{\"184\":2,\"185\":3,\"290\":1,\"347\":5,\"542\":3,\"543\":3}}],[\"the\",{\"1\":{\"444\":1}}],[\"throwable\",{\"1\":{\"322\":4,\"491\":4}}],[\"throws\",{\"1\":{\"320\":1,\"322\":3,\"326\":1,\"369\":2,\"474\":1,\"515\":1,\"530\":2,\"536\":1,\"538\":2}}],[\"throw\",{\"1\":{\"236\":1,\"241\":2,\"383\":2,\"512\":1,\"567\":3}}],[\"threadpoolexecutor\",{\"1\":{\"150\":1,\"152\":1,\"153\":1,\"154\":1,\"155\":1,\"214\":1,\"215\":1,\"216\":1,\"217\":1}}],[\"thread\",{\"0\":{\"162\":1,\"178\":1,\"179\":1,\"197\":1,\"198\":1,\"213\":1,\"218\":1},\"1\":{\"69\":1,\"109\":1,\"145\":3,\"151\":1,\"159\":1,\"160\":1,\"175\":2,\"191\":1,\"373\":1}}],[\"this\",{\"1\":{\"145\":2,\"178\":1,\"179\":1,\"197\":1,\"198\":1,\"236\":1,\"241\":1,\"286\":2,\"293\":2,\"303\":1,\"304\":4,\"314\":1,\"315\":4,\"318\":3,\"320\":2,\"366\":3,\"386\":1,\"390\":2,\"392\":1,\"395\":1,\"418\":3,\"422\":3,\"458\":2,\"480\":3,\"495\":1,\"509\":1,\"515\":3,\"523\":3,\"538\":2,\"542\":2,\"559\":1,\"567\":4}}],[\"tcp\",{\"1\":{\"145\":1,\"393\":1,\"468\":1,\"546\":1}}],[\"t\",{\"1\":{\"133\":1,\"334\":1,\"390\":1,\"427\":1,\"430\":1,\"536\":1}}],[\"illegalstateexception\",{\"1\":{\"567\":1}}],[\"illegalargumentexception\",{\"1\":{\"318\":1}}],[\"import\",{\"1\":{\"532\":5}}],[\"implementation\",{\"1\":{\"485\":1}}],[\"implements\",{\"1\":{\"342\":1,\"357\":1,\"383\":1,\"386\":1,\"390\":1,\"393\":1,\"429\":1,\"432\":1,\"458\":1,\"495\":1,\"499\":1,\"502\":1,\"509\":1,\"517\":1,\"523\":1,\"534\":1,\"538\":1,\"542\":1,\"546\":1,\"547\":1}}],[\"impl\",{\"1\":{\"170\":2,\"348\":1,\"370\":2,\"487\":1}}],[\"itemmap\",{\"1\":{\"567\":4}}],[\"itemdatatype\",{\"1\":{\"505\":1}}],[\"item\",{\"1\":{\"503\":2,\"567\":6}}],[\"itemlist\",{\"1\":{\"290\":1}}],[\"it\",{\"1\":{\"423\":2}}],[\"i\",{\"1\":{\"348\":2,\"395\":4}}],[\"id12345\",{\"1\":{\"532\":1}}],[\"idea\",{\"1\":{\"445\":2}}],[\"ids\",{\"1\":{\"395\":3}}],[\"id\",{\"1\":{\"286\":1,\"287\":1,\"293\":1,\"390\":1,\"393\":1,\"395\":1,\"418\":1,\"422\":1,\"434\":1,\"435\":1,\"436\":1,\"474\":1,\"503\":1,\"504\":1,\"532\":4}}],[\"idlestatehandler\",{\"1\":{\"23\":1,\"181\":2,\"199\":2}}],[\"idle\",{\"0\":{\"181\":1,\"199\":1},\"1\":{\"23\":1,\"55\":3,\"58\":3,\"175\":4,\"181\":5,\"199\":1}}],[\"isvalidauthcode\",{\"1\":{\"538\":2}}],[\"isnestedcommandfield\",{\"1\":{\"528\":1}}],[\"isnestedextrafield\",{\"1\":{\"505\":1}}],[\"ispresent\",{\"1\":{\"512\":1,\"543\":1}}],[\"ispreferepoll\",{\"1\":{\"386\":1}}],[\"issuccess\",{\"1\":{\"538\":1}}],[\"issues\",{\"1\":{\"15\":1,\"22\":1,\"26\":4,\"29\":1,\"31\":1,\"40\":1,\"48\":2,\"55\":1,\"58\":2,\"68\":1,\"73\":1,\"181\":1,\"381\":1,\"383\":2,\"480\":1}}],[\"issue\",{\"1\":{\"4\":1}}],[\"issouthlat\",{\"1\":{\"499\":1}}],[\"isauthcodevalid\",{\"1\":{\"529\":1}}],[\"isavailable\",{\"1\":{\"386\":3}}],[\"isassignablefrom\",{\"1\":{\"236\":5,\"241\":3}}],[\"ifpresent\",{\"1\":{\"567\":1}}],[\"if\",{\"1\":{\"236\":3,\"241\":3,\"383\":4,\"386\":1,\"512\":1,\"538\":2,\"547\":1,\"567\":8}}],[\"instruction\",{\"1\":{\"567\":1}}],[\"instance\",{\"1\":{\"393\":2}}],[\"initializer\",{\"1\":{\"462\":1,\"484\":1}}],[\"in\",{\"1\":{\"444\":1}}],[\"increment\",{\"1\":{\"390\":1,\"395\":3}}],[\"info\",{\"1\":{\"166\":4,\"170\":4,\"290\":1,\"293\":1,\"300\":1,\"320\":1,\"333\":1,\"334\":1,\"348\":1,\"354\":1,\"366\":1,\"386\":1,\"429\":7,\"466\":2,\"486\":1,\"491\":1,\"495\":1,\"508\":3,\"515\":1,\"522\":1,\"526\":4,\"529\":1,\"534\":1,\"538\":2,\"539\":1,\"542\":1,\"547\":1,\"567\":4}}],[\"intto2bytes\",{\"1\":{\"523\":2}}],[\"intfrombytes\",{\"1\":{\"502\":1,\"534\":7}}],[\"intfrom4bytes\",{\"1\":{\"497\":1}}],[\"int即可\",{\"1\":{\"501\":1}}],[\"intbitops\",{\"1\":{\"497\":1,\"502\":1,\"523\":2}}],[\"intvalue=16470\",{\"1\":{\"348\":1}}],[\"interruptedexception\",{\"1\":{\"320\":1,\"512\":1,\"536\":1,\"538\":2}}],[\"interface\",{\"1\":{\"226\":4,\"227\":3,\"235\":1,\"240\":1,\"322\":1,\"326\":1,\"346\":1,\"360\":1,\"361\":1,\"364\":1,\"369\":1,\"370\":1,\"371\":1,\"379\":1,\"385\":1,\"387\":1,\"389\":1,\"394\":1,\"395\":1,\"399\":1,\"400\":1,\"410\":2,\"458\":1,\"459\":1,\"472\":1,\"473\":1,\"474\":1,\"475\":1,\"536\":1,\"552\":1,\"553\":1,\"554\":1,\"559\":1}}],[\"integer\",{\"1\":{\"248\":1,\"249\":1,\"254\":1,\"255\":1,\"257\":1,\"258\":1,\"267\":1,\"268\":1,\"273\":1,\"274\":1,\"276\":1,\"277\":1,\"287\":6,\"293\":2,\"480\":3,\"495\":4,\"496\":1,\"499\":1,\"501\":1,\"504\":2,\"548\":1}}],[\"intlng\",{\"1\":{\"246\":1,\"495\":1}}],[\"intlat\",{\"1\":{\"246\":1,\"495\":1,\"501\":1}}],[\"int\",{\"1\":{\"81\":3,\"88\":3,\"152\":1,\"153\":1,\"155\":1,\"162\":1,\"163\":1,\"177\":1,\"178\":1,\"179\":1,\"196\":1,\"197\":1,\"198\":1,\"214\":1,\"215\":1,\"217\":1,\"226\":4,\"227\":2,\"235\":1,\"236\":2,\"240\":1,\"241\":2,\"248\":1,\"249\":1,\"254\":1,\"255\":1,\"257\":1,\"258\":1,\"267\":1,\"268\":1,\"273\":1,\"274\":1,\"276\":1,\"277\":1,\"286\":2,\"290\":3,\"293\":8,\"305\":2,\"306\":1,\"308\":5,\"316\":1,\"320\":1,\"333\":1,\"354\":1,\"360\":3,\"361\":2,\"364\":1,\"366\":1,\"383\":2,\"395\":12,\"415\":1,\"418\":2,\"422\":2,\"434\":4,\"458\":6,\"459\":1,\"473\":3,\"474\":1,\"480\":5,\"495\":8,\"496\":1,\"497\":5,\"498\":6,\"499\":3,\"505\":4,\"515\":4,\"518\":1,\"519\":1,\"520\":1,\"523\":4,\"526\":2,\"530\":4,\"542\":3,\"559\":4,\"567\":1}}],[\"ioexception\",{\"1\":{\"536\":1,\"538\":1,\"567\":1}}],[\"io状态位\",{\"1\":{\"287\":1}}],[\"io\",{\"1\":{\"23\":2,\"25\":1,\"133\":2,\"158\":1,\"166\":1,\"169\":1,\"170\":3,\"173\":1,\"181\":1,\"193\":1,\"194\":1,\"199\":1,\"237\":1,\"242\":1,\"295\":2,\"318\":2,\"348\":1,\"369\":2,\"370\":3,\"389\":3,\"392\":1,\"466\":1,\"480\":1,\"485\":1,\"486\":1,\"487\":2,\"531\":2,\"532\":3,\"558\":1}}],[\"⭐\",{\"0\":{\"23\":1,\"25\":1,\"28\":1,\"31\":1,\"35\":1,\"39\":1,\"43\":1,\"47\":1,\"54\":1,\"57\":1,\"60\":1,\"64\":1,\"69\":1,\"75\":1,\"80\":1,\"84\":1,\"88\":1,\"92\":1,\"94\":1,\"98\":1,\"100\":1,\"103\":1,\"105\":1,\"107\":1,\"111\":1,\"113\":1,\"115\":1,\"119\":1,\"122\":1,\"129\":1,\"131\":1}}],[\"hibernate\",{\"1\":{\"517\":1}}],[\"h3>\",{\"1\":{\"379\":1}}],[\"hashmap<>\",{\"1\":{\"458\":1,\"542\":1,\"567\":1}}],[\"hassubpackage=false\",{\"1\":{\"348\":1}}],[\"handlemsg\",{\"1\":{\"342\":1,\"357\":1,\"429\":1,\"432\":1,\"536\":2,\"538\":1}}],[\"handlermethodargumentresolver\",{\"1\":{\"509\":2}}],[\"handleresult\",{\"1\":{\"389\":2}}],[\"handlerequest\",{\"1\":{\"389\":2}}],[\"handlerfunction\",{\"1\":{\"341\":3}}],[\"handlerresulthandler\",{\"1\":{\"351\":2}}],[\"handlerresult\",{\"1\":{\"322\":2,\"389\":4}}],[\"handlerinterceptor\",{\"1\":{\"322\":1}}],[\"handlers\",{\"0\":{\"169\":1,\"208\":1,\"212\":1},\"1\":{\"166\":1,\"169\":1,\"466\":1}}],[\"handler\",{\"0\":{\"150\":1,\"181\":1,\"199\":1,\"205\":1,\"209\":1},\"1\":{\"23\":3,\"55\":1,\"58\":1,\"129\":1,\"143\":1,\"150\":1,\"151\":2,\"157\":1,\"160\":1,\"169\":1,\"173\":1,\"175\":1,\"181\":3,\"191\":2,\"194\":1,\"199\":2,\"322\":6,\"373\":2,\"389\":4,\"487\":1}}],[\"http\",{\"1\":{\"334\":1}}],[\"httpservletrequest\",{\"1\":{\"326\":1}}],[\"https\",{\"1\":{\"22\":1,\"26\":4,\"28\":1,\"29\":1,\"31\":1,\"40\":1,\"48\":2,\"55\":1,\"58\":2,\"68\":1,\"73\":1,\"383\":2,\"460\":2,\"480\":1}}],[\"heatbeathandler\",{\"1\":{\"544\":3}}],[\"header=headerspec\",{\"1\":{\"348\":1}}],[\"header\",{\"1\":{\"304\":2,\"315\":2,\"320\":1,\"332\":1,\"334\":1,\"383\":2,\"399\":1,\"472\":1,\"508\":6,\"522\":3,\"526\":7,\"532\":2,\"552\":1,\"567\":2}}],[\"hex\",{\"1\":{\"414\":2}}],[\"hexstring\",{\"1\":{\"419\":2,\"423\":2}}],[\"hexstring2bytes\",{\"1\":{\"383\":1}}],[\"hexstringutils\",{\"1\":{\"366\":1,\"383\":1,\"431\":2,\"434\":1,\"435\":1,\"532\":4}}],[\"height\",{\"1\":{\"293\":1,\"495\":1}}],[\"h\",{\"1\":{\"287\":1,\"348\":1}}],[\"hylexus\",{\"1\":{\"22\":1,\"25\":1,\"26\":4,\"28\":1,\"29\":1,\"31\":1,\"40\":1,\"48\":2,\"55\":1,\"58\":2,\"62\":1,\"66\":1,\"68\":1,\"71\":1,\"73\":1,\"77\":1,\"132\":1,\"133\":2,\"166\":1,\"169\":1,\"170\":3,\"193\":1,\"237\":1,\"242\":1,\"295\":2,\"318\":1,\"346\":1,\"348\":1,\"369\":2,\"370\":3,\"383\":2,\"389\":3,\"392\":1,\"454\":1,\"455\":1,\"460\":2,\"466\":1,\"480\":2,\"485\":2,\"486\":1,\"487\":2,\"531\":2,\"532\":3,\"558\":1}}],[\"本节内容是\",{\"1\":{\"522\":1}}],[\"本节将以位置上传报文为例\",{\"1\":{\"493\":1}}],[\"本框架并不支持直接从\",{\"1\":{\"502\":1}}],[\"本示例中结果为\",{\"1\":{\"501\":1}}],[\"本小节内容如下\",{\"1\":{\"549\":1}}],[\"本小节示例可以在\",{\"1\":{\"530\":1,\"540\":1,\"543\":1,\"544\":2,\"545\":1,\"547\":1}}],[\"本小节的示例代码可以在\",{\"1\":{\"506\":1,\"510\":1}}],[\"本小节的示例可以在\",{\"1\":{\"461\":1,\"470\":1,\"483\":1,\"488\":1,\"493\":1,\"505\":1,\"511\":1,\"515\":1,\"529\":1,\"535\":1}}],[\"本小节主要内容如下\",{\"1\":{\"492\":1,\"531\":1}}],[\"本小节主要介绍\",{\"1\":{\"351\":1}}],[\"本小节将介绍如何主动下发消息给终端\",{\"1\":{\"511\":1}}],[\"本小节将介绍\",{\"1\":{\"476\":1}}],[\"本小节会介绍808服务的配置选项\",{\"1\":{\"190\":1}}],[\"本项目源码\",{\"1\":{\"450\":1}}],[\"本项目借鉴\",{\"1\":{\"341\":1}}],[\"本项目将\",{\"1\":{\"18\":1}}],[\"本次请求对应的\",{\"1\":{\"304\":2,\"315\":2}}],[\"本文档暂时不会介绍这部分内容\",{\"1\":{\"492\":1}}],[\"本文档将介绍808协议处理方式\",{\"1\":{\"223\":1}}],[\"本文举例用到的报文也\",{\"1\":{\"289\":1,\"292\":1,\"493\":1}}],[\"本章节介绍的通过\",{\"1\":{\"246\":1}}],[\"本质上和上一个问题是同一个问题\",{\"1\":{\"230\":1}}],[\"本人\",{\"1\":{\"4\":1}}],[\"版的消息\",{\"1\":{\"342\":1,\"357\":1}}],[\"版的位置上传报文为例\",{\"1\":{\"292\":1}}],[\"版的位置批量上传报文为例\",{\"1\":{\"289\":1}}],[\"版的\",{\"1\":{\"113\":2,\"468\":1}}],[\"版统一处理\",{\"1\":{\"18\":1}}],[\"版在\",{\"1\":{\"18\":1}}],[\"版本的配置\",{\"1\":{\"441\":1,\"442\":1}}],[\"版本必须在\",{\"1\":{\"441\":2}}],[\"版本改为\",{\"1\":{\"406\":1,\"407\":1}}],[\"版本不支持自动化的\",{\"1\":{\"349\":1}}],[\"版本标识\",{\"1\":{\"140\":1,\"382\":1}}],[\"版本从\",{\"1\":{\"131\":1}}],[\"版本限制如下\",{\"1\":{\"115\":1,\"404\":1}}],[\"版本升级到\",{\"1\":{\"65\":1,\"70\":3,\"116\":2}}],[\"版本\",{\"1\":{\"13\":1,\"115\":1,\"404\":1,\"442\":3,\"453\":1,\"454\":2,\"455\":2}}],[\"据官方文档描述\",{\"1\":{\"18\":1}}],[\"警告\",{\"1\":{\"18\":1,\"181\":1,\"289\":1,\"292\":1,\"297\":1,\"306\":1,\"347\":3,\"404\":1,\"448\":1,\"452\":1,\"469\":1,\"512\":1}}],[\"就类似于\",{\"1\":{\"326\":1}}],[\"就是用来调试的\",{\"1\":{\"567\":1}}],[\"就是附加项列表了\",{\"1\":{\"503\":1}}],[\"就是消息体中第4~7个字节\",{\"1\":{\"497\":1}}],[\"就是校验码\",{\"1\":{\"369\":1}}],[\"就是当前正在迭代的对象\",{\"1\":{\"304\":1,\"315\":1}}],[\"就是标记一下被该注解修饰的类中存在若干个能处理请求的处理器方法\",{\"1\":{\"297\":1}}],[\"就需要指定\",{\"1\":{\"225\":1}}],[\"就\",{\"1\":{\"18\":1}}],[\"但是这种情况在原始808文档中确实是存在的\",{\"1\":{\"505\":1}}],[\"但是如果将这个附加项解析为一个\",{\"1\":{\"503\":1}}],[\"但是关键部分会截图展示\",{\"1\":{\"493\":1}}],[\"但是编译之后的\",{\"1\":{\"450\":1}}],[\"但是编译级别是\",{\"1\":{\"440\":1}}],[\"但是你可以将\",{\"1\":{\"441\":1}}],[\"但是实际上\",{\"1\":{\"441\":1}}],[\"但是其中的\",{\"1\":{\"382\":1}}],[\"但是接收到的都是\",{\"1\":{\"326\":1}}],[\"但是该属性返回的是一个\",{\"1\":{\"303\":1}}],[\"但是该属性返回的是一个方法名\",{\"1\":{\"303\":1}}],[\"但是该属性是基于\",{\"1\":{\"303\":2}}],[\"但是原理都一样\",{\"1\":{\"289\":1,\"292\":1,\"493\":1}}],[\"但是内置的反序列化器并不支持直接从\",{\"1\":{\"239\":1}}],[\"但是内置的转换器实际上不支持从\",{\"1\":{\"234\":1}}],[\"但是在使用时难免会疑惑\",{\"1\":{\"225\":1}}],[\"但是默认是没有启用的\",{\"1\":{\"148\":1}}],[\"但是\",{\"1\":{\"16\":1,\"225\":2,\"289\":1,\"292\":1,\"341\":1,\"422\":1,\"493\":1,\"502\":1}}],[\"ls\",{\"1\":{\"444\":1}}],[\"lngtype\",{\"1\":{\"497\":1,\"499\":1}}],[\"lngbystartindexmethod\",{\"1\":{\"495\":1}}],[\"lnglatreqmsgfieldconverter\",{\"1\":{\"495\":3,\"502\":2}}],[\"lng\",{\"1\":{\"225\":2,\"234\":1,\"237\":1,\"293\":1,\"495\":1}}],[\"last\",{\"1\":{\"395\":2}}],[\"lastcommunicatetimestamp\",{\"1\":{\"393\":1,\"474\":3}}],[\"lattype\",{\"1\":{\"293\":1,\"308\":1,\"495\":1,\"498\":1}}],[\"lat\",{\"1\":{\"225\":2,\"234\":1,\"237\":1,\"293\":1,\"495\":1,\"502\":1}}],[\"lang\",{\"1\":{\"107\":2,\"226\":5,\"227\":4,\"235\":1,\"240\":1,\"413\":1}}],[\"language\",{\"1\":{\"16\":1}}],[\"level\",{\"1\":{\"166\":1,\"170\":1,\"348\":3,\"359\":1,\"466\":4,\"486\":2}}],[\"lengthmethod\",{\"1\":{\"226\":2,\"303\":1}}],[\"lengthexpression\",{\"1\":{\"226\":2,\"286\":5,\"287\":3,\"290\":4,\"293\":5,\"303\":1,\"304\":1,\"305\":1}}],[\"length\",{\"0\":{\"173\":1,\"194\":1},\"1\":{\"23\":1,\"90\":1,\"108\":1,\"145\":1,\"172\":1,\"225\":8,\"226\":2,\"236\":2,\"239\":1,\"240\":1,\"241\":2,\"246\":2,\"251\":5,\"260\":3,\"263\":3,\"270\":5,\"279\":3,\"282\":3,\"293\":2,\"303\":3,\"305\":3,\"418\":1,\"422\":1,\"458\":1,\"480\":1,\"495\":1,\"497\":1,\"502\":1,\"503\":1,\"504\":1,\"515\":1,\"518\":2,\"521\":1,\"542\":1}}],[\"lword\",{\"1\":{\"107\":1,\"243\":1}}],[\"lombok\",{\"1\":{\"445\":1,\"446\":1}}],[\"load\",{\"1\":{\"444\":1}}],[\"loggerfactory\",{\"1\":{\"386\":1}}],[\"logger\",{\"1\":{\"386\":1}}],[\"logging\",{\"0\":{\"170\":1},\"1\":{\"166\":1,\"170\":1,\"348\":1,\"359\":1,\"466\":1,\"486\":1}}],[\"log\",{\"1\":{\"290\":1,\"293\":1,\"300\":1,\"320\":1,\"333\":1,\"334\":1,\"354\":1,\"366\":1,\"386\":2,\"429\":7,\"491\":1,\"495\":1,\"508\":1,\"515\":1,\"522\":1,\"526\":1,\"529\":1,\"538\":3,\"547\":1,\"567\":7}}],[\"location\",{\"1\":{\"508\":2,\"526\":3,\"534\":1,\"538\":1,\"539\":1,\"542\":1}}],[\"locationbatchupload\",{\"1\":{\"290\":1}}],[\"locationbatchuploadmsgv2019\",{\"1\":{\"290\":1}}],[\"locationmsghandler\",{\"1\":{\"290\":1,\"293\":1}}],[\"locationmsgextraitemmapping\",{\"1\":{\"92\":1,\"287\":2}}],[\"locationinfouploadmsghandler\",{\"1\":{\"538\":1,\"539\":1}}],[\"locationinfo\",{\"1\":{\"290\":1}}],[\"locationuploadrequestmsgbody\",{\"1\":{\"526\":1}}],[\"locationuploadreqmsgv2019aliastest\",{\"1\":{\"246\":1}}],[\"locationuploadstatus\",{\"1\":{\"499\":2}}],[\"locationuploadmsgbodyconverter2\",{\"1\":{\"534\":2}}],[\"locationuploadmsgbody\",{\"1\":{\"495\":1,\"499\":1,\"508\":1,\"517\":1,\"534\":2,\"538\":1}}],[\"locationuploadmsgv2019\",{\"1\":{\"286\":1,\"290\":1,\"293\":1}}],[\"locationupload\",{\"1\":{\"293\":1}}],[\"localdatetime\",{\"1\":{\"107\":2,\"239\":1,\"241\":2,\"242\":2,\"246\":2,\"293\":1,\"567\":4}}],[\"longfielddeserializer\",{\"1\":{\"236\":3}}],[\"longword\",{\"1\":{\"107\":1}}],[\"long\",{\"1\":{\"103\":1,\"107\":2,\"225\":4,\"234\":4,\"236\":4,\"237\":2,\"243\":1,\"246\":3,\"248\":2,\"249\":2,\"254\":2,\"255\":2,\"257\":2,\"258\":2,\"267\":2,\"268\":2,\"273\":2,\"274\":2,\"276\":2,\"277\":2,\"287\":2,\"293\":3,\"306\":1,\"413\":1,\"415\":2,\"418\":2,\"422\":2,\"474\":2,\"480\":2,\"515\":1}}],[\"li>\",{\"1\":{\"322\":6,\"346\":3,\"389\":2}}],[\"link\",{\"1\":{\"322\":6,\"346\":4,\"369\":2,\"370\":6,\"371\":1,\"379\":2,\"385\":1,\"389\":3,\"394\":6,\"410\":1,\"458\":1,\"473\":9,\"567\":1}}],[\"linux\",{\"1\":{\"180\":1,\"376\":1}}],[\"linux端调试工具\",{\"0\":{\"8\":1}}],[\"lists\",{\"1\":{\"515\":1}}],[\"listener2\",{\"1\":{\"394\":1}}],[\"listener1\",{\"1\":{\"394\":1}}],[\"listener\",{\"1\":{\"394\":1}}],[\"listeners\",{\"1\":{\"393\":2}}],[\"list\",{\"1\":{\"286\":5,\"287\":2,\"290\":2,\"293\":3,\"312\":1,\"320\":1,\"418\":1,\"419\":1,\"422\":1,\"423\":1,\"503\":3,\"504\":1,\"505\":1}}],[\"list<extrainfoitem>\",{\"1\":{\"504\":1}}],[\"list<extraitem>\",{\"1\":{\"286\":1,\"287\":1,\"293\":1}}],[\"list<builtinmsg8103alias\",{\"1\":{\"423\":1}}],[\"list<builtinmsg8103\",{\"1\":{\"419\":1}}],[\"list<integer>\",{\"1\":{\"366\":1,\"505\":1}}],[\"list<respterminalsettings\",{\"1\":{\"320\":1,\"515\":1}}],[\"list<paramitem>\",{\"1\":{\"312\":1,\"418\":1,\"422\":1,\"515\":1}}],[\"list<msg0704item>\",{\"1\":{\"290\":1}}],[\"list<map<string\",{\"1\":{\"122\":1}}],[\"list<dynamicfield>\",{\"1\":{\"122\":2}}],[\"lib\",{\"1\":{\"39\":1}}],[\"支持哪些类型的响应消息取决于\",{\"1\":{\"351\":1}}],[\"支持哪些版本的协议\",{\"0\":{\"13\":1}}],[\"支持的参数类型\",{\"0\":{\"327\":1}}],[\"支持返回\",{\"1\":{\"108\":1}}],[\"支持将\",{\"1\":{\"107\":1,\"510\":1}}],[\"支持转换为\",{\"1\":{\"107\":1}}],[\"支持通过\",{\"1\":{\"107\":1}}],[\"支持\",{\"1\":{\"103\":1,\"107\":2,\"237\":2,\"246\":1,\"314\":1,\"434\":1,\"436\":1,\"448\":1}}],[\"支持苏标附件服务器\",{\"1\":{\"94\":1}}],[\"支持位置附加项列表注解\",{\"1\":{\"92\":1}}],[\"支持多版本\",{\"1\":{\"75\":1}}],[\"支持消息分包\",{\"1\":{\"75\":1}}],[\"支持spel\",{\"1\":{\"75\":1}}],[\"支持自定义\",{\"1\":{\"43\":1}}],[\"支持2019版\",{\"1\":{\"35\":1}}],[\"支持list类型\",{\"1\":{\"31\":1}}],[\"支持混合版本\",{\"1\":{\"16\":1}}],[\"支持分包\",{\"1\":{\"16\":1}}],[\"风格\",{\"1\":{\"16\":1,\"471\":1}}],[\"future\",{\"1\":{\"538\":3}}],[\"function\",{\"1\":{\"341\":1}}],[\"fff\",{\"1\":{\"419\":1,\"423\":1}}],[\"for\",{\"1\":{\"390\":1,\"395\":1,\"458\":1,\"529\":1,\"542\":1,\"567\":1}}],[\"foreach\",{\"1\":{\"366\":1,\"393\":1,\"423\":1}}],[\"forname\",{\"1\":{\"318\":1}}],[\"formatutils\",{\"1\":{\"383\":2,\"436\":1}}],[\"format\",{\"0\":{\"218\":1},\"1\":{\"567\":2}}],[\"found\",{\"1\":{\"318\":1,\"512\":1,\"568\":1}}],[\"flow\",{\"1\":{\"395\":1}}],[\"flowidgenerator\",{\"1\":{\"436\":2}}],[\"flowids\",{\"1\":{\"395\":1}}],[\"flowid=2\",{\"1\":{\"348\":1}}],[\"flowid\",{\"1\":{\"290\":1,\"293\":1,\"300\":1,\"316\":1,\"329\":1,\"331\":1,\"333\":1,\"334\":1,\"354\":2,\"357\":2,\"395\":5,\"432\":2,\"473\":1,\"523\":1,\"526\":1,\"567\":2}}],[\"fluent\",{\"1\":{\"16\":1,\"471\":1}}],[\"from\",{\"1\":{\"236\":1,\"241\":1,\"444\":1}}],[\"frame\",{\"0\":{\"173\":1,\"194\":1},\"1\":{\"23\":1,\"145\":1,\"172\":1}}],[\"framework内置的\",{\"1\":{\"454\":1,\"455\":1}}],[\"framework\",{\"1\":{\"18\":1,\"22\":1,\"26\":4,\"28\":1,\"29\":1,\"31\":1,\"40\":1,\"48\":2,\"55\":1,\"58\":2,\"68\":1,\"73\":1,\"383\":2,\"453\":2,\"454\":2,\"455\":2,\"460\":2,\"480\":1}}],[\"fasterxml\",{\"1\":{\"149\":2}}],[\"false\",{\"1\":{\"101\":1,\"119\":1,\"145\":1,\"147\":2,\"149\":1,\"181\":1,\"199\":1,\"318\":1,\"320\":1,\"322\":1,\"515\":2,\"528\":1,\"532\":3}}],[\"faq\",{\"0\":{\"10\":1,\"228\":1},\"1\":{\"223\":1}}],[\"filepath\",{\"1\":{\"567\":3}}],[\"file\",{\"1\":{\"444\":1,\"567\":11}}],[\"filter\",{\"0\":{\"148\":1},\"1\":{\"107\":1,\"147\":1,\"148\":1,\"379\":6}}],[\"firstsubpackageflowid\",{\"1\":{\"366\":2}}],[\"firstflowidofsubpackage\",{\"1\":{\"364\":2}}],[\"field0xe6\",{\"1\":{\"505\":1}}],[\"field0xe5\",{\"1\":{\"505\":1}}],[\"field0xe4\",{\"1\":{\"505\":1}}],[\"field0xe1\",{\"1\":{\"505\":1}}],[\"field0x31\",{\"1\":{\"505\":1}}],[\"field0x30\",{\"1\":{\"505\":1}}],[\"field0x0001\",{\"1\":{\"505\":1}}],[\"fieldmetadata\",{\"1\":{\"236\":1,\"241\":2}}],[\"field\",{\"1\":{\"226\":3,\"227\":2,\"235\":1,\"240\":1}}],[\"findbyterminalid\",{\"1\":{\"318\":1,\"320\":1,\"366\":1,\"512\":1}}],[\"findbysessionid\",{\"1\":{\"49\":1}}],[\"finally\",{\"1\":{\"383\":2,\"428\":1,\"431\":1}}],[\"final\",{\"1\":{\"70\":1,\"236\":3,\"241\":5,\"300\":1,\"318\":2,\"320\":11,\"334\":7,\"366\":7,\"383\":2,\"386\":5,\"390\":1,\"393\":2,\"395\":1,\"414\":4,\"415\":5,\"419\":3,\"423\":3,\"428\":2,\"431\":3,\"434\":4,\"435\":4,\"436\":3,\"458\":3,\"480\":3,\"512\":1,\"515\":1,\"523\":1,\"529\":2,\"532\":3,\"538\":4,\"542\":3,\"567\":12}}],[\"fix\",{\"1\":{\"50\":1}}],[\"fixes\",{\"0\":{\"22\":1,\"26\":1,\"29\":1,\"32\":1,\"36\":1,\"40\":1,\"44\":1,\"48\":1,\"51\":1,\"55\":1,\"58\":1,\"68\":1,\"73\":1,\"81\":1,\"90\":1,\"96\":1,\"101\":1,\"108\":1,\"125\":1,\"127\":1}}],[\"features\",{\"0\":{\"23\":1,\"25\":1,\"28\":1,\"31\":1,\"35\":1,\"39\":1,\"43\":1,\"47\":1,\"54\":1,\"57\":1,\"60\":1,\"64\":1,\"69\":1,\"75\":1,\"80\":1,\"84\":1,\"88\":1,\"92\":1,\"94\":1,\"98\":1,\"100\":1,\"103\":1,\"105\":1,\"107\":1,\"111\":1,\"113\":1,\"115\":1,\"129\":1,\"131\":1,\"146\":1},\"1\":{\"101\":1,\"107\":1,\"109\":1,\"143\":1,\"146\":1,\"147\":1,\"148\":1,\"149\":2}}],[\"aws\",{\"1\":{\"567\":2}}],[\"aware\",{\"1\":{\"397\":1,\"550\":1}}],[\"aware接口\",{\"0\":{\"397\":1,\"550\":1},\"1\":{\"549\":1}}],[\"afieldname\",{\"1\":{\"521\":1}}],[\"afterwrite\",{\"1\":{\"431\":3}}],[\"afterread\",{\"1\":{\"428\":2}}],[\"aftercompletion\",{\"1\":{\"322\":1}}],[\"args\",{\"1\":{\"486\":2}}],[\"argumentcontext\",{\"1\":{\"326\":1}}],[\"artifactid>\",{\"1\":{\"454\":3,\"455\":3,\"485\":1}}],[\"actionable\",{\"1\":{\"444\":1}}],[\"acc开\",{\"1\":{\"499\":1}}],[\"accstatus\",{\"1\":{\"497\":1,\"499\":1}}],[\"accbooleanstatus\",{\"1\":{\"293\":1,\"308\":1,\"495\":1,\"498\":1}}],[\"accintstatus\",{\"1\":{\"293\":1,\"308\":1,\"495\":1,\"498\":1}}],[\"accessors\",{\"1\":{\"239\":1,\"242\":1,\"246\":1,\"286\":1,\"287\":1,\"290\":2,\"293\":1,\"316\":1,\"354\":1,\"418\":2,\"422\":2,\"434\":1,\"495\":1,\"515\":2,\"517\":1,\"523\":1}}],[\"assert\",{\"1\":{\"508\":4,\"526\":4}}],[\"assertions\",{\"1\":{\"436\":6}}],[\"assertsame\",{\"1\":{\"428\":1,\"431\":1}}],[\"assertequals\",{\"1\":{\"414\":2,\"415\":9,\"419\":1,\"423\":2,\"428\":3,\"431\":3,\"434\":4,\"435\":5,\"436\":6}}],[\"assertmsg\",{\"1\":{\"414\":2}}],[\"a\",{\"1\":{\"390\":1}}],[\"appprops\",{\"1\":{\"567\":5}}],[\"appendstring\",{\"1\":{\"532\":1}}],[\"appendbyte\",{\"1\":{\"532\":1}}],[\"appendbytes\",{\"1\":{\"532\":4}}],[\"appendword\",{\"1\":{\"532\":3}}],[\"applicationcontextaware\",{\"1\":{\"397\":1,\"550\":1}}],[\"application\",{\"1\":{\"385\":1,\"410\":1,\"466\":1,\"486\":1}}],[\"api\",{\"1\":{\"16\":1,\"471\":1}}],[\"addresolver\",{\"1\":{\"509\":5}}],[\"adddefaulthandlermethodargumentresolver\",{\"1\":{\"509\":2}}],[\"addlistener\",{\"1\":{\"393\":1,\"394\":1}}],[\"addlast\",{\"1\":{\"386\":3}}],[\"admin\",{\"1\":{\"354\":1}}],[\"ad1\",{\"1\":{\"287\":1}}],[\"ad0\",{\"1\":{\"287\":1}}],[\"abstractmsghandler<locationuploadmsgbody>\",{\"1\":{\"538\":1}}],[\"abstractmsghandler<authrequestmsgbody>\",{\"1\":{\"538\":1}}],[\"abstractmsghandler\",{\"1\":{\"538\":1}}],[\"abstractjt808requestmsgqueuelistener\",{\"1\":{\"389\":1}}],[\"abstractextendedjt808fielddeserializer<object>\",{\"1\":{\"236\":1,\"241\":1}}],[\"abstractrunner\",{\"1\":{\"121\":1,\"409\":1,\"410\":2}}],[\"anotherme17\",{\"1\":{\"548\":2}}],[\"answer\",{\"1\":{\"229\":1,\"230\":1}}],[\"annotationhandler01\",{\"1\":{\"328\":1,\"329\":1,\"330\":1,\"331\":1,\"332\":1,\"333\":1}}],[\"annotationdecodercontext\",{\"1\":{\"304\":1}}],[\"annotation\",{\"1\":{\"1\":1,\"226\":9,\"227\":8,\"235\":2,\"237\":1,\"240\":2,\"241\":2,\"242\":1,\"379\":2,\"389\":1,\"493\":1,\"505\":1,\"506\":1,\"510\":1,\"511\":1,\"515\":1,\"559\":1}}],[\"attr\",{\"1\":{\"393\":1}}],[\"attributekey\",{\"1\":{\"393\":1}}],[\"attribute\",{\"1\":{\"226\":9,\"227\":8,\"235\":2,\"240\":2}}],[\"attachmentitem\",{\"1\":{\"567\":2}}],[\"attachmentitem>\",{\"1\":{\"567\":2}}],[\"attachmentitem>>\",{\"1\":{\"567\":2}}],[\"attachmentitemcache\",{\"1\":{\"567\":3}}],[\"attachmentfileservice\",{\"1\":{\"567\":9}}],[\"attachmentfilehandler\",{\"1\":{\"567\":2}}],[\"attachment\",{\"1\":{\"143\":1,\"145\":2,\"377\":1}}],[\"authmsg\",{\"1\":{\"538\":1}}],[\"authmsghandler\",{\"1\":{\"529\":3,\"538\":1,\"557\":1}}],[\"authmsgv2013\",{\"1\":{\"333\":2}}],[\"authvalidator\",{\"0\":{\"529\":1}}],[\"auth\",{\"1\":{\"458\":1,\"459\":2,\"522\":1,\"538\":7,\"542\":1,\"543\":2}}],[\"author\",{\"1\":{\"346\":1}}],[\"authcodevalidator\",{\"1\":{\"487\":1,\"529\":2,\"538\":1}}],[\"authcode2013debugdemo\",{\"1\":{\"333\":1}}],[\"authcode2019\",{\"1\":{\"300\":1,\"354\":1}}],[\"authcodexxx\",{\"1\":{\"329\":1,\"331\":1}}],[\"authcode\",{\"1\":{\"316\":1,\"354\":1,\"357\":1,\"432\":1,\"522\":1,\"529\":5,\"538\":3}}],[\"authrequestmsgbodyconverter\",{\"1\":{\"556\":1}}],[\"authrequestmsgbody\",{\"1\":{\"202\":1,\"522\":1,\"529\":2,\"538\":2}}],[\"autowired\",{\"1\":{\"512\":1,\"515\":1}}],[\"auto\",{\"1\":{\"193\":1,\"299\":1,\"320\":1,\"328\":1,\"567\":3}}],[\"autoconfigure\",{\"1\":{\"113\":1,\"131\":2,\"441\":1,\"444\":2,\"449\":1}}],[\"availableprocessors\",{\"1\":{\"162\":1,\"214\":1}}],[\"always\",{\"1\":{\"434\":2,\"435\":2}}],[\"alarmidentifier\",{\"1\":{\"567\":2}}],[\"alarmidentifieralias\",{\"1\":{\"567\":1}}],[\"alarmstatus\",{\"1\":{\"414\":4}}],[\"alarmflag\",{\"1\":{\"293\":1,\"495\":1}}],[\"aliyun\",{\"1\":{\"444\":6}}],[\"alive\",{\"0\":{\"154\":1,\"216\":1},\"1\":{\"151\":1,\"373\":1}}],[\"aliasfor\",{\"1\":{\"226\":9,\"227\":8,\"229\":1,\"235\":2,\"240\":2}}],[\"alias\",{\"1\":{\"133\":1,\"230\":1,\"295\":1}}],[\"all\",{\"1\":{\"55\":1,\"58\":1,\"175\":1,\"181\":1}}],[\"allideltime\",{\"1\":{\"23\":1,\"181\":1,\"199\":1}}],[\"8421\",{\"1\":{\"479\":1,\"480\":1}}],[\"8+\",{\"1\":{\"448\":1}}],[\"8e47374be6b8d114cb47be6a9a128a37\",{\"1\":{\"383\":1}}],[\"8\",{\"0\":{\"34\":1},\"1\":{\"70\":1,\"85\":4,\"131\":1,\"225\":7,\"234\":1,\"237\":1,\"239\":2,\"242\":1,\"246\":1,\"293\":6,\"303\":1,\"308\":1,\"415\":2,\"441\":9,\"449\":8,\"450\":1,\"479\":1,\"480\":1,\"495\":2,\"501\":1,\"502\":1,\"534\":1}}],[\"82\",{\"1\":{\"15\":1,\"88\":1,\"381\":1,\"383\":2}}],[\"808报文类型\",{\"1\":{\"517\":1}}],[\"808文档中的经纬度定义为\",{\"1\":{\"500\":1}}],[\"808文档中定义的位置上传报文有很多字段\",{\"1\":{\"289\":1,\"292\":1,\"493\":1}}],[\"808消息\",{\"1\":{\"468\":1}}],[\"808数据类型处理器\",{\"0\":{\"426\":1}}],[\"808服务配置\",{\"0\":{\"190\":1}}],[\"808协议数据类型\",{\"0\":{\"479\":1}}],[\"808协议入门\",{\"1\":{\"223\":1}}],[\"808协议版本\",{\"1\":{\"193\":1}}],[\"808协议目前\",{\"1\":{\"18\":1}}],[\"808协议\",{\"1\":{\"13\":1,\"19\":1,\"289\":1,\"292\":1,\"458\":1,\"461\":1,\"464\":1,\"465\":1,\"476\":1,\"485\":1}}],[\"808的实现\",{\"1\":{\"1\":1}}],[\"808\",{\"0\":{\"476\":1,\"571\":1,\"573\":1,\"574\":1},\"1\":{\"1\":9,\"113\":2,\"115\":7,\"131\":3,\"133\":1,\"145\":1,\"149\":1,\"151\":1,\"157\":1,\"159\":1,\"164\":3,\"166\":2,\"170\":2,\"218\":1,\"348\":1,\"359\":2,\"373\":2,\"390\":1,\"404\":7,\"406\":2,\"407\":2,\"427\":1,\"430\":1,\"438\":2,\"440\":1,\"441\":7,\"442\":1,\"444\":8,\"448\":4,\"449\":5,\"452\":4,\"453\":1,\"454\":4,\"455\":4,\"461\":1,\"464\":1,\"465\":1,\"466\":2,\"470\":1,\"483\":1,\"485\":2,\"488\":1,\"493\":1,\"505\":1,\"506\":1,\"510\":1,\"511\":1,\"515\":1,\"529\":1,\"530\":1,\"532\":1,\"535\":1,\"540\":1,\"543\":1,\"544\":2,\"545\":1,\"547\":1,\"561\":1,\"567\":1}}],[\"的示例性处理流程\",{\"1\":{\"567\":1}}],[\"的映射功能呢\",{\"1\":{\"558\":1}}],[\"的返回类型为\",{\"1\":{\"543\":1}}],[\"的功能\",{\"1\":{\"534\":1,\"535\":1,\"536\":1}}],[\"的方式来实现\",{\"1\":{\"534\":1,\"536\":1}}],[\"的后续内容\",{\"1\":{\"522\":1}}],[\"的回复消息类型为\",{\"1\":{\"515\":1}}],[\"的处理器参数注入\",{\"1\":{\"509\":1}}],[\"的处理服务已经搭建完毕\",{\"1\":{\"468\":1}}],[\"的每一个元素称之为\",{\"1\":{\"503\":1}}],[\"的异常处理可以直接由注解实现\",{\"1\":{\"489\":1}}],[\"的组件的异常处理可以在实现类中自己处理\",{\"1\":{\"489\":1}}],[\"的808协议消息处理服务的搭建\",{\"1\":{\"483\":1}}],[\"的对象里\",{\"1\":{\"475\":1}}],[\"的开关由配置项\",{\"1\":{\"468\":1,\"487\":1}}],[\"的引用指向\",{\"1\":{\"428\":1}}],[\"的类\",{\"1\":{\"427\":1,\"430\":1}}],[\"的类型转换器\",{\"1\":{\"107\":1}}],[\"的一起被自动释放掉\",{\"1\":{\"424\":1}}],[\"的显著区别是\",{\"1\":{\"424\":1}}],[\"的简单用法示例\",{\"1\":{\"423\":1}}],[\"的实例\",{\"1\":{\"423\":1}}],[\"的实现\",{\"1\":{\"349\":1,\"365\":2}}],[\"的实现类\",{\"1\":{\"487\":1,\"558\":1}}],[\"的实现类来实现这个功能\",{\"1\":{\"349\":1}}],[\"的实现类<\",{\"1\":{\"322\":3}}],[\"的实现类实例加入到\",{\"1\":{\"322\":1}}],[\"的实现类中几乎没用到这个属性\",{\"1\":{\"225\":1}}],[\"的内容\",{\"1\":{\"554\":1}}],[\"的内容构造起来有点麻烦\",{\"1\":{\"422\":1}}],[\"的内容不太方便构造\",{\"1\":{\"421\":1}}],[\"的消息类型为\",{\"1\":{\"515\":1}}],[\"的消息内容的数据类型也不同\",{\"1\":{\"418\":1,\"422\":1}}],[\"的消息头长度为\",{\"1\":{\"136\":2,\"140\":2,\"482\":2}}],[\"的作用和\",{\"1\":{\"417\":1}}],[\"的操作\",{\"1\":{\"413\":1}}],[\"的构造器参数也发生了变化\",{\"1\":{\"410\":1}}],[\"的依赖注入的方式来使用\",{\"1\":{\"554\":1}}],[\"的依赖坐标\",{\"1\":{\"406\":1,\"407\":1}}],[\"的依赖如下\",{\"1\":{\"406\":1,\"407\":1}}],[\"的最新版即可\",{\"1\":{\"406\":1,\"407\":1}}],[\"的项目引入为\",{\"1\":{\"464\":1,\"465\":1}}],[\"的项目中\",{\"1\":{\"454\":1,\"455\":1}}],[\"的项目\",{\"1\":{\"406\":1,\"407\":1,\"450\":2}}],[\"的项目提供的\",{\"1\":{\"115\":2,\"404\":2}}],[\"的默认实现为\",{\"1\":{\"392\":1}}],[\"的默认实现类\",{\"1\":{\"359\":1}}],[\"的逻辑执行完成之后才会执行消息体的解析\",{\"1\":{\"379\":1}}],[\"的字节流\",{\"1\":{\"371\":2}}],[\"的阈值\",{\"1\":{\"360\":1}}],[\"的配置\",{\"1\":{\"351\":1}}],[\"的第\",{\"1\":{\"415\":1}}],[\"的第3个子包\",{\"1\":{\"348\":1,\"362\":1}}],[\"的第2个子包\",{\"1\":{\"348\":1,\"362\":1}}],[\"的第1个子包\",{\"1\":{\"348\":1,\"362\":1}}],[\"的请求消息分包暂存器\",{\"1\":{\"347\":1}}],[\"的其他类型\",{\"1\":{\"343\":1}}],[\"的概念\",{\"1\":{\"315\":2}}],[\"的转换器来完成\",{\"1\":{\"492\":1}}],[\"的转换\",{\"1\":{\"234\":1,\"502\":1}}],[\"的强大功能实现的\",{\"1\":{\"229\":1}}],[\"的版本以对应版本的\",{\"1\":{\"453\":1}}],[\"的版本通过\",{\"1\":{\"225\":1}}],[\"的版本是必须的\",{\"1\":{\"225\":1}}],[\"的关系\",{\"1\":{\"225\":1,\"422\":1}}],[\"的全局异常处理的方式来处理异常\",{\"1\":{\"210\":1}}],[\"的文档不难看出以下问题\",{\"1\":{\"555\":1}}],[\"的文档\",{\"1\":{\"188\":1}}],[\"的话\",{\"1\":{\"181\":1,\"199\":1,\"503\":1}}],[\"的日志级别调整的debug\",{\"1\":{\"348\":1}}],[\"的日志\",{\"1\":{\"170\":2}}],[\"的线程池线配置\",{\"1\":{\"145\":1}}],[\"的支持\",{\"1\":{\"115\":1,\"404\":1}}],[\"的改动记录\",{\"1\":{\"111\":1}}],[\"的时候\",{\"1\":{\"101\":1}}],[\"的bug\",{\"1\":{\"44\":1}}],[\"的任意终端\",{\"1\":{\"13\":1}}],[\"的\",{\"1\":{\"13\":1,\"16\":1,\"23\":2,\"81\":1,\"115\":1,\"144\":1,\"173\":1,\"181\":1,\"190\":1,\"194\":1,\"199\":1,\"217\":1,\"225\":3,\"229\":1,\"297\":1,\"303\":2,\"322\":1,\"326\":1,\"334\":1,\"338\":2,\"341\":1,\"353\":1,\"363\":1,\"379\":2,\"397\":1,\"404\":1,\"428\":1,\"431\":1,\"445\":1,\"448\":2,\"461\":1,\"475\":1,\"490\":1,\"491\":1,\"507\":1,\"508\":1,\"523\":1,\"536\":1,\"547\":1,\"548\":1,\"550\":1,\"558\":1}}],[\"或者可以直接调用\",{\"1\":{\"394\":1}}],[\"或者\",{\"1\":{\"370\":1,\"434\":1,\"435\":1,\"438\":1}}],[\"或可以转换为\",{\"1\":{\"343\":1}}],[\"或由\",{\"1\":{\"343\":1}}],[\"或其他类型\",{\"1\":{\"239\":1}}],[\"或\",{\"1\":{\"13\":1,\"107\":2,\"133\":1,\"239\":1,\"242\":1,\"295\":1,\"370\":1,\"385\":1,\"394\":1,\"410\":1,\"422\":2,\"441\":1,\"496\":1,\"518\":1}}],[\"不应该由指令服务器对应的端口处理\",{\"1\":{\"567\":3}}],[\"不一定要手动new一个handler注册\",{\"1\":{\"539\":1}}],[\"不过用来\",{\"1\":{\"529\":1}}],[\"不过你可以扩展自定义注解实现这个转换\",{\"1\":{\"234\":1}}],[\"不用转义\",{\"1\":{\"538\":1}}],[\"不用\",{\"1\":{\"529\":1}}],[\"不给客户端回复数据\",{\"0\":{\"524\":1}}],[\"不便全部展示出来\",{\"1\":{\"493\":1}}],[\"不推荐\",{\"1\":{\"450\":1}}],[\"不建议自己单独安装\",{\"1\":{\"443\":1}}],[\"不建议对\",{\"1\":{\"441\":1}}],[\"不支持\",{\"1\":{\"434\":1,\"435\":2,\"436\":1,\"523\":1,\"526\":1}}],[\"不支持的加密类型\",{\"1\":{\"383\":2}}],[\"不会影响到你阅读本示例\",{\"1\":{\"493\":1}}],[\"不会改变内部\",{\"1\":{\"428\":2,\"431\":1}}],[\"不会自增\",{\"1\":{\"395\":1}}],[\"不会回复\",{\"1\":{\"4\":1}}],[\"不满足需求\",{\"1\":{\"370\":1}}],[\"不符合要求\",{\"1\":{\"370\":2}}],[\"不包含分隔符\",{\"1\":{\"369\":2,\"370\":1}}],[\"不包括\",{\"1\":{\"181\":1}}],[\"不要使用同一个线程\",{\"1\":{\"319\":1}}],[\"不要求连续\",{\"1\":{\"303\":1,\"314\":1}}],[\"不要直接使用\",{\"1\":{\"169\":1}}],[\"不是标准完整的位置上传报文\",{\"1\":{\"289\":1,\"292\":1,\"493\":1}}],[\"不需要手动\",{\"1\":{\"417\":1}}],[\"不需要\",{\"1\":{\"236\":1,\"241\":1}}],[\"不再调用处理器方法\",{\"1\":{\"322\":1}}],[\"不再增加新特性\",{\"1\":{\"188\":1,\"222\":3}}],[\"不再依赖\",{\"1\":{\"16\":1}}],[\"不同\",{\"1\":{\"418\":1,\"422\":1}}],[\"不同版本可能有改动\",{\"1\":{\"133\":1,\"295\":1}}],[\"不同终端\",{\"1\":{\"13\":1}}],[\"不向下兼容\",{\"1\":{\"16\":1}}],[\"混合使用问题\",{\"1\":{\"230\":1}}],[\"混合使用\",{\"0\":{\"230\":1}}],[\"混合\",{\"1\":{\"13\":1}}],[\"开\",{\"1\":{\"497\":1}}],[\"开头的所有配置项在运行时读取到的最终值\",{\"1\":{\"149\":1}}],[\"开发中的\",{\"1\":{\"326\":1}}],[\"开发中\",{\"1\":{\"141\":1}}],[\"开发时用来debug的项目\",{\"1\":{\"1\":2}}],[\"开始可以不再指定\",{\"1\":{\"290\":3,\"293\":3}}],[\"开始计数\",{\"1\":{\"287\":1}}],[\"开始引入了注解别名机制\",{\"1\":{\"225\":1}}],[\"开始循环累加\",{\"1\":{\"136\":1,\"140\":1,\"482\":1}}],[\"开始加入的\",{\"1\":{\"133\":1,\"295\":1}}],[\"开始\",{\"1\":{\"115\":1,\"136\":1,\"140\":1,\"180\":1,\"239\":1,\"287\":1,\"305\":1,\"308\":1,\"376\":1,\"404\":1,\"415\":1,\"448\":2,\"452\":1,\"482\":1,\"510\":1,\"531\":1}}],[\"开始支持\",{\"1\":{\"13\":1,\"14\":1,\"15\":1,\"248\":3,\"249\":3,\"251\":2,\"252\":2,\"254\":3,\"255\":3,\"257\":3,\"258\":3,\"260\":2,\"261\":2,\"263\":2,\"264\":2,\"267\":3,\"268\":3,\"270\":2,\"271\":2,\"273\":3,\"274\":3,\"276\":3,\"277\":3,\"279\":2,\"280\":2,\"282\":2,\"283\":2,\"286\":3,\"293\":3,\"306\":1,\"441\":1}}],[\"章节目录\",{\"0\":{\"11\":1,\"19\":1,\"189\":1,\"223\":1}}],[\"十六进制报文\",{\"0\":{\"494\":1}}],[\"十六进制格式\",{\"1\":{\"469\":1,\"488\":3,\"494\":1}}],[\"十六进制\",{\"1\":{\"7\":1}}],[\"使用内置解析器\",{\"1\":{\"543\":1}}],[\"使用内置类型解析\",{\"1\":{\"459\":1}}],[\"使用commandsender下发\",{\"0\":{\"513\":1}}],[\"使用方法也很简单\",{\"1\":{\"510\":1}}],[\"使用方式\",{\"1\":{\"342\":1}}],[\"使用转换器除以10^6转为double类型\",{\"1\":{\"495\":2,\"502\":1}}],[\"使用发包工具测试鉴权消息\",{\"0\":{\"488\":1}}],[\"使用3\",{\"1\":{\"455\":1}}],[\"使用2\",{\"1\":{\"454\":1}}],[\"使用jt808bytewriter手动编码响应体\",{\"0\":{\"432\":1}}],[\"使用jt808bytereader来解析请求体\",{\"0\":{\"429\":1}}],[\"使用示例\",{\"0\":{\"390\":1}}],[\"使用起来相当繁琐\",{\"1\":{\"286\":1}}],[\"使用自定义注解\",{\"0\":{\"237\":1,\"242\":1}}],[\"使用基于注解的\",{\"1\":{\"201\":1,\"206\":1,\"210\":1}}],[\"使用\",{\"0\":{\"498\":1,\"499\":1,\"504\":1,\"505\":1},\"1\":{\"7\":1,\"16\":1,\"39\":1,\"69\":1,\"107\":1,\"160\":1,\"305\":1,\"406\":1,\"407\":1,\"444\":1,\"464\":1,\"465\":1,\"534\":1,\"536\":1}}],[\"有关\",{\"1\":{\"554\":1}}],[\"有多少个附加项就要定义多少个字段\",{\"1\":{\"503\":1}}],[\"有得必有失\",{\"1\":{\"503\":1}}],[\"有类似的作用\",{\"1\":{\"475\":1}}],[\"有个属性\",{\"1\":{\"360\":1}}],[\"有溢出的风险\",{\"1\":{\"248\":1,\"254\":1,\"257\":1,\"267\":1,\"273\":1,\"276\":1}}],[\"有\",{\"1\":{\"181\":1}}],[\"有单词拼写错误\",{\"1\":{\"115\":1,\"404\":1}}],[\"有什么区别\",{\"0\":{\"16\":1}}],[\"有钱的捧个钱场\",{\"1\":{\"5\":1}}],[\"有问题群里留言即可\",{\"1\":{\"4\":1}}],[\"项目开始测试\",{\"1\":{\"468\":1,\"487\":1}}],[\"项目源码要求的\",{\"1\":{\"450\":1}}],[\"项目模块介绍\",{\"0\":{\"449\":1}}],[\"项目\",{\"1\":{\"445\":1,\"460\":1}}],[\"项目中自带的\",{\"1\":{\"444\":1}}],[\"项目的发展离不开你的支持\",{\"1\":{\"5\":1}}],[\"项目结构\",{\"0\":{\"1\":1}}],[\"赞助\",{\"0\":{\"5\":1}}],[\"19\",{\"1\":{\"548\":1}}],[\"1开始不再需要指定\",{\"1\":{\"303\":3}}],[\"1m\",{\"1\":{\"151\":1,\"154\":1,\"185\":1,\"373\":1}}],[\"13160466666\",{\"1\":{\"532\":1}}],[\"13912344321\",{\"1\":{\"532\":2}}],[\"13717861955\",{\"1\":{\"515\":1}}],[\"13\",{\"1\":{\"136\":2,\"140\":2,\"382\":4,\"482\":1}}],[\"1byte\",{\"1\":{\"135\":3,\"139\":3,\"481\":3}}],[\"14\",{\"0\":{\"93\":1},\"1\":{\"85\":1,\"115\":1,\"116\":1,\"136\":1,\"140\":1,\"382\":2,\"404\":1,\"482\":1}}],[\"16字节\",{\"1\":{\"136\":1,\"482\":1}}],[\"16byte\",{\"1\":{\"135\":1,\"139\":1,\"481\":1}}],[\"16\",{\"0\":{\"120\":1},\"1\":{\"48\":1,\"50\":1,\"136\":7,\"140\":5,\"145\":1,\"225\":2,\"234\":1,\"237\":1,\"293\":2,\"382\":2,\"473\":1,\"479\":1,\"480\":1,\"482\":5,\"495\":1,\"534\":1}}],[\"18\",{\"1\":{\"40\":1,\"85\":1,\"287\":1,\"293\":2,\"442\":2,\"449\":2,\"453\":1,\"454\":2,\"495\":1,\"534\":1}}],[\"10203040535452494e4700000064\",{\"1\":{\"431\":2}}],[\"10203040\",{\"1\":{\"428\":2,\"431\":1}}],[\"1024\",{\"1\":{\"145\":1,\"172\":1,\"173\":1,\"184\":1,\"185\":1,\"194\":1,\"311\":2,\"359\":1,\"360\":2,\"473\":1}}],[\"100\",{\"1\":{\"290\":5,\"320\":1,\"418\":2,\"422\":2,\"431\":1,\"502\":1,\"515\":1,\"534\":2,\"559\":1}}],[\"1000000\",{\"1\":{\"236\":1}}],[\"10l\",{\"1\":{\"287\":1}}],[\"10km\",{\"1\":{\"287\":2}}],[\"10^6\",{\"1\":{\"246\":1,\"495\":2,\"501\":1}}],[\"106\",{\"1\":{\"234\":2}}],[\"1078\",{\"1\":{\"131\":3,\"567\":1}}],[\"1072477383\",{\"1\":{\"4\":1}}],[\"10\",{\"0\":{\"27\":1,\"95\":1},\"1\":{\"136\":7,\"140\":4,\"382\":6,\"473\":3,\"482\":4}}],[\"11100111\",{\"1\":{\"415\":1}}],[\"11110111\",{\"1\":{\"415\":1}}],[\"11位\",{\"1\":{\"383\":2}}],[\"11+\",{\"1\":{\"115\":1,\"404\":1,\"448\":1}}],[\"11\",{\"0\":{\"24\":1,\"126\":1,\"128\":1},\"1\":{\"115\":2,\"131\":1,\"305\":2,\"404\":2,\"419\":1,\"423\":1,\"441\":1,\"473\":1,\"482\":2,\"532\":1}}],[\"17字节\",{\"1\":{\"140\":1}}],[\"17\",{\"1\":{\"18\":1,\"48\":1,\"50\":1,\"115\":3,\"140\":4,\"287\":1,\"404\":3,\"441\":12,\"445\":1,\"446\":1,\"449\":7,\"450\":2}}],[\"17+\",{\"1\":{\"2\":1,\"115\":1,\"404\":1}}],[\"15\",{\"1\":{\"18\":1,\"136\":1,\"140\":5,\"287\":2,\"305\":2,\"382\":2,\"473\":2,\"482\":3}}],[\"12<\",{\"1\":{\"454\":1}}],[\"12替换\",{\"1\":{\"454\":1}}],[\"12位\",{\"1\":{\"383\":2}}],[\"12345\",{\"1\":{\"532\":1}}],[\"12345678901234567890\",{\"1\":{\"532\":1}}],[\"12359\",{\"1\":{\"532\":1}}],[\"123\",{\"1\":{\"357\":1,\"428\":2,\"432\":1,\"532\":1}}],[\"12字节\",{\"1\":{\"136\":1,\"482\":1}}],[\"128\",{\"1\":{\"109\":1,\"151\":1,\"152\":1,\"159\":2,\"162\":1,\"163\":1,\"373\":2,\"431\":1,\"435\":2}}],[\"12\",{\"0\":{\"21\":1,\"99\":1,\"126\":1},\"1\":{\"18\":1,\"65\":1,\"115\":1,\"136\":4,\"225\":5,\"234\":2,\"237\":2,\"246\":1,\"293\":2,\"404\":1,\"482\":3,\"485\":2,\"495\":3,\"518\":1,\"534\":1}}],[\"1\",{\"0\":{\"16\":1,\"20\":1,\"21\":1,\"24\":1,\"27\":1,\"30\":1,\"34\":1,\"38\":1,\"42\":1,\"46\":1,\"50\":1,\"72\":1,\"78\":1,\"79\":1,\"83\":1,\"87\":1,\"89\":1,\"91\":1,\"93\":1,\"95\":1,\"97\":1,\"99\":2,\"102\":2,\"104\":2,\"106\":2,\"110\":1,\"112\":1,\"114\":1,\"130\":1,\"145\":1,\"146\":2,\"224\":2,\"231\":2,\"244\":2,\"285\":1,\"286\":1,\"287\":1,\"379\":2,\"380\":1,\"403\":1,\"412\":2,\"416\":2,\"420\":2,\"497\":1,\"501\":1,\"512\":1,\"565\":1},\"1\":{\"15\":1,\"16\":2,\"70\":2,\"82\":1,\"85\":1,\"100\":6,\"105\":2,\"111\":2,\"115\":3,\"133\":2,\"136\":3,\"140\":3,\"143\":2,\"148\":2,\"162\":2,\"164\":2,\"188\":1,\"214\":1,\"222\":3,\"225\":6,\"226\":4,\"227\":2,\"232\":2,\"235\":1,\"236\":3,\"237\":2,\"239\":2,\"240\":1,\"242\":2,\"246\":1,\"248\":6,\"249\":6,\"251\":4,\"252\":4,\"254\":6,\"255\":6,\"257\":6,\"258\":6,\"260\":4,\"261\":4,\"263\":4,\"264\":4,\"267\":6,\"268\":6,\"270\":4,\"271\":4,\"273\":6,\"274\":6,\"276\":6,\"277\":6,\"279\":4,\"280\":4,\"282\":4,\"283\":4,\"286\":7,\"287\":5,\"290\":8,\"293\":19,\"295\":2,\"303\":8,\"305\":4,\"306\":2,\"307\":1,\"308\":3,\"314\":1,\"316\":3,\"320\":1,\"333\":2,\"348\":1,\"354\":3,\"357\":2,\"362\":2,\"379\":2,\"382\":4,\"395\":3,\"404\":3,\"406\":2,\"407\":2,\"412\":2,\"414\":3,\"415\":9,\"416\":2,\"419\":1,\"420\":2,\"422\":4,\"423\":1,\"429\":1,\"432\":2,\"434\":6,\"435\":4,\"436\":4,\"441\":1,\"445\":1,\"448\":3,\"452\":1,\"454\":1,\"455\":1,\"480\":1,\"482\":6,\"485\":1,\"495\":1,\"497\":2,\"498\":1,\"499\":3,\"502\":1,\"504\":2,\"505\":2,\"510\":1,\"515\":2,\"520\":1,\"521\":4,\"523\":2,\"526\":4,\"528\":1,\"531\":1,\"532\":3,\"534\":2}}],[\"请加以区分\",{\"1\":{\"494\":1}}],[\"请谅解本文用到的\",{\"1\":{\"493\":1}}],[\"请先给\",{\"1\":{\"445\":1,\"446\":1}}],[\"请先读我\",{\"0\":{\"18\":1,\"232\":1,\"246\":1,\"404\":1,\"409\":1,\"438\":1,\"448\":1,\"452\":1}}],[\"请参考下面链接\",{\"1\":{\"411\":1}}],[\"请提供一个\",{\"1\":{\"374\":1}}],[\"请求头\",{\"1\":{\"472\":1}}],[\"请求上下文\",{\"1\":{\"389\":4}}],[\"请求生命周期监听器\",{\"0\":{\"388\":1}}],[\"请求整体结构已经解析完毕\",{\"1\":{\"379\":1}}],[\"请求要求服务端重传指定的子包\",{\"1\":{\"363\":1}}],[\"请求处理器的处理结果\",{\"1\":{\"389\":2}}],[\"请求处理器方法参数\",{\"1\":{\"327\":1}}],[\"请求处理流程\",{\"0\":{\"343\":1}}],[\"请求没有强制指定固定类型的处理器\",{\"1\":{\"336\":1}}],[\"请求参数解析器\",{\"0\":{\"325\":1}}],[\"请求体尚未解码\",{\"1\":{\"389\":1}}],[\"请求体\",{\"1\":{\"301\":1}}],[\"请求体消息实体类\",{\"1\":{\"201\":1,\"398\":1,\"536\":1,\"551\":1}}],[\"请求报文可以自动映射到使用\",{\"1\":{\"201\":1}}],[\"请求分包消息暂存器相关配置\",{\"1\":{\"184\":1}}],[\"请求消息的业务处理实现方式\",{\"1\":{\"557\":1}}],[\"请求消息的业务处理的实现\",{\"0\":{\"557\":1}}],[\"请求消息实体类中出现的\",{\"1\":{\"424\":1}}],[\"请求消息分包\",{\"0\":{\"344\":1}}],[\"请求消息处理器\",{\"0\":{\"335\":1}}],[\"请求消息映射的实现方式\",{\"1\":{\"556\":1}}],[\"请求消息映射的实现\",{\"0\":{\"556\":1}}],[\"请求消息映射\",{\"0\":{\"296\":1,\"516\":1}}],[\"请求消息体实体类\",{\"1\":{\"201\":1,\"202\":4,\"203\":1,\"517\":2,\"533\":1,\"558\":1}}],[\"请求消息\",{\"1\":{\"133\":1,\"295\":1,\"369\":3,\"370\":1}}],[\"请确保\",{\"1\":{\"149\":1,\"445\":1,\"446\":1}}],[\"请打开\",{\"1\":{\"148\":1}}],[\"请将报文以\",{\"1\":{\"7\":1}}],[\"请作者喝一杯🍺吧\",{\"1\":{\"5\":1}}],[\"请尽可能地描述清楚自己的问题\",{\"1\":{\"4\":1}}],[\"请忽略\",{\"1\":{\"1\":2}}],[\"推荐在\",{\"1\":{\"435\":1,\"436\":1}}],[\"推荐使用\",{\"1\":{\"419\":1,\"423\":1}}],[\"推荐继承默认实现类来自定义组件\",{\"1\":{\"386\":1}}],[\"推荐\",{\"1\":{\"4\":1,\"7\":1}}],[\"提取出来\",{\"1\":{\"497\":1}}],[\"提供并自动注册\",{\"1\":{\"492\":1}}],[\"提供\",{\"1\":{\"448\":1,\"529\":1}}],[\"提供了两个\",{\"1\":{\"448\":1}}],[\"提供了\",{\"1\":{\"389\":1}}],[\"提供了一个\",{\"1\":{\"341\":1}}],[\"提供一个转换器\",{\"0\":{\"236\":1,\"241\":1}}],[\"提供的工厂方法来创建实例\",{\"1\":{\"419\":1}}],[\"提供的别名都在\",{\"1\":{\"243\":1}}],[\"提供的别名\",{\"1\":{\"226\":1,\"227\":1}}],[\"提供的\",{\"1\":{\"115\":4,\"229\":1,\"404\":3,\"438\":1,\"440\":1,\"448\":3,\"452\":2,\"464\":1,\"465\":1,\"485\":1}}],[\"提交\",{\"1\":{\"4\":1}}],[\"提示\",{\"0\":{\"188\":1},\"1\":{\"2\":1,\"7\":1,\"146\":1,\"150\":1,\"158\":1,\"160\":1,\"165\":1,\"171\":1,\"174\":1,\"182\":1,\"213\":1,\"222\":3,\"223\":1,\"224\":1,\"225\":1,\"237\":1,\"242\":1,\"287\":1,\"304\":1,\"305\":1,\"308\":1,\"315\":1,\"322\":1,\"336\":1,\"349\":1,\"351\":2,\"359\":1,\"372\":1,\"376\":1,\"379\":1,\"409\":1,\"412\":1,\"416\":1,\"420\":1,\"424\":1,\"438\":1,\"450\":1,\"453\":1,\"458\":1,\"476\":1,\"492\":2,\"493\":1,\"502\":1,\"505\":1,\"511\":1,\"530\":1,\"531\":2,\"541\":1,\"549\":1,\"554\":1,\"565\":1,\"567\":1}}],[\"gitee\",{\"1\":{\"460\":2}}],[\"github\",{\"1\":{\"4\":1,\"22\":1,\"25\":1,\"26\":4,\"28\":1,\"29\":1,\"31\":1,\"40\":1,\"48\":2,\"55\":1,\"58\":2,\"68\":1,\"73\":1,\"133\":2,\"166\":1,\"169\":1,\"170\":3,\"193\":1,\"237\":1,\"242\":1,\"295\":2,\"318\":1,\"348\":1,\"369\":2,\"370\":3,\"383\":2,\"389\":3,\"392\":1,\"454\":1,\"455\":1,\"460\":2,\"466\":1,\"480\":2,\"485\":2,\"486\":1,\"487\":2,\"531\":2,\"532\":3,\"558\":1}}],[\"g\",{\"1\":{\"348\":1}}],[\"gbk\",{\"1\":{\"318\":1,\"479\":1,\"480\":1}}],[\"gnss\",{\"1\":{\"287\":1}}],[\"generatesession\",{\"1\":{\"393\":1}}],[\"generatesessionid\",{\"1\":{\"393\":1}}],[\"geopoint\",{\"0\":{\"233\":1},\"1\":{\"235\":1,\"237\":3,\"246\":2}}],[\"geo\",{\"1\":{\"107\":1}}],[\"getparentfile\",{\"1\":{\"567\":2}}],[\"getpackageidlist\",{\"1\":{\"366\":1}}],[\"gettemporarypath\",{\"1\":{\"567\":1}}],[\"getterminalid\",{\"1\":{\"508\":5,\"522\":1,\"526\":5,\"529\":1,\"538\":1,\"547\":1}}],[\"getter\",{\"1\":{\"480\":1,\"542\":1}}],[\"gettime\",{\"1\":{\"567\":1}}],[\"getgroup\",{\"1\":{\"567\":1}}],[\"getdata\",{\"1\":{\"567\":1}}],[\"getdatalength\",{\"1\":{\"567\":2}}],[\"getdataoffset\",{\"1\":{\"567\":2}}],[\"getdesc\",{\"1\":{\"458\":2}}],[\"getifpresent\",{\"1\":{\"567\":1}}],[\"getid\",{\"1\":{\"547\":1}}],[\"getinstance\",{\"1\":{\"320\":1,\"393\":2,\"546\":1}}],[\"getchannel\",{\"1\":{\"538\":1}}],[\"getflowid\",{\"1\":{\"508\":1,\"522\":1,\"526\":2,\"538\":1}}],[\"getfiletype\",{\"1\":{\"567\":1}}],[\"getfilenamelength\",{\"1\":{\"567\":1}}],[\"getfilename\",{\"1\":{\"567\":5}}],[\"getfirstsubpackageflowid\",{\"1\":{\"366\":1}}],[\"getfieldtype\",{\"1\":{\"236\":1,\"241\":1}}],[\"getextrainfolength\",{\"1\":{\"504\":1}}],[\"getheader\",{\"1\":{\"495\":1,\"508\":2,\"526\":2,\"538\":1}}],[\"getlength\",{\"1\":{\"504\":1,\"518\":4}}],[\"getlngstartindex\",{\"1\":{\"495\":2}}],[\"getlogger\",{\"1\":{\"386\":1}}],[\"get\",{\"1\":{\"393\":1,\"414\":2,\"415\":1,\"458\":1,\"512\":1,\"542\":1,\"567\":2}}],[\"getname\",{\"1\":{\"386\":1}}],[\"getworkerthreadcount\",{\"1\":{\"386\":2}}],[\"getbodybytes\",{\"1\":{\"534\":1}}],[\"getbossthreadcount\",{\"1\":{\"386\":2}}],[\"getbitat\",{\"1\":{\"497\":2}}],[\"getbitoperator\",{\"1\":{\"414\":1}}],[\"getbytes\",{\"1\":{\"318\":1,\"512\":1,\"532\":4}}],[\"getvalue\",{\"1\":{\"366\":1}}],[\"getsomefield\",{\"1\":{\"392\":1}}],[\"getserver\",{\"1\":{\"386\":1}}],[\"getserverflowid\",{\"1\":{\"320\":1}}],[\"getsecretkey\",{\"1\":{\"383\":3}}],[\"getsubpackagemsg\",{\"1\":{\"364\":1,\"366\":1}}],[\"getsupportedversions\",{\"1\":{\"342\":1,\"357\":1}}],[\"getsupportedmsgtypes\",{\"1\":{\"342\":1,\"357\":1,\"536\":1,\"538\":2}}],[\"getmessagetype\",{\"1\":{\"567\":1}}],[\"getmsgbodylength\",{\"1\":{\"495\":1}}],[\"getmsgcontent\",{\"1\":{\"423\":1}}],[\"getmsghandlerexecutor\",{\"1\":{\"374\":1}}],[\"getmsgid\",{\"1\":{\"329\":1,\"331\":1,\"334\":1,\"458\":2,\"508\":2,\"523\":1,\"526\":3}}],[\"getmapping\",{\"1\":{\"225\":1,\"298\":1,\"422\":1,\"515\":1}}],[\"getorder\",{\"1\":{\"323\":1,\"393\":1,\"559\":3}}],[\"getalarmno\",{\"1\":{\"567\":2}}],[\"getalarmidentifier\",{\"1\":{\"567\":1}}],[\"getalarmflag\",{\"1\":{\"414\":1}}],[\"getattachment\",{\"1\":{\"567\":1}}],[\"getattachmentitemlist\",{\"1\":{\"567\":2}}],[\"getattribute\",{\"1\":{\"54\":1,\"57\":1}}],[\"getauthcode\",{\"1\":{\"522\":1,\"529\":1,\"538\":1}}],[\"getasbytes\",{\"1\":{\"515\":1}}],[\"getannotation\",{\"1\":{\"241\":1}}],[\"getresult\",{\"1\":{\"523\":1}}],[\"getreplymsgid\",{\"1\":{\"523\":1}}],[\"getreplyflowid\",{\"1\":{\"523\":1}}],[\"getrequiredattribute\",{\"1\":{\"54\":1,\"57\":1}}],[\"getruntime\",{\"1\":{\"162\":1,\"214\":1}}],[\"graffle\",{\"1\":{\"561\":1}}],[\"gradlejdk版本\",{\"1\":{\"445\":1}}],[\"gradle>>\",{\"1\":{\"444\":1}}],[\"gradlew\",{\"1\":{\"444\":5,\"446\":1}}],[\"gradle\",{\"1\":{\"1\":1,\"2\":1,\"70\":1,\"85\":1,\"111\":2,\"116\":1,\"441\":1,\"442\":1,\"443\":2,\"444\":6,\"445\":2,\"485\":1}}],[\"gradle用到的构建脚本和checkstyle配置\",{\"1\":{\"1\":1}}],[\"groupid>\",{\"1\":{\"454\":3,\"455\":3,\"485\":1}}],[\"group\",{\"0\":{\"161\":1},\"1\":{\"69\":1,\"109\":1,\"145\":1,\"158\":1,\"159\":1,\"373\":1,\"386\":2,\"485\":1,\"567\":5}}],[\"6<\",{\"1\":{\"454\":1,\"455\":1}}],[\"60\",{\"1\":{\"348\":2}}],[\"60s\",{\"1\":{\"216\":1}}],[\"6808\",{\"1\":{\"175\":1,\"177\":1,\"196\":1,\"468\":1,\"488\":1}}],[\"6809\",{\"1\":{\"145\":1}}],[\"65\",{\"1\":{\"145\":1}}],[\"63\",{\"1\":{\"73\":1}}],[\"64个bit\",{\"1\":{\"415\":1}}],[\"64bit\",{\"1\":{\"107\":1}}],[\"64\",{\"1\":{\"68\":1,\"145\":1,\"243\":1,\"373\":1,\"413\":1,\"415\":1}}],[\"66560\",{\"1\":{\"145\":2}}],[\"66\",{\"1\":{\"55\":2,\"58\":2,\"181\":1,\"419\":1,\"423\":1}}],[\"6\",{\"0\":{\"118\":1},\"1\":{\"2\":1,\"70\":1,\"85\":1,\"115\":4,\"116\":2,\"136\":1,\"225\":4,\"236\":1,\"239\":2,\"240\":1,\"242\":1,\"246\":2,\"293\":7,\"305\":2,\"404\":4,\"429\":1,\"454\":3,\"473\":1,\"482\":1,\"495\":1,\"518\":1,\"534\":1}}],[\"61\",{\"1\":{\"2\":1,\"115\":1,\"404\":1,\"441\":2,\"449\":1}}],[\"0<\",{\"1\":{\"455\":1}}],[\"0替换\",{\"1\":{\"455\":1}}],[\"0b11\",{\"1\":{\"415\":1}}],[\"0b11111111\",{\"1\":{\"415\":1}}],[\"0b000\",{\"1\":{\"532\":2}}],[\"0b00001000\",{\"1\":{\"415\":1}}],[\"0b010\",{\"1\":{\"383\":2}}],[\"0b\",{\"1\":{\"383\":2}}],[\"0000\",{\"1\":{\"502\":1,\"534\":2}}],[\"00000000010000000000000000001010\",{\"1\":{\"415\":1}}],[\"00000000013912344329\",{\"1\":{\"348\":1}}],[\"0000000000000000000000000000000000000000010000000000000000001010\",{\"1\":{\"415\":1}}],[\"000\",{\"1\":{\"236\":2}}],[\"0xe2\",{\"1\":{\"505\":1}}],[\"0xe6\",{\"1\":{\"505\":1}}],[\"0xe5\",{\"1\":{\"505\":1}}],[\"0xe4\",{\"1\":{\"505\":1}}],[\"0xe1\",{\"1\":{\"505\":1}}],[\"0xffff\",{\"1\":{\"395\":1}}],[\"0x8003\",{\"1\":{\"349\":2}}],[\"0x8001\",{\"1\":{\"96\":1,\"311\":1,\"526\":2,\"527\":1}}],[\"0x8100\",{\"1\":{\"316\":1,\"354\":1,\"362\":9}}],[\"0x8103\",{\"1\":{\"311\":1,\"312\":1,\"418\":2,\"421\":1,\"422\":2,\"434\":1,\"435\":1,\"436\":1,\"515\":2}}],[\"0x67\",{\"1\":{\"287\":1}}],[\"0x66\",{\"1\":{\"287\":1}}],[\"0x65\",{\"1\":{\"287\":1}}],[\"0x64\",{\"1\":{\"287\":1}}],[\"0x6364\",{\"1\":{\"145\":1}}],[\"0x32\",{\"1\":{\"419\":1,\"423\":1}}],[\"0x31326364\",{\"1\":{\"567\":1}}],[\"0x31\",{\"1\":{\"287\":1,\"505\":1}}],[\"0x30316364\",{\"1\":{\"567\":3}}],[\"0x30316364附件上传报文的最大长度\",{\"1\":{\"145\":1}}],[\"0x30\",{\"1\":{\"287\":1,\"505\":1}}],[\"0x2b\",{\"1\":{\"287\":1}}],[\"0x2a\",{\"1\":{\"287\":1}}],[\"0x25\",{\"1\":{\"287\":1}}],[\"0x1e\",{\"1\":{\"419\":1,\"423\":1}}],[\"0x16\",{\"1\":{\"419\":1,\"423\":1}}],[\"0x11\",{\"1\":{\"287\":1}}],[\"0x1212\",{\"1\":{\"145\":1,\"567\":3}}],[\"0x1211\",{\"1\":{\"145\":1,\"567\":6}}],[\"0x1210\",{\"1\":{\"145\":1,\"567\":5}}],[\"0x0a\",{\"1\":{\"419\":1,\"423\":1}}],[\"0x00\",{\"1\":{\"567\":2}}],[\"0x0032\",{\"1\":{\"419\":1,\"423\":1}}],[\"0x0030\",{\"1\":{\"320\":1}}],[\"0x0084\",{\"1\":{\"419\":1,\"423\":1}}],[\"0x0081\",{\"1\":{\"419\":1,\"423\":1}}],[\"0x0013\",{\"1\":{\"419\":1,\"423\":1}}],[\"0x0005\",{\"1\":{\"363\":2,\"364\":2,\"366\":1}}],[\"0x0001\",{\"1\":{\"299\":1,\"320\":1,\"328\":1,\"348\":4,\"419\":1,\"423\":1,\"505\":1,\"515\":1}}],[\"0x0029\",{\"1\":{\"320\":1,\"515\":1}}],[\"0x0704\",{\"1\":{\"290\":1,\"334\":1,\"468\":1}}],[\"0x04\",{\"1\":{\"287\":1}}],[\"0x03\",{\"1\":{\"287\":1}}],[\"0x02\",{\"1\":{\"287\":1}}],[\"0x0200\",{\"1\":{\"246\":1,\"293\":1,\"468\":1,\"495\":1,\"499\":1,\"508\":1,\"517\":2,\"526\":1,\"542\":1}}],[\"0x0107\",{\"1\":{\"532\":1}}],[\"0x0100\",{\"1\":{\"300\":1,\"329\":1,\"330\":1,\"331\":1,\"332\":1,\"333\":1,\"339\":2,\"348\":4,\"354\":1,\"458\":1,\"468\":1}}],[\"0x0102\",{\"1\":{\"299\":1,\"458\":1,\"468\":1,\"487\":1,\"522\":1,\"523\":1,\"526\":1,\"542\":1}}],[\"0x01\",{\"1\":{\"287\":1,\"567\":1}}],[\"0x7e\",{\"1\":{\"135\":2,\"139\":2,\"369\":2,\"370\":1,\"481\":2}}],[\"04\",{\"0\":{\"106\":1,\"118\":1,\"120\":1}}],[\"09\",{\"0\":{\"97\":1},\"1\":{\"495\":1}}],[\"05\",{\"0\":{\"95\":1,\"99\":1,\"102\":1,\"104\":1}}],[\"03\",{\"0\":{\"89\":1,\"130\":1}}],[\"02\",{\"0\":{\"87\":1,\"104\":1,\"124\":1}}],[\"08\",{\"0\":{\"83\":1,\"130\":1},\"1\":{\"495\":1}}],[\"06\",{\"0\":{\"83\":1,\"87\":1,\"102\":1}}],[\"07\",{\"0\":{\"79\":1}}],[\"0s\",{\"1\":{\"55\":4,\"58\":4,\"175\":2,\"181\":2}}],[\"010000000000000000001000\",{\"1\":{\"415\":1}}],[\"010000000000000000001010\",{\"1\":{\"415\":1}}],[\"010\",{\"1\":{\"383\":3}}],[\"013912344323\",{\"1\":{\"318\":1,\"320\":1,\"434\":1,\"435\":1,\"436\":1}}],[\"01\",{\"0\":{\"91\":1,\"93\":1,\"97\":1},\"1\":{\"18\":1,\"495\":1}}],[\"0文档的时刻即\",{\"1\":{\"18\":1}}],[\"0\",{\"0\":{\"21\":1,\"24\":1,\"27\":1,\"30\":1,\"34\":1,\"38\":1,\"42\":1,\"46\":1,\"50\":1,\"52\":1,\"53\":1,\"56\":1,\"59\":1,\"63\":1,\"67\":1,\"72\":1,\"74\":2,\"110\":1,\"112\":1,\"114\":1,\"118\":1,\"120\":1,\"124\":1,\"126\":1,\"128\":1,\"130\":1,\"372\":1,\"375\":1,\"385\":1,\"387\":1,\"403\":1,\"408\":1},\"1\":{\"2\":2,\"13\":2,\"14\":2,\"39\":1,\"82\":1,\"85\":5,\"108\":1,\"111\":2,\"115\":6,\"123\":1,\"136\":8,\"140\":8,\"143\":1,\"145\":1,\"160\":1,\"175\":3,\"178\":2,\"179\":2,\"180\":1,\"181\":2,\"197\":2,\"198\":2,\"236\":1,\"286\":4,\"290\":3,\"293\":9,\"300\":1,\"303\":2,\"305\":1,\"307\":1,\"308\":3,\"311\":1,\"314\":2,\"316\":4,\"329\":1,\"331\":1,\"333\":2,\"349\":2,\"354\":5,\"357\":3,\"376\":1,\"382\":6,\"383\":2,\"395\":2,\"404\":6,\"406\":1,\"407\":1,\"415\":6,\"423\":1,\"428\":1,\"429\":1,\"431\":1,\"432\":3,\"434\":8,\"435\":8,\"436\":7,\"441\":1,\"442\":3,\"448\":1,\"449\":1,\"453\":1,\"454\":1,\"455\":8,\"473\":1,\"480\":4,\"482\":8,\"485\":2,\"495\":4,\"497\":3,\"498\":3,\"499\":3,\"502\":2,\"504\":1,\"510\":1,\"518\":1,\"520\":1,\"523\":1,\"526\":4,\"528\":1,\"531\":1,\"532\":3,\"534\":3,\"538\":2,\"559\":1,\"567\":2}}],[\"71\",{\"1\":{\"444\":1}}],[\"73\",{\"1\":{\"444\":1}}],[\"7s\",{\"1\":{\"444\":1}}],[\"7e8103003801391234432300000500000001040000004200000013137777772e7878782e6666662e7a7a7a2\",{\"1\":{\"419\":1,\"423\":1}}],[\"7e8100600101000000000139123443290002000300032dba7e\",{\"1\":{\"362\":2}}],[\"7e8100600901000000000139123443290001000300026465323031392d2d2dbb7e\",{\"1\":{\"362\":2}}],[\"7e810060090100000000013912344329000000030001007b0041757468436fe07e\",{\"1\":{\"362\":2}}],[\"7e0200004a76890100562600ad000000000000000201dcf7f6074054c1000000000000200128080934300164310100e10400000030e2020000e306005e019a019ae40b01cc000018a20000480264e5045e04019ae601a2637e\",{\"1\":{\"494\":1}}],[\"7e0200402d01000000000139123443210000003000000040000101cd41c2072901b00929029a005a23042821314101040000029b0202004303020309300163897e\",{\"1\":{\"414\":1}}],[\"7e02004086010000000001893094655200e4000000000000000101d907f2073d336c000000000000211124114808010400000026030200003001153101002504000000001404000000011504000000fa160400000000170200001803000000ea10ffffffffffffffffffffffffffffffff02020000ef0400000000f31b017118000000000000000000000000000000000000000000000000567e\",{\"1\":{\"294\":1}}],[\"7e0102000676890100562606e144454a544e506d7e\",{\"1\":{\"488\":1}}],[\"7e010040560100000000013912344321007b000b0000313233353931323335393131323334353637383930313233343536373839303132333435363738393069643132333435363738393031323334353637383930313233343536373801b8ca4a2d3635343332313c7e\",{\"1\":{\"469\":1}}],[\"7e010040560100000000013912344329007b000b0002696439383736353433323174797065303031323334353637383132333435363738383736353433323149443030303031323334353637383132333435363738383736353433323101b8ca4a2d313233343539257e\",{\"1\":{\"362\":1}}],[\"7e0100002f013912344323007b000b0002696431323374797065313233343536373838373635343332314944313233343501b8ca4a2d3132333435332d7e\",{\"1\":{\"357\":1}}],[\"7e01000023013912344321007b000b0002696431323361626364656667684944313233343501b8ca4a2d313233343531317e\",{\"1\":{\"342\":1}}],[\"7e0100600e010000000001391234432900020003000333323101b8ca4a2d313233343539347e\",{\"1\":{\"348\":4}}],[\"7e010060240100000000013912344329000100030002383837363534333231494430303030313233343536373831323334353637383837363534357e\",{\"1\":{\"348\":4}}],[\"7e010060240100000000013912344329000000030001000b00026964393837363534333231747970653030313233343536373831323334353637277e\",{\"1\":{\"348\":4}}],[\"7e0001000501391234432300000000810300f87e\",{\"1\":{\"434\":2,\"435\":1,\"436\":1}}],[\"7e00010005013912344323007b0001810300827e\",{\"1\":{\"320\":1}}],[\"7e000540080100000000013912344329000100030002000100023b7e\",{\"1\":{\"366\":1}}],[\"7e00054008010000000001391234432900010000000200010002387e\",{\"1\":{\"366\":1}}],[\"7e070400e401583860765500040003010049000000000004000301d9f190073ca3c1000c00000000211204082941010400d728ad3001003101092504000000001404000000041504000000001604000000001702000118030000000049000000000004000301d9f190073ca3c1000c00000000211130171352010400d728ad3001003101092504000000001404000000041504000000001604000000001702000118030000000049000000000004000301d9f190073ca3c1000c00000000211130171357010400d728ad300115310109250400000000140400000004150400000000160400000000170200011803000000407e\",{\"1\":{\"291\":1}}],[\"76\",{\"1\":{\"305\":2}}],[\"78\",{\"1\":{\"98\":1}}],[\"75\",{\"1\":{\"70\":1,\"305\":2}}],[\"7\",{\"0\":{\"38\":1},\"1\":{\"2\":2,\"39\":1,\"70\":1,\"82\":1,\"85\":2,\"116\":1,\"242\":1,\"246\":3,\"293\":2,\"305\":2,\"429\":3,\"442\":2,\"449\":2,\"453\":1,\"454\":2,\"531\":1,\"532\":1}}],[\"404\",{\"1\":{\"568\":1}}],[\"4个字节\",{\"1\":{\"501\":1}}],[\"4之前\",{\"0\":{\"286\":1},\"1\":{\"286\":1}}],[\"44\",{\"1\":{\"22\":1}}],[\"45s\",{\"1\":{\"184\":1,\"185\":1}}],[\"45\",{\"1\":{\"18\":1,\"305\":2}}],[\"4\",{\"0\":{\"46\":1,\"83\":1,\"87\":2,\"89\":1,\"91\":1,\"93\":1,\"124\":1,\"145\":1,\"285\":1,\"287\":1,\"380\":1,\"565\":1},\"1\":{\"2\":1,\"15\":1,\"70\":1,\"85\":1,\"136\":5,\"140\":5,\"145\":1,\"225\":5,\"234\":3,\"237\":2,\"246\":1,\"287\":5,\"293\":5,\"303\":2,\"305\":4,\"308\":1,\"316\":1,\"354\":1,\"357\":1,\"428\":1,\"429\":3,\"432\":1,\"473\":1,\"480\":1,\"482\":2,\"495\":1,\"497\":2,\"498\":1,\"499\":1,\"510\":1,\"518\":6,\"526\":1,\"534\":5}}],[\"软件版本\",{\"0\":{\"2\":1}}],[\"direction\",{\"1\":{\"293\":1,\"495\":1}}],[\"divide\",{\"1\":{\"236\":1}}],[\"dispatch2\",{\"1\":{\"389\":1}}],[\"dispatch\",{\"1\":{\"389\":1}}],[\"dispatch1\",{\"1\":{\"389\":1}}],[\"dispatcher\",{\"1\":{\"169\":1,\"389\":1,\"396\":2}}],[\"dispatcherhandler\",{\"1\":{\"125\":1}}],[\"disabled\",{\"1\":{\"55\":2,\"58\":2,\"175\":2,\"181\":2}}],[\"dwod\",{\"1\":{\"225\":1}}],[\"dwordbytesvaluewrapper\",{\"1\":{\"515\":1}}],[\"dword\",{\"0\":{\"256\":1,\"275\":1},\"1\":{\"107\":1,\"133\":1,\"225\":8,\"226\":2,\"227\":2,\"234\":6,\"235\":1,\"236\":4,\"237\":2,\"246\":2,\"257\":5,\"258\":5,\"276\":5,\"277\":5,\"287\":4,\"293\":13,\"303\":1,\"308\":2,\"418\":1,\"419\":1,\"422\":2,\"423\":1,\"428\":2,\"479\":1,\"480\":1,\"495\":7,\"496\":1,\"498\":1,\"499\":1,\"500\":1,\"501\":1,\"502\":1,\"505\":3,\"515\":1,\"518\":1,\"528\":1}}],[\"d\",{\"1\":{\"218\":1}}],[\"daemon\",{\"0\":{\"156\":1},\"1\":{\"151\":1,\"373\":1}}],[\"data\",{\"1\":{\"234\":1,\"237\":1,\"239\":1,\"242\":1,\"246\":1,\"286\":2,\"287\":1,\"290\":2,\"293\":2,\"316\":1,\"318\":1,\"333\":1,\"354\":1,\"418\":2,\"422\":2,\"434\":1,\"480\":1,\"495\":1,\"499\":1,\"504\":1,\"505\":1,\"512\":1,\"515\":2,\"517\":1,\"523\":1,\"524\":1,\"532\":1,\"538\":1}}],[\"datatype=\",{\"1\":{\"225\":1}}],[\"datatype\",{\"1\":{\"149\":2,\"225\":7,\"226\":3,\"227\":2,\"235\":1,\"236\":1,\"240\":1,\"241\":1,\"246\":2,\"267\":7,\"268\":7,\"270\":5,\"271\":5,\"273\":6,\"274\":6,\"276\":5,\"277\":5,\"279\":3,\"280\":3,\"282\":3,\"283\":3,\"286\":5,\"287\":1,\"290\":6,\"293\":14,\"303\":1,\"305\":7,\"308\":1,\"312\":1,\"314\":1,\"316\":3,\"333\":1,\"354\":3,\"418\":5,\"434\":3,\"495\":11,\"497\":1,\"498\":1,\"499\":1,\"501\":1,\"502\":1,\"504\":4,\"505\":7,\"518\":3}}],[\"databind\",{\"1\":{\"149\":1}}],[\"datetimeformatter\",{\"1\":{\"241\":1,\"567\":2}}],[\"date\",{\"1\":{\"107\":2,\"239\":1,\"241\":1,\"242\":2,\"444\":1}}],[\"duration\",{\"1\":{\"122\":1,\"154\":1,\"216\":1,\"567\":1}}],[\"dynamicfieldbasedjt808msgencoder\",{\"1\":{\"122\":1}}],[\"doprocess\",{\"1\":{\"538\":2}}],[\"dosomeprocess\",{\"1\":{\"436\":2}}],[\"doescapeforsend\",{\"1\":{\"369\":1,\"371\":1,\"530\":1}}],[\"doescapeforreceive\",{\"1\":{\"369\":1,\"370\":1,\"530\":1}}],[\"dodispatch\",{\"1\":{\"346\":2,\"389\":1}}],[\"double\",{\"1\":{\"107\":2,\"234\":1,\"236\":2,\"237\":3,\"246\":3,\"495\":3,\"501\":1,\"502\":3}}],[\"documented\",{\"1\":{\"226\":3,\"227\":2,\"235\":1,\"240\":1}}],[\"documentation\",{\"0\":{\"61\":1,\"76\":1,\"86\":1}}],[\"docs\",{\"1\":{\"1\":1,\"111\":1,\"444\":1}}],[\"dferic\",{\"1\":{\"77\":1}}],[\"dev\",{\"1\":{\"559\":1}}],[\"decryptrequestbody\",{\"1\":{\"383\":1}}],[\"decode\",{\"1\":{\"370\":1,\"389\":1,\"414\":1}}],[\"decoder\",{\"1\":{\"51\":1,\"166\":1,\"170\":1,\"348\":1,\"466\":1}}],[\"demojt808servernettyconfigure\",{\"1\":{\"544\":1}}],[\"demo\",{\"1\":{\"515\":1}}],[\"democontroller\",{\"1\":{\"318\":2,\"320\":2}}],[\"demo01\",{\"1\":{\"318\":1,\"320\":1}}],[\"deserialize\",{\"1\":{\"236\":2,\"241\":2}}],[\"desc=\",{\"1\":{\"348\":1}}],[\"description\",{\"1\":{\"299\":1,\"311\":1,\"390\":1}}],[\"desc\",{\"1\":{\"115\":1,\"226\":6,\"227\":4,\"235\":2,\"240\":2,\"287\":14,\"299\":1,\"300\":1,\"311\":1,\"312\":1,\"366\":1,\"404\":1,\"458\":5,\"480\":4,\"515\":1,\"527\":1,\"542\":4}}],[\"delimiter\",{\"1\":{\"369\":2,\"370\":1}}],[\"delimiterbasedframedecoder\",{\"1\":{\"23\":1,\"173\":1,\"194\":1}}],[\"delegatehandlermethodargumentresolvers\",{\"1\":{\"509\":4}}],[\"delegate\",{\"1\":{\"236\":2,\"241\":2}}],[\"detection\",{\"1\":{\"193\":1,\"299\":1,\"320\":1,\"328\":1,\"567\":3}}],[\"defaultspringbootbomversion=2\",{\"1\":{\"442\":1}}],[\"defaultspringbootbomversion\",{\"1\":{\"442\":2}}],[\"defaultjavaversion=8\",{\"1\":{\"441\":1}}],[\"defaultjavaversion\",{\"1\":{\"441\":3}}],[\"defaultjt808flowidgeneratorfactory\",{\"1\":{\"395\":1}}],[\"defaultjt808session\",{\"1\":{\"392\":2}}],[\"defaultjt808servernettyconfigure\",{\"1\":{\"121\":1,\"409\":1}}],[\"defaultjt808request\",{\"1\":{\"348\":1,\"370\":2}}],[\"defaultjt808msgbytesprocessor\",{\"1\":{\"369\":1}}],[\"defaultjt808msgencoder\",{\"1\":{\"170\":1,\"359\":2,\"371\":1}}],[\"defaultjt808msgdecoder\",{\"1\":{\"170\":1,\"370\":3}}],[\"defaultjt808attachmentservernettyconfigure\",{\"1\":{\"121\":1,\"409\":1}}],[\"defaultvalue\",{\"1\":{\"318\":1,\"320\":1,\"515\":2}}],[\"defaultkeyvaluemapping\",{\"1\":{\"287\":1}}],[\"defaulteventexecutorgroup\",{\"1\":{\"158\":1}}],[\"default\",{\"1\":{\"144\":1,\"190\":1,\"226\":6,\"227\":6,\"235\":1,\"240\":2,\"318\":1,\"320\":2,\"322\":3,\"360\":4,\"361\":3,\"369\":1,\"371\":1,\"389\":6,\"394\":3,\"395\":3,\"396\":1,\"428\":1,\"431\":1,\"434\":1,\"435\":2,\"436\":1,\"473\":1,\"474\":1,\"536\":1,\"559\":4}}],[\"dependencies>\",{\"1\":{\"454\":1,\"455\":1}}],[\"dependencies\",{\"1\":{\"85\":2,\"453\":1,\"485\":1}}],[\"dependency>\",{\"1\":{\"454\":2,\"455\":2,\"485\":1}}],[\"dependency\",{\"0\":{\"65\":1,\"70\":1,\"82\":1,\"85\":1,\"116\":1}}],[\"debugterminalregistermsgv2013\",{\"1\":{\"333\":3}}],[\"debug\",{\"1\":{\"1\":2,\"348\":3,\"359\":2,\"362\":1,\"466\":2,\"486\":1,\"538\":1}}],[\"credentials\",{\"1\":{\"444\":3}}],[\"childoption\",{\"1\":{\"386\":1}}],[\"ch\",{\"1\":{\"385\":1,\"386\":4,\"387\":1,\"410\":2}}],[\"checksum=0\",{\"1\":{\"348\":1}}],[\"changelog\",{\"1\":{\"444\":1}}],[\"channelfuture\",{\"1\":{\"538\":1}}],[\"channelhandlercontext\",{\"1\":{\"389\":1}}],[\"channelread\",{\"1\":{\"389\":1}}],[\"channeloption\",{\"1\":{\"386\":3}}],[\"channel\",{\"1\":{\"386\":2,\"389\":4,\"393\":9,\"474\":5,\"536\":2,\"538\":3}}],[\"channelclass\",{\"1\":{\"386\":7}}],[\"charset\",{\"1\":{\"318\":1,\"532\":8}}],[\"chain\",{\"1\":{\"239\":1,\"242\":1,\"246\":1,\"286\":1,\"287\":1,\"290\":2,\"293\":1,\"316\":1,\"354\":1,\"379\":2,\"418\":2,\"422\":2,\"434\":1,\"495\":1,\"515\":2,\"517\":1,\"523\":1}}],[\"c\",{\"1\":{\"348\":1}}],[\"cityid\",{\"1\":{\"305\":1,\"429\":2}}],[\"ctx\",{\"1\":{\"286\":2,\"287\":2,\"290\":2,\"293\":2,\"303\":1,\"304\":2,\"305\":1}}],[\"cache<string\",{\"1\":{\"567\":1}}],[\"cause\",{\"1\":{\"538\":1}}],[\"calculatechecksum\",{\"1\":{\"369\":1,\"370\":1,\"371\":1,\"472\":1}}],[\"calculatedchecksum\",{\"1\":{\"334\":1,\"472\":1}}],[\"caridentifier\",{\"1\":{\"305\":1,\"429\":2}}],[\"catch\",{\"1\":{\"241\":1,\"512\":1,\"567\":1}}],[\"cannot\",{\"1\":{\"236\":1,\"241\":1}}],[\"caffeinejt808responsesubpackagestorage\",{\"1\":{\"365\":1,\"396\":1}}],[\"caffeinejt808requestsubpackagestorage\",{\"1\":{\"347\":1,\"348\":2,\"349\":1,\"396\":1}}],[\"caffeine\",{\"1\":{\"184\":4,\"185\":4,\"347\":2,\"349\":1,\"365\":1,\"567\":1}}],[\"clean\",{\"1\":{\"444\":2}}],[\"class<\",{\"1\":{\"227\":2,\"236\":1,\"241\":1,\"386\":1}}],[\"class\",{\"1\":{\"115\":2,\"225\":2,\"226\":9,\"227\":10,\"234\":1,\"235\":3,\"236\":6,\"237\":1,\"239\":1,\"240\":3,\"241\":5,\"242\":1,\"246\":1,\"286\":2,\"287\":16,\"290\":3,\"293\":3,\"300\":1,\"303\":1,\"305\":1,\"308\":1,\"312\":1,\"314\":1,\"316\":1,\"318\":1,\"320\":2,\"328\":1,\"329\":1,\"330\":1,\"331\":1,\"332\":1,\"333\":2,\"334\":2,\"339\":1,\"342\":1,\"354\":2,\"357\":1,\"366\":1,\"369\":1,\"370\":1,\"371\":1,\"374\":1,\"383\":1,\"386\":4,\"390\":1,\"392\":1,\"393\":2,\"394\":1,\"395\":1,\"396\":1,\"404\":2,\"414\":2,\"415\":1,\"418\":2,\"419\":1,\"422\":2,\"423\":1,\"428\":1,\"429\":1,\"431\":1,\"432\":1,\"434\":2,\"435\":1,\"436\":1,\"441\":4,\"449\":1,\"450\":1,\"459\":1,\"480\":18,\"486\":2,\"490\":1,\"491\":2,\"495\":4,\"499\":2,\"502\":2,\"504\":1,\"505\":1,\"507\":1,\"508\":1,\"509\":1,\"512\":1,\"515\":3,\"517\":1,\"522\":1,\"523\":1,\"526\":2,\"529\":1,\"530\":1,\"531\":1,\"532\":1,\"534\":2,\"538\":3,\"539\":1,\"543\":1,\"544\":1,\"546\":2,\"547\":2,\"548\":1,\"567\":2}}],[\"classpath\",{\"1\":{\"101\":1}}],[\"closereason\",{\"1\":{\"394\":2}}],[\"closes\",{\"1\":{\"51\":1}}],[\"cloud\",{\"1\":{\"85\":1}}],[\"clientservice\",{\"1\":{\"529\":1}}],[\"clientregisterv2019\",{\"1\":{\"300\":1}}],[\"client\",{\"1\":{\"1\":1,\"300\":1,\"318\":1,\"320\":2,\"342\":1,\"357\":2,\"366\":1,\"432\":1,\"434\":1,\"435\":1,\"436\":1,\"458\":2,\"459\":2,\"508\":2,\"512\":1,\"515\":2,\"522\":1,\"524\":1,\"526\":3,\"532\":1,\"534\":1,\"538\":6,\"539\":1,\"542\":2,\"543\":2}}],[\"currenttimemillis\",{\"1\":{\"393\":1}}],[\"current\",{\"1\":{\"390\":1}}],[\"currentflowid\",{\"1\":{\"49\":1,\"395\":1,\"474\":2}}],[\"customerdatatypeconverterclass\",{\"1\":{\"495\":3,\"502\":2,\"518\":1,\"528\":1}}],[\"customerfielddeserializerclass\",{\"1\":{\"235\":1,\"240\":1,\"303\":1}}],[\"customerfieldserializerclass\",{\"1\":{\"227\":4,\"314\":1}}],[\"customizeddemojt808config\",{\"1\":{\"546\":1,\"547\":1}}],[\"customized\",{\"1\":{\"1\":1,\"529\":1,\"530\":1,\"535\":1,\"540\":1,\"543\":1,\"544\":2,\"545\":1,\"547\":1}}],[\"copiedbuffer\",{\"1\":{\"512\":1,\"538\":1}}],[\"code\",{\"1\":{\"371\":1,\"379\":3,\"385\":1,\"395\":1,\"410\":1,\"538\":3}}],[\"codec\",{\"1\":{\"23\":1,\"170\":2,\"173\":1,\"194\":1,\"348\":1,\"370\":1}}],[\"column\",{\"1\":{\"518\":1}}],[\"collections\",{\"1\":{\"538\":1,\"567\":1}}],[\"collection<integer>\",{\"1\":{\"364\":1}}],[\"collection<bytebuf>\",{\"1\":{\"364\":1,\"366\":1}}],[\"collectors\",{\"1\":{\"366\":1}}],[\"collect\",{\"1\":{\"366\":1}}],[\"color=\",{\"1\":{\"379\":1}}],[\"color\",{\"1\":{\"305\":1,\"429\":2}}],[\"counter\",{\"1\":{\"390\":2}}],[\"count\",{\"0\":{\"162\":1,\"178\":1,\"179\":1,\"197\":1,\"198\":1},\"1\":{\"109\":1,\"145\":3,\"159\":1,\"175\":2,\"290\":1,\"373\":1,\"390\":1,\"395\":5}}],[\"concatall\",{\"1\":{\"523\":1}}],[\"concurrent\",{\"1\":{\"150\":1,\"152\":1,\"153\":1,\"154\":1,\"155\":1,\"158\":1,\"214\":1,\"215\":1,\"216\":1,\"217\":1}}],[\"consumer<jt808bytewriter>\",{\"1\":{\"430\":2}}],[\"convert2entity\",{\"1\":{\"534\":1}}],[\"convert\",{\"1\":{\"236\":1,\"241\":1,\"502\":1}}],[\"converters\",{\"0\":{\"204\":1}}],[\"configuremsghandlermapping\",{\"1\":{\"539\":2}}],[\"configuremsgconvertermapping\",{\"1\":{\"534\":2}}],[\"configure\",{\"1\":{\"444\":1}}],[\"configuresocketchannel\",{\"1\":{\"385\":1,\"386\":1,\"387\":1,\"410\":5}}],[\"configureserverbootstrap\",{\"1\":{\"385\":1,\"386\":1,\"387\":1,\"410\":4}}],[\"configurationprovider\",{\"1\":{\"385\":2,\"386\":2,\"410\":2}}],[\"configuration\",{\"1\":{\"369\":1,\"370\":1,\"371\":1,\"374\":1,\"393\":1,\"394\":1,\"395\":1,\"396\":1,\"459\":1,\"529\":1,\"530\":1,\"531\":1,\"534\":1,\"543\":1,\"544\":1,\"546\":1,\"547\":1,\"548\":1}}],[\"configprovider\",{\"1\":{\"385\":3,\"386\":2,\"410\":3}}],[\"config\",{\"1\":{\"144\":2,\"190\":2,\"193\":1,\"531\":1,\"532\":1}}],[\"controlleradvice\",{\"1\":{\"490\":1}}],[\"controller\",{\"1\":{\"297\":1,\"338\":1,\"507\":1}}],[\"contributors\",{\"0\":{\"62\":1,\"66\":1,\"71\":1,\"77\":1,\"132\":1}}],[\"contentlength\",{\"1\":{\"286\":3,\"293\":3}}],[\"content\",{\"1\":{\"286\":4,\"293\":3,\"503\":1}}],[\"context\",{\"1\":{\"107\":2,\"236\":3,\"241\":4,\"304\":1,\"326\":1}}],[\"conditionalon\",{\"1\":{\"92\":1,\"227\":4,\"314\":1,\"316\":1,\"354\":1}}],[\"comparing\",{\"1\":{\"393\":1}}],[\"comparator\",{\"1\":{\"393\":1}}],[\"component\",{\"0\":{\"168\":1,\"220\":1},\"1\":{\"166\":1,\"168\":1,\"191\":1,\"220\":1,\"290\":1,\"293\":1,\"297\":1,\"300\":1,\"320\":1,\"328\":1,\"329\":1,\"330\":1,\"331\":1,\"332\":1,\"333\":1,\"334\":1,\"339\":1,\"342\":1,\"354\":1,\"357\":1,\"366\":1,\"383\":1,\"386\":1,\"466\":1,\"468\":1,\"486\":1,\"487\":1,\"510\":1,\"512\":1,\"559\":2,\"567\":1}}],[\"components\",{\"0\":{\"167\":1},\"1\":{\"143\":1,\"166\":1,\"168\":1,\"169\":1,\"466\":1}}],[\"compilelevel\",{\"1\":{\"441\":1,\"449\":1}}],[\"compile\",{\"1\":{\"39\":1}}],[\"commandfield\",{\"0\":{\"528\":1},\"1\":{\"515\":5,\"526\":3,\"528\":1}}],[\"commandmsg\",{\"1\":{\"515\":4}}],[\"commandkey\",{\"1\":{\"320\":4}}],[\"commandwaitingpool\",{\"1\":{\"319\":2,\"320\":2}}],[\"commandsender\",{\"0\":{\"319\":1},\"1\":{\"45\":1,\"318\":4,\"320\":5,\"515\":3}}],[\"commonsuccessreply\",{\"1\":{\"538\":2}}],[\"commonreplymsgbody\",{\"1\":{\"508\":1,\"522\":1,\"523\":6,\"526\":1,\"538\":1}}],[\"commonhandler\",{\"1\":{\"300\":1,\"320\":1,\"354\":1,\"507\":1,\"508\":1,\"522\":1,\"526\":1}}],[\"common\",{\"1\":{\"1\":1,\"82\":1,\"320\":2,\"329\":1,\"331\":1,\"434\":1,\"435\":1,\"436\":1,\"515\":2,\"523\":1}}],[\"com\",{\"1\":{\"22\":1,\"26\":4,\"28\":1,\"29\":1,\"31\":1,\"40\":1,\"48\":2,\"55\":1,\"58\":2,\"68\":1,\"73\":1,\"149\":2,\"383\":2,\"419\":1,\"423\":1,\"460\":2,\"480\":1}}],[\"corepoolsize\",{\"1\":{\"152\":1,\"214\":1,\"215\":1}}],[\"core\",{\"0\":{\"152\":1,\"214\":1},\"1\":{\"1\":1,\"131\":1,\"149\":1,\"151\":1,\"373\":1,\"379\":4,\"441\":1,\"444\":2,\"449\":1}}],[\"36\",{\"1\":{\"429\":2}}],[\"38\",{\"1\":{\"348\":1}}],[\"30\",{\"1\":{\"305\":4}}],[\"300\",{\"1\":{\"290\":2,\"418\":1,\"422\":1}}],[\"31258614\",{\"1\":{\"501\":1}}],[\"31\",{\"1\":{\"81\":1,\"287\":2}}],[\"37\",{\"1\":{\"26\":1,\"429\":2}}],[\"34\",{\"1\":{\"26\":1,\"480\":1,\"495\":1}}],[\"33\",{\"1\":{\"26\":1,\"354\":1,\"362\":4}}],[\"32\",{\"1\":{\"26\":1,\"287\":1,\"415\":1,\"479\":1,\"480\":1}}],[\"3\",{\"0\":{\"50\":1,\"53\":1,\"56\":1,\"89\":1,\"95\":1,\"117\":1,\"118\":1,\"120\":1,\"124\":1,\"126\":2,\"128\":1,\"130\":1,\"372\":1,\"375\":1,\"385\":1,\"387\":1,\"407\":1,\"408\":1,\"455\":1,\"465\":1,\"499\":1},\"1\":{\"1\":1,\"85\":3,\"113\":1,\"115\":8,\"123\":1,\"143\":1,\"145\":1,\"175\":1,\"180\":1,\"181\":2,\"225\":4,\"234\":2,\"237\":2,\"246\":2,\"286\":2,\"290\":2,\"293\":5,\"303\":1,\"305\":2,\"316\":5,\"348\":4,\"354\":5,\"357\":4,\"362\":8,\"376\":1,\"383\":2,\"404\":8,\"407\":1,\"415\":9,\"429\":1,\"432\":4,\"434\":2,\"435\":2,\"436\":2,\"438\":1,\"440\":2,\"441\":3,\"442\":3,\"448\":5,\"449\":2,\"450\":1,\"452\":1,\"453\":2,\"454\":4,\"455\":9,\"465\":1,\"482\":3,\"497\":1,\"499\":1,\"515\":1,\"523\":2,\"526\":3}}],[\"xx\",{\"1\":{\"505\":1}}],[\"xxxserializer\",{\"1\":{\"314\":1}}],[\"xxxdeserializer\",{\"1\":{\"303\":1}}],[\"xxx\",{\"1\":{\"69\":2,\"146\":1,\"149\":1,\"150\":1,\"158\":1,\"160\":1,\"171\":1,\"174\":1,\"251\":5,\"260\":3,\"263\":3,\"270\":5,\"279\":3,\"282\":3,\"300\":1,\"419\":1,\"423\":1,\"444\":2}}],[\"xxxaware\",{\"1\":{\"16\":1}}],[\"x项目的区别\",{\"1\":{\"454\":3,\"455\":3}}],[\"x升级到2\",{\"0\":{\"403\":1}}],[\"x\",{\"0\":{\"16\":2,\"20\":1,\"52\":1,\"78\":1,\"117\":1,\"403\":1,\"406\":1,\"407\":1,\"454\":1,\"455\":1,\"464\":1,\"465\":1},\"1\":{\"1\":4,\"2\":1,\"16\":3,\"76\":1,\"113\":2,\"115\":15,\"188\":3,\"222\":6,\"225\":5,\"297\":1,\"316\":1,\"354\":1,\"357\":1,\"404\":15,\"406\":4,\"407\":4,\"415\":4,\"432\":1,\"438\":2,\"440\":2,\"441\":4,\"442\":3,\"448\":10,\"450\":2,\"452\":3,\"454\":7,\"455\":4,\"464\":1,\"465\":1,\"471\":1}}],[\"x不再依赖\",{\"1\":{\"1\":1}}],[\"└──\",{\"1\":{\"1\":2}}],[\"27\",{\"1\":{\"303\":1}}],[\"22\",{\"1\":{\"225\":3,\"239\":1,\"242\":1,\"246\":2,\"293\":2,\"415\":2,\"495\":1,\"534\":1}}],[\"211\",{\"1\":{\"320\":1}}],[\"21\",{\"1\":{\"140\":2,\"414\":2}}],[\"21字节\",{\"1\":{\"140\":1}}],[\"29\",{\"0\":{\"106\":1,\"128\":1},\"1\":{\"429\":2}}],[\"24\",{\"0\":{\"89\":1,\"124\":1},\"1\":{\"115\":1,\"404\":1,\"415\":2}}],[\"256\",{\"1\":{\"151\":2,\"153\":1,\"155\":1,\"373\":1}}],[\"25\",{\"1\":{\"31\":1,\"362\":2}}],[\"26\",{\"1\":{\"29\":1}}],[\"28\",{\"0\":{\"91\":1},\"1\":{\"28\":1,\"225\":2,\"239\":1,\"242\":1,\"286\":4,\"287\":7,\"293\":5,\"495\":1,\"504\":1,\"521\":1}}],[\"20l\",{\"1\":{\"320\":1}}],[\"2048\",{\"1\":{\"311\":1,\"386\":1}}],[\"200128080934\",{\"1\":{\"495\":1}}],[\"200\",{\"1\":{\"290\":4,\"418\":2,\"422\":2,\"559\":1}}],[\"20\",{\"0\":{\"79\":1,\"118\":1},\"1\":{\"217\":1,\"287\":1,\"293\":2,\"414\":2,\"429\":2,\"495\":1,\"521\":1,\"532\":1,\"534\":1}}],[\"2020\",{\"1\":{\"495\":1}}],[\"2025\",{\"0\":{\"118\":1,\"120\":1,\"124\":1}}],[\"2023\",{\"0\":{\"95\":1,\"97\":1,\"99\":1,\"102\":1,\"104\":1,\"106\":1},\"1\":{\"85\":1}}],[\"2022\",{\"1\":{\"85\":1}}],[\"2024\",{\"0\":{\"79\":1,\"83\":1,\"87\":1,\"89\":1,\"91\":1,\"93\":1,\"126\":1,\"128\":1,\"130\":1}}],[\"2021\",{\"1\":{\"18\":1,\"85\":2}}],[\"20m内没有发送数据的客户端将被断开\",{\"1\":{\"181\":1}}],[\"20m\",{\"1\":{\"23\":1,\"55\":2,\"58\":2,\"175\":1,\"181\":2,\"199\":1}}],[\"2019\",{\"1\":{\"16\":1,\"18\":2,\"246\":1,\"289\":1,\"292\":1,\"293\":1,\"299\":1,\"300\":1,\"339\":1,\"348\":1,\"354\":1,\"414\":1,\"468\":1,\"473\":4}}],[\"2013\",{\"1\":{\"16\":1,\"18\":2,\"299\":2,\"329\":1,\"330\":1,\"331\":1,\"332\":1,\"333\":1,\"339\":1,\"419\":1,\"423\":1,\"434\":1,\"435\":1,\"436\":1}}],[\"2011\",{\"1\":{\"16\":1,\"18\":2,\"473\":4}}],[\"2\",{\"0\":{\"16\":1,\"52\":1,\"53\":1,\"56\":1,\"59\":2,\"63\":2,\"67\":2,\"72\":1,\"74\":1,\"78\":1,\"79\":1,\"83\":1,\"87\":1,\"89\":1,\"91\":2,\"93\":1,\"95\":1,\"97\":2,\"99\":1,\"102\":1,\"104\":1,\"106\":1,\"110\":1,\"112\":1,\"114\":1,\"117\":1,\"118\":1,\"120\":1,\"124\":1,\"126\":1,\"128\":2,\"130\":1,\"286\":1,\"287\":1,\"372\":1,\"385\":1,\"387\":1,\"403\":1,\"406\":1,\"454\":1,\"464\":1,\"498\":1,\"502\":1,\"513\":1},\"1\":{\"1\":4,\"2\":1,\"13\":1,\"14\":1,\"15\":1,\"16\":1,\"18\":1,\"51\":1,\"65\":1,\"70\":1,\"76\":1,\"85\":4,\"100\":3,\"105\":1,\"111\":2,\"113\":1,\"115\":18,\"116\":1,\"136\":6,\"140\":6,\"143\":1,\"145\":1,\"160\":2,\"162\":3,\"164\":2,\"181\":2,\"188\":2,\"215\":1,\"222\":3,\"225\":3,\"236\":1,\"237\":1,\"239\":1,\"242\":1,\"246\":2,\"248\":3,\"249\":3,\"251\":2,\"252\":2,\"254\":3,\"255\":3,\"257\":3,\"258\":3,\"260\":2,\"261\":2,\"263\":2,\"264\":2,\"267\":3,\"268\":3,\"270\":2,\"271\":2,\"273\":3,\"274\":3,\"276\":3,\"277\":3,\"279\":2,\"280\":2,\"282\":2,\"283\":2,\"286\":4,\"287\":1,\"290\":7,\"293\":10,\"297\":1,\"303\":7,\"305\":5,\"306\":1,\"307\":1,\"308\":4,\"312\":1,\"314\":1,\"316\":4,\"320\":1,\"333\":1,\"348\":1,\"349\":1,\"354\":4,\"357\":4,\"362\":2,\"373\":1,\"379\":1,\"404\":18,\"406\":4,\"407\":3,\"412\":1,\"415\":2,\"416\":1,\"420\":1,\"429\":3,\"432\":4,\"434\":3,\"435\":2,\"436\":2,\"438\":1,\"441\":2,\"442\":4,\"444\":1,\"445\":1,\"448\":7,\"449\":2,\"450\":1,\"452\":2,\"453\":1,\"454\":13,\"455\":4,\"464\":1,\"471\":1,\"473\":1,\"480\":1,\"482\":3,\"495\":1,\"498\":1,\"499\":1,\"504\":2,\"515\":2,\"520\":1,\"523\":2,\"526\":4,\"528\":1,\"534\":3,\"538\":1}}],[\"集成相关的类\",{\"1\":{\"1\":1}}],[\"和文档中定义的数据类型都在枚举类\",{\"1\":{\"480\":1}}],[\"和客户端对应的连接都用一个叫做\",{\"1\":{\"474\":1}}],[\"和第\",{\"1\":{\"414\":1}}],[\"和被\",{\"1\":{\"359\":1}}],[\"和上一个问题类似\",{\"1\":{\"225\":1}}],[\"和其他\",{\"1\":{\"168\":1}}],[\"和\",{\"0\":{\"16\":1},\"1\":{\"1\":1,\"7\":1,\"18\":3,\"107\":5,\"111\":1,\"115\":2,\"133\":1,\"149\":1,\"225\":3,\"229\":2,\"230\":3,\"246\":1,\"301\":1,\"304\":1,\"319\":1,\"338\":1,\"346\":1,\"373\":1,\"379\":1,\"382\":1,\"404\":2,\"410\":1,\"421\":1,\"422\":2,\"424\":1,\"441\":1,\"449\":1,\"452\":1,\"475\":2,\"517\":1,\"555\":1,\"559\":2}}],[\"junit\",{\"1\":{\"532\":1}}],[\"j\",{\"1\":{\"348\":2}}],[\"jsr310\",{\"1\":{\"149\":1}}],[\"json\",{\"1\":{\"149\":2}}],[\"jar文件\",{\"1\":{\"450\":1}}],[\"jar\",{\"1\":{\"450\":1}}],[\"javaweb\",{\"1\":{\"326\":1}}],[\"java线程池\",{\"1\":{\"213\":1}}],[\"java\",{\"1\":{\"107\":6,\"133\":1,\"150\":1,\"152\":1,\"153\":1,\"154\":2,\"214\":1,\"215\":1,\"216\":1,\"217\":1,\"226\":5,\"227\":4,\"235\":1,\"240\":1,\"413\":1,\"441\":1,\"450\":3,\"532\":1,\"543\":1}}],[\"jackson\",{\"1\":{\"101\":1,\"149\":4}}],[\"jdk8+\",{\"1\":{\"450\":1}}],[\"jdk8\",{\"1\":{\"127\":1,\"440\":1,\"441\":2}}],[\"jdk版本要求\",{\"0\":{\"441\":1}}],[\"jdk版本\",{\"1\":{\"115\":1,\"404\":1,\"441\":2,\"445\":2,\"449\":1,\"450\":1}}],[\"jdk\",{\"0\":{\"450\":1},\"1\":{\"2\":1,\"115\":8,\"131\":1,\"404\":8,\"441\":18,\"445\":1,\"446\":1,\"448\":2,\"449\":11}}],[\"jdk17\",{\"0\":{\"440\":1},\"1\":{\"440\":2,\"441\":1}}],[\"jdk17+\",{\"1\":{\"1\":1,\"440\":1,\"445\":1,\"450\":1}}],[\"jdk11+\",{\"1\":{\"1\":1}}],[\"jtsessionnotfoundexception\",{\"1\":{\"512\":1}}],[\"jtservernettyconfigure\",{\"1\":{\"121\":1,\"385\":1,\"409\":1,\"410\":2,\"411\":1}}],[\"jtcommunicationexception\",{\"1\":{\"474\":1}}],[\"jtcryptoutil\",{\"1\":{\"383\":2}}],[\"jt<\",{\"1\":{\"454\":1,\"455\":1,\"485\":1}}],[\"jtprotocolutils\",{\"1\":{\"383\":2,\"428\":2}}],[\"jtprotocolconstant\",{\"1\":{\"369\":2,\"370\":1,\"532\":2}}],[\"jt808channelhandleradapter\",{\"1\":{\"544\":3}}],[\"jt808configuration\",{\"1\":{\"548\":1}}],[\"jt808config\",{\"1\":{\"529\":1,\"530\":1,\"531\":1,\"534\":1,\"539\":1,\"543\":1,\"544\":1}}],[\"jt808commandkey\",{\"1\":{\"122\":1,\"320\":4}}],[\"jt808commandsender\",{\"1\":{\"122\":1,\"318\":2,\"320\":2}}],[\"jt808exceptionhandler\",{\"0\":{\"491\":1},\"1\":{\"491\":1}}],[\"jt808bytereadertest\",{\"1\":{\"428\":1}}],[\"jt808bytereader\",{\"0\":{\"427\":1},\"1\":{\"427\":2,\"428\":3,\"429\":1}}],[\"jt808bytewritertest\",{\"1\":{\"431\":1}}],[\"jt808bytewriter\",{\"0\":{\"430\":1},\"1\":{\"360\":1,\"430\":1,\"431\":3,\"432\":1,\"435\":2,\"436\":2,\"473\":1}}],[\"jt808flowidgeneratorfactory\",{\"1\":{\"395\":5}}],[\"jt808flowidgenerator\",{\"0\":{\"395\":1},\"1\":{\"395\":2,\"434\":2,\"435\":2,\"436\":1,\"474\":1}}],[\"jt808fieldserializerexception\",{\"1\":{\"241\":1}}],[\"jt808fieldserializer<\",{\"1\":{\"227\":2}}],[\"jt808fieldserializer\",{\"1\":{\"107\":1,\"227\":2,\"229\":1,\"230\":1}}],[\"jt808fielddeserializer\",{\"1\":{\"107\":1,\"225\":1,\"229\":1,\"230\":1}}],[\"jt808dispatchchannelhandleradapter\",{\"1\":{\"389\":1}}],[\"jt808dispatcherhandler\",{\"1\":{\"389\":3}}],[\"jt808nettytcpserverprops\",{\"1\":{\"386\":1}}],[\"jt808handlermapping\",{\"1\":{\"336\":2}}],[\"jt808handlermethodargumentresolver\",{\"1\":{\"326\":3}}],[\"jt808handlerresulthandler\",{\"1\":{\"351\":3,\"389\":2}}],[\"jt808handlerresult\",{\"1\":{\"322\":1,\"351\":2,\"389\":4}}],[\"jt808handlerinterceptor\",{\"1\":{\"16\":1,\"322\":3}}],[\"jt808appprops\",{\"1\":{\"567\":2}}],[\"jt808argumentresolveexception\",{\"1\":{\"326\":1}}],[\"jt808annotationargumentresolveexception\",{\"1\":{\"236\":1,\"241\":1}}],[\"jt808attachmentservernettyconfigure\",{\"1\":{\"121\":1,\"409\":1}}],[\"jt808protocolversiondetectorregistry\",{\"1\":{\"370\":1}}],[\"jt808protocolversion\",{\"1\":{\"193\":1,\"246\":1,\"320\":1,\"328\":1,\"329\":1,\"330\":1,\"331\":1,\"332\":1,\"333\":1,\"342\":1,\"357\":1,\"393\":2,\"419\":1,\"423\":1,\"434\":1,\"435\":1,\"436\":1,\"473\":5,\"474\":1,\"567\":3}}],[\"jt808terminalheatbeathandler\",{\"1\":{\"181\":1}}],[\"jt808respmsgbody\",{\"0\":{\"525\":1},\"1\":{\"515\":1,\"525\":1,\"526\":1}}],[\"jt808responsebuilder\",{\"1\":{\"430\":1}}],[\"jt808responsebodyhandlerresulthandler\",{\"1\":{\"351\":1}}],[\"jt808responsebody\",{\"0\":{\"310\":1,\"352\":1,\"361\":1},\"1\":{\"88\":1,\"312\":1,\"316\":1,\"351\":1,\"354\":2,\"359\":1,\"361\":2,\"418\":1,\"422\":1,\"432\":1,\"434\":2}}],[\"jt808responsesubpackage\",{\"1\":{\"364\":1}}],[\"jt808responsesubpackagestorage\",{\"1\":{\"364\":3,\"365\":2,\"366\":2,\"396\":2}}],[\"jt808responsehandlerresulthandler\",{\"1\":{\"351\":2}}],[\"jt808response\",{\"0\":{\"329\":1,\"355\":1,\"360\":1,\"473\":1},\"1\":{\"88\":1,\"327\":1,\"329\":3,\"330\":2,\"331\":1,\"332\":2,\"343\":2,\"351\":1,\"357\":2,\"359\":1,\"360\":3,\"361\":3,\"364\":1,\"371\":3,\"383\":1,\"429\":1,\"430\":1,\"432\":2,\"473\":2,\"475\":2}}],[\"jt808reqmsgbody\",{\"0\":{\"517\":1},\"1\":{\"201\":1,\"246\":1,\"495\":1,\"499\":1,\"517\":1,\"556\":1,\"558\":1}}],[\"jt808requestaware\",{\"0\":{\"400\":1},\"1\":{\"400\":1}}],[\"jt808requestsubpackagestorage\",{\"1\":{\"345\":1,\"346\":1,\"347\":1,\"349\":1,\"396\":2}}],[\"jt808requestentity\",{\"0\":{\"334\":1},\"1\":{\"327\":1}}],[\"jt808requestentity<terminalregistermsgv2019>\",{\"1\":{\"339\":1,\"354\":1}}],[\"jt808requestentity<t>\",{\"1\":{\"334\":1}}],[\"jt808requestentity<builtinmsg0005>\",{\"1\":{\"366\":1}}],[\"jt808requestentity<builtinmsg0704v2013>\",{\"1\":{\"334\":1}}],[\"jt808requestentity<builtinmsg0100v2019>\",{\"1\":{\"300\":1}}],[\"jt808requestentity<builtinterminalcommonreplymsg>\",{\"1\":{\"320\":1}}],[\"jt808requestentity<locationuploadmsgv2019>\",{\"1\":{\"293\":1}}],[\"jt808requestentity<locationbatchuploadmsgv2019>\",{\"1\":{\"290\":1}}],[\"jt808requestheaderaware\",{\"0\":{\"399\":1},\"1\":{\"399\":1}}],[\"jt808requestheader\",{\"0\":{\"332\":1},\"1\":{\"327\":1,\"332\":1,\"334\":1,\"383\":1,\"399\":2,\"472\":1}}],[\"jt808requesthandlermappinghandlermapping\",{\"1\":{\"336\":1}}],[\"jt808requesthandlermapping\",{\"0\":{\"298\":1,\"337\":1},\"1\":{\"290\":1,\"293\":1,\"300\":1,\"319\":1,\"320\":1,\"322\":6,\"328\":1,\"329\":1,\"330\":1,\"331\":1,\"332\":1,\"333\":1,\"334\":1,\"336\":1,\"338\":1,\"339\":2,\"354\":1,\"366\":1,\"567\":4}}],[\"jt808requesthandler\",{\"0\":{\"297\":1},\"1\":{\"290\":1,\"293\":1,\"297\":1,\"300\":1,\"301\":1,\"320\":1,\"328\":1,\"329\":1,\"330\":1,\"331\":1,\"332\":1,\"333\":1,\"334\":1,\"339\":2,\"354\":1,\"366\":1,\"389\":2,\"567\":1}}],[\"jt808request\",{\"0\":{\"328\":1,\"472\":1},\"1\":{\"304\":2,\"315\":2,\"326\":2,\"327\":1,\"328\":2,\"329\":1,\"333\":1,\"339\":1,\"343\":2,\"346\":6,\"370\":6,\"389\":4,\"390\":1,\"400\":2,\"424\":1,\"427\":1,\"472\":3,\"473\":1,\"475\":2,\"567\":5}}],[\"jt808requestbody标记的自定义类型\",{\"1\":{\"327\":1}}],[\"jt808requestbody\",{\"0\":{\"301\":1,\"333\":1},\"1\":{\"225\":2,\"234\":1,\"237\":1,\"239\":1,\"242\":1,\"286\":1,\"287\":1,\"290\":1,\"293\":1,\"305\":1,\"308\":1,\"333\":2,\"334\":1,\"429\":1}}],[\"jt808requestfilterchain\",{\"1\":{\"379\":1}}],[\"jt808requestfilter\",{\"0\":{\"379\":1},\"1\":{\"107\":1,\"148\":2,\"379\":2}}],[\"jt808requestlifecyclelistener\",{\"1\":{\"60\":1,\"61\":1,\"389\":3,\"390\":1}}],[\"jt808requestmsgdispatcher\",{\"1\":{\"346\":2,\"389\":1,\"396\":1}}],[\"jt808requestmsghandleradvice\",{\"0\":{\"490\":1},\"1\":{\"490\":1,\"491\":1}}],[\"jt808requestmsghandlermapping\",{\"0\":{\"508\":1},\"1\":{\"206\":1,\"508\":2,\"509\":1,\"522\":1,\"524\":1,\"526\":1}}],[\"jt808requestmsghandler\",{\"0\":{\"507\":1},\"1\":{\"28\":1,\"507\":2,\"508\":1,\"522\":1,\"526\":1,\"557\":1}}],[\"jt808requestmsgconverter\",{\"1\":{\"28\":1}}],[\"jt808msgtype>\",{\"1\":{\"542\":1}}],[\"jt808msgtype\",{\"1\":{\"534\":1,\"539\":1,\"542\":3,\"543\":1}}],[\"jt808msgtypeparser\",{\"0\":{\"459\":1},\"1\":{\"370\":3,\"459\":6}}],[\"jt808msgheaderbuilder\",{\"1\":{\"532\":2}}],[\"jt808msgdecoder\",{\"0\":{\"370\":1},\"1\":{\"370\":6}}],[\"jt808msgescapeexception\",{\"1\":{\"369\":2}}],[\"jt808msgencoder\",{\"0\":{\"371\":1},\"1\":{\"359\":1,\"371\":7}}],[\"jt808msgencryptionhandlerdemo01\",{\"1\":{\"383\":1}}],[\"jt808msgencryptionhandler\",{\"1\":{\"88\":1,\"383\":3}}],[\"jt808msgbytesprocessor\",{\"0\":{\"369\":1},\"1\":{\"369\":5,\"370\":3,\"371\":3,\"472\":1}}],[\"jt808msgbuildertest\",{\"1\":{\"434\":1,\"435\":1,\"532\":1}}],[\"jt808msgbuilder\",{\"1\":{\"25\":1,\"64\":1,\"84\":1,\"88\":1,\"433\":2,\"434\":2,\"435\":1,\"436\":1,\"532\":3}}],[\"jt808serverconfigure\",{\"1\":{\"531\":1}}],[\"jt808serverconfigurationsupport\",{\"1\":{\"39\":1,\"529\":1,\"530\":1,\"531\":2,\"534\":1,\"539\":1,\"543\":1,\"544\":2,\"546\":1,\"547\":1,\"548\":1}}],[\"jt808serversamplebareapplication\",{\"1\":{\"486\":2}}],[\"jt808serverschedulerfactory\",{\"1\":{\"374\":4}}],[\"jt808serverprops\",{\"1\":{\"386\":2}}],[\"jt808servernettyconfigure\",{\"1\":{\"121\":1,\"384\":1,\"385\":1,\"386\":2,\"387\":1,\"409\":1,\"410\":5,\"544\":2}}],[\"jt808serverexchange\",{\"0\":{\"331\":1,\"475\":1},\"1\":{\"54\":1,\"57\":1,\"322\":3,\"327\":1,\"331\":2,\"332\":1,\"342\":1,\"357\":1,\"379\":1,\"389\":8,\"429\":1,\"432\":1,\"475\":2}}],[\"jt808sessioneventlistener\",{\"0\":{\"394\":1},\"1\":{\"394\":5}}],[\"jt808sessionmanagereventlistener\",{\"0\":{\"547\":1},\"1\":{\"547\":2}}],[\"jt808sessionmanager\",{\"0\":{\"393\":1,\"546\":1},\"1\":{\"43\":1,\"318\":2,\"319\":1,\"320\":2,\"366\":2,\"392\":1,\"393\":11,\"394\":2,\"512\":1,\"546\":4}}],[\"jt808session\",{\"0\":{\"330\":1,\"392\":1,\"474\":1},\"1\":{\"41\":1,\"54\":1,\"57\":1,\"315\":1,\"318\":1,\"319\":2,\"320\":1,\"327\":1,\"330\":2,\"333\":1,\"334\":1,\"366\":1,\"392\":3,\"393\":1,\"394\":11,\"434\":1,\"435\":1,\"474\":4,\"475\":2,\"508\":1,\"509\":1,\"547\":2,\"567\":5}}],[\"jt808\",{\"1\":{\"23\":2,\"25\":1,\"35\":1,\"55\":1,\"58\":1,\"69\":2,\"101\":1,\"107\":1,\"109\":2,\"119\":1,\"129\":1,\"133\":2,\"143\":1,\"144\":2,\"145\":1,\"146\":1,\"147\":1,\"148\":1,\"149\":2,\"150\":1,\"151\":1,\"158\":1,\"159\":1,\"160\":1,\"166\":1,\"168\":1,\"169\":2,\"170\":2,\"171\":1,\"172\":1,\"174\":1,\"175\":1,\"181\":2,\"184\":2,\"185\":3,\"190\":2,\"191\":1,\"199\":1,\"220\":1,\"237\":1,\"242\":1,\"295\":2,\"318\":1,\"347\":5,\"348\":1,\"365\":3,\"369\":2,\"370\":3,\"373\":1,\"377\":2,\"379\":2,\"386\":1,\"389\":3,\"390\":1,\"392\":1,\"466\":1,\"468\":1,\"486\":1,\"487\":3,\"531\":2,\"558\":2}}],[\"jt\",{\"0\":{\"476\":1,\"573\":1,\"574\":1},\"1\":{\"1\":13,\"22\":1,\"25\":1,\"26\":4,\"28\":1,\"29\":1,\"31\":1,\"40\":1,\"48\":2,\"55\":1,\"58\":2,\"68\":1,\"73\":1,\"113\":2,\"115\":7,\"131\":7,\"133\":3,\"149\":1,\"166\":2,\"169\":1,\"170\":4,\"193\":1,\"237\":1,\"242\":1,\"295\":2,\"318\":1,\"348\":2,\"359\":2,\"369\":2,\"370\":3,\"383\":2,\"389\":3,\"390\":1,\"392\":1,\"404\":7,\"406\":2,\"407\":2,\"427\":1,\"430\":1,\"438\":2,\"440\":1,\"441\":7,\"442\":1,\"444\":12,\"448\":4,\"449\":5,\"452\":4,\"453\":2,\"454\":6,\"455\":6,\"460\":2,\"461\":1,\"464\":1,\"465\":1,\"466\":2,\"470\":1,\"480\":2,\"483\":1,\"485\":2,\"488\":1,\"493\":1,\"505\":1,\"506\":1,\"510\":1,\"511\":1,\"515\":1,\"529\":1,\"530\":1,\"532\":4,\"535\":1,\"540\":1,\"543\":1,\"544\":2,\"545\":1,\"547\":1,\"561\":1}}],[\"valid\",{\"1\":{\"538\":2}}],[\"validateterminal\",{\"1\":{\"548\":1}}],[\"validateauthcode\",{\"1\":{\"538\":1}}],[\"validate\",{\"1\":{\"529\":1}}],[\"values\",{\"1\":{\"458\":2,\"542\":2}}],[\"valuedescriptor\",{\"1\":{\"287\":15}}],[\"value\",{\"1\":{\"287\":14,\"360\":1,\"423\":1,\"458\":3,\"526\":1}}],[\"valueof\",{\"1\":{\"236\":1,\"393\":1}}],[\"var\",{\"1\":{\"436\":1}}],[\"voidrespmsgbody\",{\"1\":{\"524\":1}}],[\"void\",{\"1\":{\"318\":1,\"320\":1,\"322\":2,\"328\":1,\"346\":1,\"364\":1,\"366\":1,\"379\":1,\"385\":1,\"386\":1,\"387\":2,\"392\":1,\"394\":3,\"399\":1,\"400\":1,\"410\":3,\"414\":2,\"415\":1,\"419\":1,\"423\":1,\"428\":1,\"431\":1,\"434\":1,\"435\":1,\"436\":1,\"474\":1,\"486\":1,\"491\":1,\"509\":1,\"512\":1,\"524\":1,\"532\":2,\"534\":1,\"536\":1,\"538\":2,\"539\":1,\"547\":1,\"552\":1,\"553\":1,\"554\":1,\"567\":3}}],[\"v1\",{\"0\":{\"190\":1,\"221\":1,\"572\":1}}],[\"version>\",{\"1\":{\"454\":2,\"455\":2,\"485\":1}}],[\"version=version\",{\"1\":{\"348\":1}}],[\"versions\",{\"1\":{\"293\":1,\"299\":1,\"300\":1,\"320\":1,\"328\":1,\"329\":1,\"330\":1,\"331\":1,\"332\":1,\"333\":1,\"339\":2,\"354\":1,\"567\":3}}],[\"version\",{\"0\":{\"193\":1},\"1\":{\"35\":1,\"115\":5,\"246\":2,\"293\":1,\"299\":3,\"300\":1,\"329\":1,\"330\":1,\"331\":1,\"332\":1,\"333\":1,\"339\":2,\"354\":1,\"357\":2,\"390\":2,\"393\":4,\"404\":5,\"419\":2,\"423\":2,\"432\":2,\"434\":2,\"435\":2,\"436\":2,\"445\":1,\"446\":1,\"450\":3,\"454\":3,\"455\":3,\"473\":9,\"485\":1}}],[\"v2019\",{\"0\":{\"138\":1},\"1\":{\"13\":1,\"290\":1,\"293\":1,\"300\":1,\"354\":1,\"382\":1}}],[\"v2013\",{\"0\":{\"137\":1},\"1\":{\"13\":1,\"18\":2,\"357\":1,\"382\":1}}],[\"v2011\",{\"0\":{\"134\":1},\"1\":{\"13\":1,\"18\":1,\"342\":1,\"382\":1}}],[\"v2\",{\"0\":{\"145\":1,\"146\":1,\"224\":1,\"231\":1,\"244\":1,\"285\":1,\"372\":1,\"375\":1,\"379\":1,\"380\":1,\"412\":1,\"416\":1,\"420\":1,\"565\":1,\"570\":1},\"1\":{\"1\":1,\"133\":1,\"143\":1,\"145\":1,\"148\":1,\"162\":2,\"164\":2,\"175\":1,\"180\":1,\"232\":1,\"290\":1,\"293\":1,\"295\":1,\"376\":1,\"422\":2}}],[\"v3\",{\"1\":{\"1\":1}}],[\"vuepress\",{\"1\":{\"2\":1}}],[\"vue\",{\"1\":{\"1\":1}}],[\"by\",{\"1\":{\"390\":1}}],[\"bytecountofcontentlength\",{\"1\":{\"505\":1,\"521\":2}}],[\"bytecountofmsgid\",{\"1\":{\"505\":1,\"521\":2}}],[\"bytecountmethod\",{\"1\":{\"504\":2,\"518\":2,\"521\":1}}],[\"bytecount\",{\"1\":{\"480\":4}}],[\"bytearraycontainer\",{\"0\":{\"416\":1},\"1\":{\"107\":2,\"248\":1,\"249\":1,\"251\":1,\"252\":1,\"254\":1,\"255\":1,\"257\":1,\"258\":1,\"260\":1,\"261\":1,\"263\":1,\"264\":1,\"267\":1,\"268\":1,\"270\":1,\"271\":1,\"273\":1,\"274\":1,\"276\":1,\"277\":1,\"279\":1,\"280\":1,\"282\":1,\"283\":1,\"286\":2,\"287\":1,\"293\":1,\"416\":1,\"417\":2,\"418\":3,\"419\":6,\"422\":3,\"424\":1}}],[\"bytearrayfieldserializer\",{\"1\":{\"64\":1}}],[\"bytes2bcdstring\",{\"1\":{\"534\":1}}],[\"bytes2hexstring\",{\"1\":{\"532\":3}}],[\"bytescountofcontentlength\",{\"1\":{\"515\":2}}],[\"bytesprocessor\",{\"1\":{\"370\":2}}],[\"bytesvaluewrapper\",{\"1\":{\"107\":1,\"515\":2}}],[\"bytes\",{\"0\":{\"250\":1,\"269\":1},\"1\":{\"107\":1,\"133\":1,\"251\":5,\"252\":5,\"270\":5,\"271\":5,\"286\":2,\"287\":2,\"293\":2,\"303\":1,\"418\":1,\"419\":1,\"422\":1,\"423\":1,\"480\":1,\"497\":1,\"502\":1,\"504\":1,\"505\":1,\"518\":2,\"523\":1,\"530\":2,\"532\":2,\"534\":9,\"538\":2}}],[\"bytesencoderaware\",{\"0\":{\"554\":1},\"1\":{\"554\":1}}],[\"bytesencoder\",{\"1\":{\"530\":3,\"554\":5}}],[\"bytesencoder支持校验码逻辑自定义\",{\"1\":{\"41\":1}}],[\"bytesencoder转义bug\",{\"1\":{\"40\":1}}],[\"byte\",{\"0\":{\"247\":1,\"266\":1},\"1\":{\"16\":1,\"107\":1,\"133\":1,\"136\":7,\"140\":8,\"225\":8,\"234\":2,\"237\":2,\"239\":1,\"242\":1,\"248\":9,\"249\":9,\"251\":1,\"252\":1,\"267\":9,\"268\":9,\"270\":2,\"271\":2,\"286\":8,\"287\":7,\"290\":6,\"293\":14,\"300\":1,\"305\":6,\"306\":1,\"308\":1,\"314\":1,\"316\":6,\"333\":1,\"334\":2,\"354\":7,\"357\":4,\"369\":1,\"383\":1,\"417\":1,\"418\":4,\"419\":3,\"421\":2,\"422\":7,\"423\":3,\"429\":4,\"432\":4,\"434\":2,\"435\":1,\"436\":1,\"472\":2,\"473\":5,\"479\":2,\"480\":4,\"482\":7,\"497\":1,\"502\":3,\"503\":2,\"504\":3,\"505\":5,\"515\":2,\"518\":2,\"519\":1,\"520\":1,\"523\":5,\"526\":4,\"530\":4,\"532\":5,\"533\":1,\"534\":1,\"536\":1,\"538\":8,\"558\":1,\"567\":1}}],[\"bytebufjt808msgbuilder\",{\"0\":{\"435\":1},\"1\":{\"430\":1,\"435\":1}}],[\"bytebuftostring\",{\"1\":{\"366\":1,\"431\":2,\"434\":1,\"435\":1}}],[\"bytebufallocator\",{\"1\":{\"318\":1,\"320\":2,\"369\":1,\"371\":1,\"396\":1,\"428\":1,\"431\":1,\"435\":1,\"436\":1}}],[\"bytebufcontainerfieldserializer\",{\"1\":{\"424\":1}}],[\"bytebufcontainer\",{\"0\":{\"420\":1},\"1\":{\"107\":2,\"248\":1,\"249\":1,\"251\":1,\"252\":1,\"254\":1,\"255\":1,\"257\":1,\"258\":1,\"260\":1,\"261\":1,\"263\":1,\"264\":1,\"267\":1,\"268\":1,\"270\":1,\"271\":1,\"273\":1,\"274\":1,\"276\":1,\"277\":1,\"279\":1,\"280\":1,\"282\":1,\"283\":1,\"286\":2,\"293\":1,\"418\":2,\"420\":1,\"422\":5,\"423\":11,\"424\":5}}],[\"bytebuf\",{\"1\":{\"16\":1,\"225\":2,\"236\":3,\"241\":3,\"251\":1,\"252\":1,\"270\":1,\"271\":1,\"318\":1,\"334\":1,\"369\":11,\"370\":5,\"371\":3,\"383\":4,\"389\":4,\"417\":1,\"418\":2,\"421\":2,\"422\":4,\"427\":1,\"428\":3,\"430\":1,\"431\":4,\"434\":1,\"435\":6,\"436\":6,\"472\":3,\"473\":1,\"474\":3,\"567\":2}}],[\"beforeresponse\",{\"1\":{\"389\":1}}],[\"beforeencode\",{\"1\":{\"389\":1}}],[\"beforehandle\",{\"1\":{\"389\":1}}],[\"beforedispatch\",{\"1\":{\"389\":2,\"390\":1}}],[\"beforedecode\",{\"1\":{\"389\":1}}],[\"bean\",{\"1\":{\"369\":2,\"370\":1,\"371\":2,\"374\":2,\"384\":1,\"393\":2,\"394\":3,\"395\":2,\"396\":3,\"459\":1}}],[\"be\",{\"1\":{\"318\":1,\"444\":1,\"512\":1,\"524\":1}}],[\"beta1\",{\"0\":{\"93\":1}}],[\"beta\",{\"1\":{\"2\":1}}],[\"blocking\",{\"0\":{\"217\":1}}],[\"basic\",{\"1\":{\"518\":1}}],[\"basicfield解析\",{\"0\":{\"504\":1}}],[\"basicfield\",{\"0\":{\"518\":1},\"1\":{\"480\":1,\"495\":11,\"497\":1,\"498\":1,\"499\":1,\"501\":1,\"502\":1,\"504\":4,\"518\":2}}],[\"based\",{\"1\":{\"559\":1}}],[\"basereqrespmsgtest\",{\"1\":{\"414\":1,\"419\":1,\"423\":1}}],[\"base\",{\"0\":{\"203\":1,\"207\":1,\"211\":1}}],[\"bat\",{\"1\":{\"444\":1}}],[\"backlog\",{\"1\":{\"386\":1}}],[\"bare\",{\"1\":{\"1\":2,\"461\":1,\"470\":1,\"483\":1,\"488\":1}}],[\"bodyasreader\",{\"1\":{\"427\":1,\"429\":1}}],[\"body\",{\"1\":{\"290\":1,\"293\":1,\"300\":3,\"320\":4,\"334\":3,\"339\":3,\"346\":1,\"354\":1,\"357\":1,\"366\":4,\"383\":4,\"389\":1,\"430\":2,\"432\":1,\"434\":1,\"435\":1,\"436\":1,\"472\":1,\"473\":1,\"532\":2,\"534\":10,\"536\":1,\"538\":7,\"567\":19}}],[\"boolean\",{\"1\":{\"156\":1,\"168\":1,\"169\":1,\"176\":1,\"201\":1,\"202\":1,\"204\":1,\"206\":1,\"208\":1,\"210\":1,\"212\":1,\"220\":1,\"293\":2,\"308\":2,\"322\":1,\"326\":1,\"386\":1,\"389\":6,\"390\":1,\"474\":1,\"495\":2,\"498\":2,\"499\":2,\"529\":1,\"538\":2,\"548\":2,\"559\":1}}],[\"boot<\",{\"1\":{\"454\":2,\"455\":2}}],[\"boot版本要求\",{\"0\":{\"442\":1}}],[\"boot版本\",{\"1\":{\"115\":2,\"404\":2,\"449\":1,\"453\":3}}],[\"boot3\",{\"1\":{\"1\":1}}],[\"boot2<\",{\"1\":{\"454\":1}}],[\"boot2\",{\"1\":{\"1\":1,\"115\":4,\"131\":2,\"404\":4,\"406\":3,\"438\":1,\"441\":1,\"444\":2,\"448\":2,\"449\":1,\"452\":2,\"454\":3,\"464\":1}}],[\"boot\",{\"0\":{\"406\":1,\"407\":1,\"451\":1,\"454\":1,\"455\":1,\"464\":1,\"465\":1},\"1\":{\"1\":8,\"65\":1,\"70\":1,\"85\":1,\"113\":4,\"115\":22,\"116\":1,\"131\":4,\"404\":22,\"406\":3,\"407\":3,\"438\":5,\"440\":3,\"441\":9,\"442\":7,\"444\":6,\"448\":12,\"449\":4,\"450\":2,\"452\":6,\"453\":4,\"454\":16,\"455\":16,\"462\":2,\"464\":2,\"465\":2,\"468\":1,\"484\":2,\"485\":3,\"487\":1,\"531\":1}}],[\"bossgroup\",{\"1\":{\"197\":1}}],[\"bossgroup=new\",{\"1\":{\"145\":1,\"178\":1}}],[\"boss\",{\"0\":{\"178\":1,\"197\":1},\"1\":{\"145\":1,\"175\":1}}],[\"bossthreadcount\",{\"1\":{\"145\":1,\"178\":1,\"197\":1}}],[\"bcdops\",{\"1\":{\"534\":1}}],[\"bcdstring\",{\"1\":{\"428\":2}}],[\"bcdfielddeserializer\",{\"1\":{\"241\":2}}],[\"bcddatetime\",{\"0\":{\"238\":1},\"1\":{\"240\":1,\"241\":2,\"242\":2,\"246\":2,\"293\":1}}],[\"bcd\",{\"0\":{\"259\":1,\"278\":1},\"1\":{\"107\":2,\"133\":1,\"136\":1,\"140\":1,\"225\":4,\"226\":2,\"239\":4,\"240\":1,\"241\":4,\"242\":2,\"246\":3,\"260\":3,\"261\":3,\"279\":3,\"280\":3,\"293\":3,\"428\":1,\"473\":4,\"479\":1,\"480\":1,\"482\":1,\"495\":2}}],[\"binarystring\",{\"1\":{\"415\":6}}],[\"bigdecimal\",{\"1\":{\"107\":1,\"236\":3,\"237\":3,\"246\":1}}],[\"bitatrange\",{\"1\":{\"499\":1}}],[\"bitat\",{\"1\":{\"499\":4}}],[\"bit1\",{\"1\":{\"499\":1}}],[\"bit12\",{\"1\":{\"382\":1}}],[\"bit11\",{\"1\":{\"382\":1}}],[\"bit10\",{\"1\":{\"382\":1}}],[\"bit16\",{\"1\":{\"287\":1}}],[\"bitindex\",{\"1\":{\"293\":3,\"307\":1,\"308\":3,\"495\":3,\"498\":3,\"499\":4,\"520\":1}}],[\"bit0to1\",{\"1\":{\"499\":1}}],[\"bit0\",{\"1\":{\"287\":1}}],[\"bit\",{\"1\":{\"81\":1,\"136\":4,\"140\":5,\"243\":1,\"311\":1,\"382\":9,\"413\":1,\"414\":3,\"415\":6,\"482\":4,\"497\":1}}],[\"bitoperatortest\",{\"1\":{\"415\":1}}],[\"bitoperatorget\",{\"1\":{\"81\":1}}],[\"bitoperator\",{\"0\":{\"412\":1},\"1\":{\"80\":1,\"81\":3,\"103\":1,\"107\":2,\"248\":1,\"249\":1,\"254\":1,\"255\":1,\"257\":1,\"258\":1,\"267\":1,\"268\":1,\"273\":1,\"274\":1,\"276\":1,\"277\":1,\"412\":1,\"413\":2,\"414\":3,\"415\":8}}],[\"b1a8eaca\",{\"1\":{\"51\":1}}],[\"buffer\",{\"1\":{\"318\":2,\"320\":2,\"428\":1,\"431\":1,\"435\":2,\"436\":1}}],[\"built\",{\"0\":{\"167\":1},\"1\":{\"143\":1,\"166\":1,\"168\":1,\"169\":1,\"466\":1}}],[\"builtindefaultexceptionhandler\",{\"1\":{\"490\":1,\"491\":3}}],[\"builtinauthcodevalidatorfordebugging\",{\"1\":{\"487\":1}}],[\"builtinauthmsghandler\",{\"1\":{\"487\":1}}],[\"builtinterminalcommonreplymsg\",{\"1\":{\"320\":1}}],[\"builtinservercommonreplymsg\",{\"1\":{\"290\":2,\"293\":2,\"334\":2,\"567\":4}}],[\"builtincomponent\",{\"1\":{\"239\":1,\"242\":1,\"287\":1,\"290\":1,\"538\":1}}],[\"builtincommonhandler\",{\"1\":{\"96\":1,\"334\":1}}],[\"builtin\",{\"0\":{\"202\":1,\"204\":1,\"208\":1,\"212\":1},\"1\":{\"133\":2,\"169\":1,\"295\":2,\"558\":1,\"559\":1}}],[\"builtinjt808msgtype\",{\"1\":{\"320\":2,\"329\":1,\"331\":1,\"342\":1,\"357\":2,\"419\":1,\"423\":1,\"432\":1,\"434\":1,\"435\":1,\"436\":1,\"459\":1,\"508\":2,\"522\":1,\"523\":1,\"526\":2,\"532\":2,\"538\":5,\"543\":1}}],[\"builtinjt808attachmentservernettyconfigure\",{\"1\":{\"121\":1,\"386\":1,\"409\":1}}],[\"builtinjt808servernettyconfigure\",{\"1\":{\"121\":1,\"386\":1,\"409\":1}}],[\"builtinmsg30316364alias\",{\"1\":{\"567\":2}}],[\"builtinmsg9212alias\",{\"1\":{\"567\":3}}],[\"builtinmsg1212alias\",{\"1\":{\"567\":1}}],[\"builtinmsg1211alias\",{\"1\":{\"567\":1}}],[\"builtinmsg1210alias\",{\"1\":{\"567\":7}}],[\"builtinmsg67alias\",{\"1\":{\"287\":1}}],[\"builtinmsg66alias\",{\"1\":{\"287\":1}}],[\"builtinmsg65alias\",{\"1\":{\"287\":1}}],[\"builtinmsg64alias\",{\"1\":{\"287\":1}}],[\"builtinmsgxxxalias\",{\"1\":{\"133\":1,\"295\":1}}],[\"builtinmsgxxx\",{\"1\":{\"133\":1,\"295\":1}}],[\"builtinmsg0005\",{\"1\":{\"366\":2}}],[\"builtinmsg0002\",{\"1\":{\"108\":1}}],[\"builtinmsg0704\",{\"1\":{\"334\":1}}],[\"builtinmsg0100v2019\",{\"1\":{\"300\":1,\"305\":1}}],[\"builtinmsg0200test\",{\"1\":{\"414\":1}}],[\"builtinmsg0200v2013\",{\"1\":{\"308\":1}}],[\"builtinmsg0200v2013aliasv2\",{\"1\":{\"287\":1}}],[\"builtinmsg0200v2013alias\",{\"1\":{\"234\":1,\"237\":1,\"239\":1,\"242\":1}}],[\"builtinmsg0200v2019aliasv2\",{\"1\":{\"287\":2}}],[\"builtinmsg0200v2019alias\",{\"1\":{\"225\":1,\"414\":3}}],[\"builtinmsg0200v2019\",{\"1\":{\"225\":1}}],[\"builtinmsg0200\",{\"1\":{\"108\":1}}],[\"builtinmsg8604v2019alias\",{\"1\":{\"107\":1}}],[\"builtinmsg8604v2013alias\",{\"1\":{\"107\":1}}],[\"builtinmsg8604v2011alias\",{\"1\":{\"107\":1}}],[\"builtinmsg8602v2019alias\",{\"1\":{\"107\":1}}],[\"builtinmsg8602v2013alias\",{\"1\":{\"107\":1}}],[\"builtinmsg8602v2011alias\",{\"1\":{\"107\":1}}],[\"builtinmsg8600v2019alias\",{\"1\":{\"107\":1}}],[\"builtinmsg8600v2013alias\",{\"1\":{\"107\":1}}],[\"builtinmsg8600v2011alias\",{\"1\":{\"107\":1}}],[\"builtinmsg8300alias\",{\"1\":{\"107\":1}}],[\"builtinmsg8300\",{\"1\":{\"107\":1}}],[\"builtinmsg8100\",{\"1\":{\"342\":1}}],[\"builtinmsg8100alias\",{\"1\":{\"107\":1}}],[\"builtinmsg8103test\",{\"1\":{\"419\":1,\"423\":1}}],[\"builtinmsg8103alias\",{\"1\":{\"107\":1,\"422\":1,\"423\":7}}],[\"builtinmsg8103\",{\"1\":{\"107\":1,\"418\":1,\"419\":7}}],[\"buildsession\",{\"1\":{\"393\":2}}],[\"builder\",{\"1\":{\"25\":1,\"390\":1,\"419\":2,\"423\":2,\"434\":6,\"435\":6,\"436\":7,\"532\":6}}],[\"build\",{\"1\":{\"1\":1,\"357\":1,\"432\":1,\"434\":2,\"435\":2,\"436\":3,\"444\":5,\"532\":9,\"567\":1}}],[\"bug\",{\"0\":{\"22\":1,\"26\":1,\"29\":1,\"32\":1,\"36\":1,\"40\":1,\"44\":1,\"48\":1,\"51\":1,\"55\":1,\"58\":1,\"68\":1,\"73\":1,\"81\":1,\"90\":1,\"96\":1,\"101\":1,\"108\":1,\"125\":1,\"127\":1},\"1\":{\"36\":1,\"50\":1,\"181\":1,\"188\":1,\"222\":3}}],[\"shouldbereplacedby\",{\"1\":{\"559\":1}}],[\"short\",{\"1\":{\"248\":2,\"249\":2,\"254\":2,\"255\":2,\"267\":2,\"268\":2,\"273\":2,\"274\":2,\"287\":1,\"306\":1,\"480\":4,\"519\":1,\"520\":1,\"534\":3,\"567\":1}}],[\"sync\",{\"1\":{\"538\":1}}],[\"system\",{\"1\":{\"393\":1,\"532\":3}}],[\"sm4\",{\"1\":{\"383\":2}}],[\"s\",{\"1\":{\"348\":1}}],[\"savesubpackage\",{\"1\":{\"346\":2,\"364\":1}}],[\"samplemsghandler\",{\"1\":{\"538\":1}}],[\"samplecontroller\",{\"1\":{\"515\":1}}],[\"sample\",{\"1\":{\"1\":6,\"461\":1,\"470\":1,\"483\":1,\"488\":1,\"493\":1,\"505\":1,\"506\":1,\"510\":1,\"511\":1,\"515\":1,\"529\":1,\"530\":1,\"535\":1,\"540\":1,\"543\":1,\"544\":2,\"545\":1,\"547\":1}}],[\"samples\",{\"1\":{\"1\":1,\"444\":1,\"460\":3,\"461\":1,\"470\":1,\"483\":1,\"488\":1,\"493\":1,\"505\":1,\"506\":1,\"510\":1,\"511\":1,\"515\":1,\"529\":1,\"530\":1,\"535\":1,\"540\":1,\"543\":1,\"544\":2,\"545\":1,\"547\":1}}],[\"slf4j\",{\"1\":{\"290\":1,\"293\":1,\"329\":1,\"330\":1,\"339\":1,\"342\":1,\"357\":1,\"366\":1,\"490\":1,\"491\":1,\"508\":1,\"515\":1,\"522\":1,\"526\":1,\"538\":3,\"547\":1,\"567\":1}}],[\"slicedfrom解析\",{\"0\":{\"498\":1}}],[\"slicedfrom\",{\"0\":{\"306\":1,\"520\":1},\"1\":{\"103\":1,\"293\":3,\"308\":3,\"495\":3,\"498\":3}}],[\"sorted\",{\"1\":{\"393\":1}}],[\"so\",{\"1\":{\"386\":3}}],[\"socketchannel\",{\"1\":{\"385\":1,\"386\":1,\"387\":1,\"410\":2}}],[\"sommethodname\",{\"1\":{\"303\":2}}],[\"somecontroller\",{\"1\":{\"512\":1}}],[\"someconfigurationclass\",{\"1\":{\"374\":1}}],[\"someclass\",{\"1\":{\"505\":1}}],[\"somehandler3\",{\"1\":{\"386\":1}}],[\"somehandler2\",{\"1\":{\"386\":1}}],[\"somehandler1\",{\"1\":{\"386\":1}}],[\"somerequesthandler\",{\"1\":{\"339\":1}}],[\"somemethod\",{\"1\":{\"304\":2,\"315\":2}}],[\"somefield\",{\"1\":{\"304\":2,\"315\":2,\"392\":5}}],[\"somefieldvalue\",{\"1\":{\"303\":1}}],[\"some\",{\"1\":{\"299\":1,\"311\":1,\"318\":1}}],[\"sourcefieldname\",{\"1\":{\"293\":3,\"307\":1,\"308\":3,\"495\":3,\"498\":3,\"520\":1}}],[\"source\",{\"1\":{\"287\":15}}],[\"sokit\",{\"1\":{\"7\":3}}],[\"simulatejt808request\",{\"1\":{\"567\":2}}],[\"simpleattachmentjt808requestprocessor\",{\"1\":{\"567\":2}}],[\"simplejt808requesthandler<jt808response>\",{\"1\":{\"357\":1,\"429\":1,\"432\":1}}],[\"simplejt808requesthandler<builtinmsg8100>\",{\"1\":{\"342\":1}}],[\"simplejt808requesthandlerhandlermapping\",{\"1\":{\"336\":1}}],[\"simplejt808requesthandler\",{\"0\":{\"340\":1},\"1\":{\"322\":6,\"336\":1,\"341\":1,\"342\":1,\"389\":2}}],[\"simpledateformat\",{\"1\":{\"241\":1}}],[\"singleton\",{\"1\":{\"538\":1}}],[\"since\",{\"1\":{\"379\":1}}],[\"size\",{\"0\":{\"152\":1,\"153\":1,\"214\":1,\"215\":1,\"217\":1},\"1\":{\"151\":2,\"184\":1,\"185\":1,\"217\":1,\"320\":1,\"360\":5,\"361\":2,\"373\":2,\"419\":1,\"423\":1,\"473\":1,\"515\":1,\"567\":1}}],[\"super\",{\"1\":{\"534\":1,\"539\":1}}],[\"supplyjt808sessionmanagereventlistener\",{\"1\":{\"547\":1}}],[\"supplyjt808sessionmanager\",{\"1\":{\"546\":1}}],[\"supplymsgtypeparser\",{\"1\":{\"543\":1}}],[\"supplybytesencoder\",{\"1\":{\"530\":1}}],[\"supplyauthcodevalidator\",{\"1\":{\"529\":1}}],[\"suppresswarnings\",{\"1\":{\"515\":1}}],[\"supportsparameter\",{\"1\":{\"326\":1}}],[\"support\",{\"1\":{\"1\":1,\"131\":2,\"169\":1,\"170\":2,\"237\":1,\"242\":1,\"348\":1,\"370\":1,\"389\":2,\"441\":1,\"444\":2,\"449\":1,\"531\":1,\"558\":1}}],[\"successful\",{\"1\":{\"444\":1}}],[\"success\",{\"1\":{\"290\":1,\"293\":1,\"334\":1,\"508\":1,\"522\":1,\"523\":3,\"526\":1,\"529\":3,\"538\":2,\"567\":2}}],[\"subseq\",{\"1\":{\"502\":3}}],[\"subpackagemsg\",{\"1\":{\"366\":2}}],[\"subpackagemsglist\",{\"1\":{\"366\":2}}],[\"subpackage\",{\"1\":{\"346\":2,\"364\":2}}],[\"sub\",{\"0\":{\"182\":1,\"184\":1,\"185\":1},\"1\":{\"143\":2,\"184\":2,\"185\":3,\"347\":5,\"365\":3}}],[\"step\",{\"1\":{\"434\":1,\"435\":1,\"436\":1}}],[\"stream\",{\"1\":{\"366\":2,\"393\":1}}],[\"string\",{\"0\":{\"262\":1,\"281\":1},\"1\":{\"107\":2,\"133\":1,\"157\":1,\"164\":1,\"203\":1,\"207\":1,\"211\":1,\"218\":1,\"225\":3,\"226\":5,\"227\":4,\"235\":1,\"236\":1,\"239\":2,\"240\":2,\"241\":3,\"242\":2,\"246\":2,\"251\":1,\"252\":1,\"260\":1,\"261\":1,\"263\":4,\"264\":4,\"270\":1,\"271\":1,\"279\":1,\"280\":1,\"282\":4,\"283\":4,\"293\":1,\"305\":9,\"316\":3,\"318\":1,\"320\":2,\"354\":3,\"357\":1,\"364\":1,\"392\":3,\"393\":2,\"414\":1,\"419\":2,\"423\":2,\"429\":1,\"431\":1,\"432\":1,\"458\":5,\"473\":1,\"474\":2,\"479\":1,\"480\":6,\"486\":1,\"495\":1,\"512\":1,\"515\":1,\"529\":2,\"532\":1,\"538\":3,\"542\":2,\"567\":2}}],[\"storageconfig\",{\"1\":{\"396\":2}}],[\"storage\",{\"0\":{\"184\":1,\"185\":1},\"1\":{\"143\":2,\"184\":2,\"185\":3,\"347\":5,\"365\":4}}],[\"startbitindex\",{\"1\":{\"307\":1,\"520\":1}}],[\"start\",{\"1\":{\"236\":2,\"241\":2,\"529\":1,\"530\":2}}],[\"startindexmethod使用示例\",{\"1\":{\"495\":1}}],[\"startindexmethod\",{\"1\":{\"303\":1,\"305\":1,\"308\":1,\"495\":1,\"518\":1}}],[\"startindexexpression\",{\"1\":{\"303\":1,\"304\":1,\"305\":1,\"308\":1}}],[\"startindex\",{\"1\":{\"225\":6,\"246\":3,\"287\":1,\"290\":1,\"293\":1,\"303\":3,\"305\":1,\"308\":1,\"495\":10,\"497\":1,\"498\":1,\"499\":2,\"501\":1,\"502\":1,\"504\":4,\"518\":3,\"521\":1}}],[\"starter<\",{\"1\":{\"454\":2,\"455\":3}}],[\"starter\",{\"1\":{\"1\":2,\"113\":1,\"115\":10,\"131\":2,\"404\":10,\"406\":3,\"407\":3,\"438\":3,\"440\":1,\"441\":4,\"442\":1,\"444\":4,\"448\":9,\"449\":2,\"452\":5,\"453\":1,\"454\":5,\"455\":4,\"464\":1,\"465\":1,\"485\":1}}],[\"statusinfo\",{\"1\":{\"499\":2}}],[\"status的第3位\",{\"1\":{\"497\":1}}],[\"status的第0位\",{\"1\":{\"497\":1}}],[\"statusbytes1\",{\"1\":{\"518\":1}}],[\"statusbytes\",{\"1\":{\"497\":3,\"518\":1}}],[\"status字段是由消息体中第4~7个字节表示的\",{\"1\":{\"496\":1}}],[\"status\",{\"1\":{\"293\":7,\"308\":7,\"495\":7,\"497\":3,\"498\":7,\"499\":1}}],[\"static\",{\"1\":{\"286\":1,\"290\":1,\"293\":1,\"333\":1,\"386\":1,\"393\":2,\"418\":1,\"422\":1,\"434\":2,\"435\":1,\"458\":2,\"486\":1,\"499\":1,\"509\":1,\"515\":1,\"523\":2,\"532\":1,\"542\":2}}],[\"statistics\",{\"0\":{\"168\":1,\"220\":1},\"1\":{\"166\":1,\"168\":1,\"191\":1,\"220\":1,\"466\":1,\"468\":1,\"486\":1,\"487\":1}}],[\"stater<\",{\"1\":{\"485\":1}}],[\"stater\",{\"1\":{\"115\":4,\"404\":4,\"406\":3,\"407\":3,\"448\":2,\"485\":1}}],[\"state\",{\"0\":{\"181\":1,\"199\":1},\"1\":{\"23\":1,\"55\":1,\"58\":1,\"175\":1,\"181\":2,\"199\":1}}],[\"separator\",{\"1\":{\"567\":6}}],[\"seek\",{\"1\":{\"567\":1}}],[\"see\",{\"1\":{\"346\":1,\"361\":2,\"370\":2,\"371\":2,\"379\":2,\"383\":2,\"389\":6,\"395\":1,\"472\":1,\"474\":1,\"480\":1,\"567\":1}}],[\"service\",{\"1\":{\"567\":1}}],[\"servlet\",{\"1\":{\"326\":1}}],[\"servercommonreplymsgbody\",{\"1\":{\"526\":3}}],[\"serverchannel>\",{\"1\":{\"386\":1}}],[\"serverwebexchange\",{\"1\":{\"475\":1}}],[\"servermsgid\",{\"1\":{\"434\":1}}],[\"serverflowid\",{\"1\":{\"434\":1}}],[\"serverprops\",{\"1\":{\"386\":5}}],[\"serverbootstrap\",{\"1\":{\"385\":6,\"386\":6,\"387\":2,\"410\":8}}],[\"server\",{\"0\":{\"174\":1,\"195\":1},\"1\":{\"1\":8,\"23\":1,\"55\":1,\"58\":1,\"113\":2,\"115\":7,\"119\":1,\"131\":6,\"143\":2,\"144\":2,\"145\":1,\"174\":1,\"175\":1,\"181\":2,\"190\":2,\"191\":1,\"199\":1,\"329\":1,\"331\":1,\"341\":1,\"377\":2,\"379\":1,\"386\":1,\"390\":1,\"404\":7,\"406\":2,\"407\":2,\"419\":1,\"423\":1,\"438\":2,\"440\":1,\"441\":7,\"442\":1,\"444\":8,\"448\":4,\"449\":5,\"452\":4,\"453\":1,\"454\":4,\"455\":4,\"461\":1,\"464\":1,\"465\":1,\"470\":1,\"475\":1,\"483\":1,\"485\":2,\"488\":1,\"493\":1,\"505\":1,\"506\":1,\"510\":1,\"511\":1,\"515\":1,\"523\":1,\"529\":1,\"530\":1,\"535\":1,\"540\":1,\"543\":1,\"544\":2,\"545\":1,\"547\":1}}],[\"seconds\",{\"1\":{\"320\":1,\"515\":1}}],[\"sent\",{\"1\":{\"318\":1,\"512\":1,\"524\":1}}],[\"send2client\",{\"1\":{\"538\":2}}],[\"senddatatoclient\",{\"1\":{\"512\":1}}],[\"sendmsg\",{\"1\":{\"320\":1,\"515\":1}}],[\"sendmsgbysession\",{\"1\":{\"318\":1}}],[\"sendmsgtoclient\",{\"1\":{\"318\":2,\"366\":1,\"474\":1,\"512\":1}}],[\"send\",{\"1\":{\"318\":1,\"366\":1,\"515\":1,\"538\":1}}],[\"sendcommandandwaitingforreply\",{\"1\":{\"122\":1,\"320\":1,\"515\":1}}],[\"sendcommandwithdynamicfieldsandwaitingforreply\",{\"1\":{\"122\":1}}],[\"sendcommandwithdynamicfields\",{\"1\":{\"122\":1}}],[\"sendcommand\",{\"1\":{\"122\":1}}],[\"setpackagecounttoretransmit\",{\"1\":{\"567\":1}}],[\"setparamcount\",{\"1\":{\"419\":1,\"423\":1}}],[\"setparamitemlist\",{\"1\":{\"419\":1,\"423\":1}}],[\"setparamlist\",{\"1\":{\"320\":1,\"515\":1}}],[\"setuploadresult\",{\"1\":{\"567\":1}}],[\"setfiletype\",{\"1\":{\"567\":1}}],[\"setfilename\",{\"1\":{\"567\":1}}],[\"setfilenamelength\",{\"1\":{\"567\":1}}],[\"setflowid\",{\"1\":{\"300\":1,\"333\":1,\"354\":1}}],[\"setgroup\",{\"1\":{\"567\":1}}],[\"setbytesencoder\",{\"1\":{\"554\":1}}],[\"setdirection\",{\"1\":{\"534\":1}}],[\"setheight\",{\"1\":{\"534\":1}}],[\"setheader\",{\"1\":{\"399\":1}}],[\"setlng\",{\"1\":{\"534\":1}}],[\"setlat\",{\"1\":{\"534\":1}}],[\"setwarningflag\",{\"1\":{\"534\":1}}],[\"setwithstatusif\",{\"1\":{\"80\":1}}],[\"setwithstatus\",{\"1\":{\"80\":1}}],[\"sets\",{\"1\":{\"536\":1}}],[\"setspeed\",{\"1\":{\"534\":1}}],[\"setstatus\",{\"1\":{\"534\":1}}],[\"setservermsgid\",{\"1\":{\"434\":1}}],[\"setserverflowid\",{\"1\":{\"434\":1}}],[\"setsomefield\",{\"1\":{\"392\":1,\"393\":1}}],[\"setscale\",{\"1\":{\"236\":1}}],[\"set<class<\",{\"1\":{\"480\":2}}],[\"set<jt808protocolversion>\",{\"1\":{\"342\":1,\"357\":1}}],[\"set<msgtype>\",{\"1\":{\"342\":1,\"357\":1,\"536\":1,\"538\":2}}],[\"settime\",{\"1\":{\"534\":1}}],[\"settings\",{\"1\":{\"111\":1,\"444\":1,\"515\":1}}],[\"settotalparamcount\",{\"1\":{\"320\":1,\"515\":1}}],[\"setauthcode\",{\"1\":{\"300\":1,\"333\":1,\"354\":1}}],[\"setattribute\",{\"1\":{\"54\":1,\"57\":1}}],[\"setretransmititemlist\",{\"1\":{\"567\":1}}],[\"setreplymsgid\",{\"1\":{\"523\":1}}],[\"setreplyflowid\",{\"1\":{\"523\":1}}],[\"setrequestmsgmetadata\",{\"1\":{\"553\":1}}],[\"setrequestmsgheader\",{\"1\":{\"552\":1}}],[\"setrequest\",{\"1\":{\"400\":1}}],[\"setresult\",{\"1\":{\"300\":1,\"333\":1,\"354\":1,\"434\":1,\"523\":1}}],[\"setrangeif\",{\"1\":{\"80\":1}}],[\"set\",{\"1\":{\"81\":1,\"320\":1,\"342\":1,\"357\":1,\"415\":7,\"419\":1,\"423\":1}}],[\"setif\",{\"1\":{\"80\":1}}],[\"setchannel\",{\"1\":{\"41\":1}}],[\"sessionadd\",{\"1\":{\"547\":1}}],[\"sessionargumentresolver\",{\"1\":{\"509\":1}}],[\"sessioninfo\",{\"1\":{\"512\":3}}],[\"sessionid\",{\"1\":{\"474\":1,\"547\":1}}],[\"session事件监听器\",{\"1\":{\"394\":3}}],[\"sessionclosereason\",{\"1\":{\"394\":1}}],[\"session相关\",{\"0\":{\"391\":1,\"545\":1}}],[\"session\",{\"1\":{\"49\":1,\"315\":1,\"318\":2,\"320\":2,\"330\":1,\"333\":1,\"334\":1,\"357\":1,\"366\":2,\"392\":1,\"393\":8,\"394\":6,\"432\":1,\"475\":1,\"508\":3,\"512\":1,\"526\":4,\"529\":2,\"536\":3,\"538\":12,\"547\":4,\"567\":13}}],[\"sessionmanager\",{\"1\":{\"44\":1,\"49\":1,\"318\":5,\"320\":5,\"366\":5,\"393\":3,\"512\":2}}],[\"scan\",{\"0\":{\"200\":1,\"205\":1,\"209\":1},\"1\":{\"191\":3,\"558\":1}}],[\"scope\",{\"1\":{\"39\":1}}],[\"script\",{\"1\":{\"1\":1,\"444\":1}}],[\"snapshot\",{\"0\":{\"30\":1,\"34\":1,\"38\":1,\"42\":1,\"46\":1,\"50\":1}}],[\"splitpropertyvalueintonestedbeanfield\",{\"1\":{\"499\":1,\"519\":1}}],[\"splittablefield\",{\"0\":{\"519\":1},\"1\":{\"499\":6}}],[\"splittablefield解析\",{\"0\":{\"499\":1}}],[\"speed\",{\"1\":{\"293\":1,\"495\":1}}],[\"spec\",{\"1\":{\"133\":2,\"295\":2,\"318\":1,\"370\":1,\"389\":1,\"392\":1}}],[\"spel元数据如下\",{\"1\":{\"304\":1}}],[\"spel\",{\"0\":{\"304\":1,\"315\":1},\"1\":{\"16\":1,\"303\":2,\"304\":2,\"305\":1,\"314\":1,\"315\":1}}],[\"springapplication\",{\"1\":{\"486\":1}}],[\"springbootapplication\",{\"1\":{\"486\":1}}],[\"springframework\",{\"1\":{\"334\":1,\"341\":1,\"379\":5,\"454\":2,\"455\":2,\"475\":1}}],[\"springmvc\",{\"1\":{\"322\":2,\"507\":1,\"508\":1,\"509\":1}}],[\"spring\",{\"0\":{\"406\":1,\"407\":1,\"442\":1,\"451\":1,\"454\":1,\"455\":1,\"464\":1,\"465\":1},\"1\":{\"1\":10,\"16\":1,\"65\":1,\"70\":1,\"85\":2,\"113\":4,\"115\":24,\"116\":1,\"131\":4,\"144\":1,\"190\":1,\"210\":1,\"225\":1,\"229\":1,\"297\":3,\"322\":1,\"323\":1,\"326\":1,\"334\":1,\"338\":2,\"341\":1,\"342\":1,\"353\":1,\"379\":1,\"383\":1,\"393\":1,\"396\":1,\"397\":2,\"404\":24,\"406\":3,\"407\":3,\"422\":1,\"438\":5,\"440\":3,\"441\":9,\"442\":7,\"444\":8,\"448\":12,\"449\":5,\"450\":2,\"452\":6,\"453\":8,\"454\":14,\"455\":14,\"459\":1,\"462\":3,\"464\":2,\"465\":2,\"468\":1,\"475\":1,\"484\":3,\"485\":3,\"487\":1,\"490\":1,\"491\":1,\"550\":2,\"554\":1}}],[\"├──\",{\"1\":{\"1\":13}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const u=bt[s];e==="suggest"?self.postMessage([e,o,tt(t,u,n)]):e==="search"?self.postMessage([e,o,Z(t,u,n)]):self.postMessage({suggestions:[e,o,tt(t,u,n)],results:[e,o,Z(t,u,n)]})};
//# sourceMappingURL=index.js.map
